// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spatial.proto

package SC2APIProtocol;

public final class Spatial {
  private Spatial() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ObservationFeatureLayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ObservationFeatureLayer)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
     */
    boolean hasRenders();
    /**
     * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
     */
    SC2APIProtocol.Spatial.FeatureLayers getRenders();
    /**
     * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
     */
    SC2APIProtocol.Spatial.FeatureLayersOrBuilder getRendersOrBuilder();

    /**
     * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
     */
    boolean hasMinimapRenders();
    /**
     * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
     */
    SC2APIProtocol.Spatial.FeatureLayersMinimap getMinimapRenders();
    /**
     * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
     */
    SC2APIProtocol.Spatial.FeatureLayersMinimapOrBuilder getMinimapRendersOrBuilder();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ObservationFeatureLayer}
   */
  public  static final class ObservationFeatureLayer extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ObservationFeatureLayer)
      ObservationFeatureLayerOrBuilder {
    // Use ObservationFeatureLayer.newBuilder() to construct.
    private ObservationFeatureLayer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ObservationFeatureLayer() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ObservationFeatureLayer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Spatial.FeatureLayers.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = renders_.toBuilder();
              }
              renders_ = input.readMessage(SC2APIProtocol.Spatial.FeatureLayers.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(renders_);
                renders_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              SC2APIProtocol.Spatial.FeatureLayersMinimap.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = minimapRenders_.toBuilder();
              }
              minimapRenders_ = input.readMessage(SC2APIProtocol.Spatial.FeatureLayersMinimap.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minimapRenders_);
                minimapRenders_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ObservationFeatureLayer_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ObservationFeatureLayer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Spatial.ObservationFeatureLayer.class, SC2APIProtocol.Spatial.ObservationFeatureLayer.Builder.class);
    }

    private int bitField0_;
    public static final int RENDERS_FIELD_NUMBER = 1;
    private SC2APIProtocol.Spatial.FeatureLayers renders_;
    /**
     * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
     */
    public boolean hasRenders() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
     */
    public SC2APIProtocol.Spatial.FeatureLayers getRenders() {
      return renders_ == null ? SC2APIProtocol.Spatial.FeatureLayers.getDefaultInstance() : renders_;
    }
    /**
     * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
     */
    public SC2APIProtocol.Spatial.FeatureLayersOrBuilder getRendersOrBuilder() {
      return renders_ == null ? SC2APIProtocol.Spatial.FeatureLayers.getDefaultInstance() : renders_;
    }

    public static final int MINIMAP_RENDERS_FIELD_NUMBER = 2;
    private SC2APIProtocol.Spatial.FeatureLayersMinimap minimapRenders_;
    /**
     * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
     */
    public boolean hasMinimapRenders() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
     */
    public SC2APIProtocol.Spatial.FeatureLayersMinimap getMinimapRenders() {
      return minimapRenders_ == null ? SC2APIProtocol.Spatial.FeatureLayersMinimap.getDefaultInstance() : minimapRenders_;
    }
    /**
     * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
     */
    public SC2APIProtocol.Spatial.FeatureLayersMinimapOrBuilder getMinimapRendersOrBuilder() {
      return minimapRenders_ == null ? SC2APIProtocol.Spatial.FeatureLayersMinimap.getDefaultInstance() : minimapRenders_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getRenders());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getMinimapRenders());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getRenders());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMinimapRenders());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Spatial.ObservationFeatureLayer)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Spatial.ObservationFeatureLayer other = (SC2APIProtocol.Spatial.ObservationFeatureLayer) obj;

      boolean result = true;
      result = result && (hasRenders() == other.hasRenders());
      if (hasRenders()) {
        result = result && getRenders()
            .equals(other.getRenders());
      }
      result = result && (hasMinimapRenders() == other.hasMinimapRenders());
      if (hasMinimapRenders()) {
        result = result && getMinimapRenders()
            .equals(other.getMinimapRenders());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasRenders()) {
        hash = (37 * hash) + RENDERS_FIELD_NUMBER;
        hash = (53 * hash) + getRenders().hashCode();
      }
      if (hasMinimapRenders()) {
        hash = (37 * hash) + MINIMAP_RENDERS_FIELD_NUMBER;
        hash = (53 * hash) + getMinimapRenders().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Spatial.ObservationFeatureLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ObservationFeatureLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ObservationFeatureLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ObservationFeatureLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ObservationFeatureLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ObservationFeatureLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ObservationFeatureLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ObservationFeatureLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ObservationFeatureLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ObservationFeatureLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Spatial.ObservationFeatureLayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ObservationFeatureLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ObservationFeatureLayer)
        SC2APIProtocol.Spatial.ObservationFeatureLayerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ObservationFeatureLayer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ObservationFeatureLayer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Spatial.ObservationFeatureLayer.class, SC2APIProtocol.Spatial.ObservationFeatureLayer.Builder.class);
      }

      // Construct using SC2APIProtocol.Spatial.ObservationFeatureLayer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getRendersFieldBuilder();
          getMinimapRendersFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (rendersBuilder_ == null) {
          renders_ = null;
        } else {
          rendersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (minimapRendersBuilder_ == null) {
          minimapRenders_ = null;
        } else {
          minimapRendersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ObservationFeatureLayer_descriptor;
      }

      public SC2APIProtocol.Spatial.ObservationFeatureLayer getDefaultInstanceForType() {
        return SC2APIProtocol.Spatial.ObservationFeatureLayer.getDefaultInstance();
      }

      public SC2APIProtocol.Spatial.ObservationFeatureLayer build() {
        SC2APIProtocol.Spatial.ObservationFeatureLayer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Spatial.ObservationFeatureLayer buildPartial() {
        SC2APIProtocol.Spatial.ObservationFeatureLayer result = new SC2APIProtocol.Spatial.ObservationFeatureLayer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (rendersBuilder_ == null) {
          result.renders_ = renders_;
        } else {
          result.renders_ = rendersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (minimapRendersBuilder_ == null) {
          result.minimapRenders_ = minimapRenders_;
        } else {
          result.minimapRenders_ = minimapRendersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Spatial.ObservationFeatureLayer) {
          return mergeFrom((SC2APIProtocol.Spatial.ObservationFeatureLayer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Spatial.ObservationFeatureLayer other) {
        if (other == SC2APIProtocol.Spatial.ObservationFeatureLayer.getDefaultInstance()) return this;
        if (other.hasRenders()) {
          mergeRenders(other.getRenders());
        }
        if (other.hasMinimapRenders()) {
          mergeMinimapRenders(other.getMinimapRenders());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Spatial.ObservationFeatureLayer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Spatial.ObservationFeatureLayer) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Spatial.FeatureLayers renders_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.FeatureLayers, SC2APIProtocol.Spatial.FeatureLayers.Builder, SC2APIProtocol.Spatial.FeatureLayersOrBuilder> rendersBuilder_;
      /**
       * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
       */
      public boolean hasRenders() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
       */
      public SC2APIProtocol.Spatial.FeatureLayers getRenders() {
        if (rendersBuilder_ == null) {
          return renders_ == null ? SC2APIProtocol.Spatial.FeatureLayers.getDefaultInstance() : renders_;
        } else {
          return rendersBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
       */
      public Builder setRenders(SC2APIProtocol.Spatial.FeatureLayers value) {
        if (rendersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          renders_ = value;
          onChanged();
        } else {
          rendersBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
       */
      public Builder setRenders(
          SC2APIProtocol.Spatial.FeatureLayers.Builder builderForValue) {
        if (rendersBuilder_ == null) {
          renders_ = builderForValue.build();
          onChanged();
        } else {
          rendersBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
       */
      public Builder mergeRenders(SC2APIProtocol.Spatial.FeatureLayers value) {
        if (rendersBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              renders_ != null &&
              renders_ != SC2APIProtocol.Spatial.FeatureLayers.getDefaultInstance()) {
            renders_ =
              SC2APIProtocol.Spatial.FeatureLayers.newBuilder(renders_).mergeFrom(value).buildPartial();
          } else {
            renders_ = value;
          }
          onChanged();
        } else {
          rendersBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
       */
      public Builder clearRenders() {
        if (rendersBuilder_ == null) {
          renders_ = null;
          onChanged();
        } else {
          rendersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
       */
      public SC2APIProtocol.Spatial.FeatureLayers.Builder getRendersBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRendersFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
       */
      public SC2APIProtocol.Spatial.FeatureLayersOrBuilder getRendersOrBuilder() {
        if (rendersBuilder_ != null) {
          return rendersBuilder_.getMessageOrBuilder();
        } else {
          return renders_ == null ?
              SC2APIProtocol.Spatial.FeatureLayers.getDefaultInstance() : renders_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayers renders = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.FeatureLayers, SC2APIProtocol.Spatial.FeatureLayers.Builder, SC2APIProtocol.Spatial.FeatureLayersOrBuilder> 
          getRendersFieldBuilder() {
        if (rendersBuilder_ == null) {
          rendersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Spatial.FeatureLayers, SC2APIProtocol.Spatial.FeatureLayers.Builder, SC2APIProtocol.Spatial.FeatureLayersOrBuilder>(
                  getRenders(),
                  getParentForChildren(),
                  isClean());
          renders_ = null;
        }
        return rendersBuilder_;
      }

      private SC2APIProtocol.Spatial.FeatureLayersMinimap minimapRenders_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.FeatureLayersMinimap, SC2APIProtocol.Spatial.FeatureLayersMinimap.Builder, SC2APIProtocol.Spatial.FeatureLayersMinimapOrBuilder> minimapRendersBuilder_;
      /**
       * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
       */
      public boolean hasMinimapRenders() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
       */
      public SC2APIProtocol.Spatial.FeatureLayersMinimap getMinimapRenders() {
        if (minimapRendersBuilder_ == null) {
          return minimapRenders_ == null ? SC2APIProtocol.Spatial.FeatureLayersMinimap.getDefaultInstance() : minimapRenders_;
        } else {
          return minimapRendersBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
       */
      public Builder setMinimapRenders(SC2APIProtocol.Spatial.FeatureLayersMinimap value) {
        if (minimapRendersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minimapRenders_ = value;
          onChanged();
        } else {
          minimapRendersBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
       */
      public Builder setMinimapRenders(
          SC2APIProtocol.Spatial.FeatureLayersMinimap.Builder builderForValue) {
        if (minimapRendersBuilder_ == null) {
          minimapRenders_ = builderForValue.build();
          onChanged();
        } else {
          minimapRendersBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
       */
      public Builder mergeMinimapRenders(SC2APIProtocol.Spatial.FeatureLayersMinimap value) {
        if (minimapRendersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              minimapRenders_ != null &&
              minimapRenders_ != SC2APIProtocol.Spatial.FeatureLayersMinimap.getDefaultInstance()) {
            minimapRenders_ =
              SC2APIProtocol.Spatial.FeatureLayersMinimap.newBuilder(minimapRenders_).mergeFrom(value).buildPartial();
          } else {
            minimapRenders_ = value;
          }
          onChanged();
        } else {
          minimapRendersBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
       */
      public Builder clearMinimapRenders() {
        if (minimapRendersBuilder_ == null) {
          minimapRenders_ = null;
          onChanged();
        } else {
          minimapRendersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
       */
      public SC2APIProtocol.Spatial.FeatureLayersMinimap.Builder getMinimapRendersBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMinimapRendersFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
       */
      public SC2APIProtocol.Spatial.FeatureLayersMinimapOrBuilder getMinimapRendersOrBuilder() {
        if (minimapRendersBuilder_ != null) {
          return minimapRendersBuilder_.getMessageOrBuilder();
        } else {
          return minimapRenders_ == null ?
              SC2APIProtocol.Spatial.FeatureLayersMinimap.getDefaultInstance() : minimapRenders_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.FeatureLayersMinimap, SC2APIProtocol.Spatial.FeatureLayersMinimap.Builder, SC2APIProtocol.Spatial.FeatureLayersMinimapOrBuilder> 
          getMinimapRendersFieldBuilder() {
        if (minimapRendersBuilder_ == null) {
          minimapRendersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Spatial.FeatureLayersMinimap, SC2APIProtocol.Spatial.FeatureLayersMinimap.Builder, SC2APIProtocol.Spatial.FeatureLayersMinimapOrBuilder>(
                  getMinimapRenders(),
                  getParentForChildren(),
                  isClean());
          minimapRenders_ = null;
        }
        return minimapRendersBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ObservationFeatureLayer)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ObservationFeatureLayer)
    private static final SC2APIProtocol.Spatial.ObservationFeatureLayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Spatial.ObservationFeatureLayer();
    }

    public static SC2APIProtocol.Spatial.ObservationFeatureLayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ObservationFeatureLayer>
        PARSER = new com.google.protobuf.AbstractParser<ObservationFeatureLayer>() {
      public ObservationFeatureLayer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ObservationFeatureLayer(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ObservationFeatureLayer> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ObservationFeatureLayer> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Spatial.ObservationFeatureLayer getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FeatureLayersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.FeatureLayers)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    boolean hasHeightMap();
    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    SC2APIProtocol.Common.ImageData getHeightMap();
    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getHeightMapOrBuilder();

    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    boolean hasVisibilityMap();
    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    SC2APIProtocol.Common.ImageData getVisibilityMap();
    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getVisibilityMapOrBuilder();

    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    boolean hasCreep();
    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    SC2APIProtocol.Common.ImageData getCreep();
    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getCreepOrBuilder();

    /**
     * <pre>
     * 1-bit. Protoss power.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
     */
    boolean hasPower();
    /**
     * <pre>
     * 1-bit. Protoss power.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
     */
    SC2APIProtocol.Common.ImageData getPower();
    /**
     * <pre>
     * 1-bit. Protoss power.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getPowerOrBuilder();

    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    boolean hasPlayerId();
    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    SC2APIProtocol.Common.ImageData getPlayerId();
    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getPlayerIdOrBuilder();

    /**
     * <pre>
     * int32. Unique identifier for type of unit.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
     */
    boolean hasUnitType();
    /**
     * <pre>
     * int32. Unique identifier for type of unit.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
     */
    SC2APIProtocol.Common.ImageData getUnitType();
    /**
     * <pre>
     * int32. Unique identifier for type of unit.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getUnitTypeOrBuilder();

    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    boolean hasSelected();
    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    SC2APIProtocol.Common.ImageData getSelected();
    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getSelectedOrBuilder();

    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
     */
    boolean hasUnitHitPoints();
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
     */
    SC2APIProtocol.Common.ImageData getUnitHitPoints();
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getUnitHitPointsOrBuilder();

    /**
     * <pre>
     * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
     */
    boolean hasUnitHitPointsRatio();
    /**
     * <pre>
     * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
     */
    SC2APIProtocol.Common.ImageData getUnitHitPointsRatio();
    /**
     * <pre>
     * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getUnitHitPointsRatioOrBuilder();

    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
     */
    boolean hasUnitEnergy();
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
     */
    SC2APIProtocol.Common.ImageData getUnitEnergy();
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getUnitEnergyOrBuilder();

    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
     */
    boolean hasUnitShields();
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
     */
    SC2APIProtocol.Common.ImageData getUnitShields();
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getUnitShieldsOrBuilder();

    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
     */
    boolean hasPlayerRelative();
    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
     */
    SC2APIProtocol.Common.ImageData getPlayerRelative();
    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getPlayerRelativeOrBuilder();

    /**
     * <pre>
     * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
     */
    boolean hasUnitDensityAa();
    /**
     * <pre>
     * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
     */
    SC2APIProtocol.Common.ImageData getUnitDensityAa();
    /**
     * <pre>
     * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getUnitDensityAaOrBuilder();

    /**
     * <pre>
     * uint8. Count of units overlapping a pixel.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
     */
    boolean hasUnitDensity();
    /**
     * <pre>
     * uint8. Count of units overlapping a pixel.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
     */
    SC2APIProtocol.Common.ImageData getUnitDensity();
    /**
     * <pre>
     * uint8. Count of units overlapping a pixel.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getUnitDensityOrBuilder();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.FeatureLayers}
   */
  public  static final class FeatureLayers extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.FeatureLayers)
      FeatureLayersOrBuilder {
    // Use FeatureLayers.newBuilder() to construct.
    private FeatureLayers(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FeatureLayers() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FeatureLayers(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = heightMap_.toBuilder();
              }
              heightMap_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(heightMap_);
                heightMap_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = visibilityMap_.toBuilder();
              }
              visibilityMap_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(visibilityMap_);
                visibilityMap_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = creep_.toBuilder();
              }
              creep_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(creep_);
                creep_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = power_.toBuilder();
              }
              power_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(power_);
                power_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = playerId_.toBuilder();
              }
              playerId_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(playerId_);
                playerId_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = unitType_.toBuilder();
              }
              unitType_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(unitType_);
                unitType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = selected_.toBuilder();
              }
              selected_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(selected_);
                selected_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = unitHitPoints_.toBuilder();
              }
              unitHitPoints_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(unitHitPoints_);
                unitHitPoints_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = unitEnergy_.toBuilder();
              }
              unitEnergy_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(unitEnergy_);
                unitEnergy_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 82: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = unitShields_.toBuilder();
              }
              unitShields_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(unitShields_);
                unitShields_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 90: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = playerRelative_.toBuilder();
              }
              playerRelative_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(playerRelative_);
                playerRelative_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 114: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = unitDensityAa_.toBuilder();
              }
              unitDensityAa_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(unitDensityAa_);
                unitDensityAa_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 122: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = unitDensity_.toBuilder();
              }
              unitDensity_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(unitDensity_);
                unitDensity_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 138: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = unitHitPointsRatio_.toBuilder();
              }
              unitHitPointsRatio_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(unitHitPointsRatio_);
                unitHitPointsRatio_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_FeatureLayers_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_FeatureLayers_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Spatial.FeatureLayers.class, SC2APIProtocol.Spatial.FeatureLayers.Builder.class);
    }

    private int bitField0_;
    public static final int HEIGHT_MAP_FIELD_NUMBER = 1;
    private SC2APIProtocol.Common.ImageData heightMap_;
    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    public boolean hasHeightMap() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    public SC2APIProtocol.Common.ImageData getHeightMap() {
      return heightMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : heightMap_;
    }
    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getHeightMapOrBuilder() {
      return heightMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : heightMap_;
    }

    public static final int VISIBILITY_MAP_FIELD_NUMBER = 2;
    private SC2APIProtocol.Common.ImageData visibilityMap_;
    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    public boolean hasVisibilityMap() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    public SC2APIProtocol.Common.ImageData getVisibilityMap() {
      return visibilityMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibilityMap_;
    }
    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getVisibilityMapOrBuilder() {
      return visibilityMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibilityMap_;
    }

    public static final int CREEP_FIELD_NUMBER = 3;
    private SC2APIProtocol.Common.ImageData creep_;
    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    public boolean hasCreep() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    public SC2APIProtocol.Common.ImageData getCreep() {
      return creep_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
    }
    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getCreepOrBuilder() {
      return creep_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
    }

    public static final int POWER_FIELD_NUMBER = 4;
    private SC2APIProtocol.Common.ImageData power_;
    /**
     * <pre>
     * 1-bit. Protoss power.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
     */
    public boolean hasPower() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 1-bit. Protoss power.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
     */
    public SC2APIProtocol.Common.ImageData getPower() {
      return power_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : power_;
    }
    /**
     * <pre>
     * 1-bit. Protoss power.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getPowerOrBuilder() {
      return power_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : power_;
    }

    public static final int PLAYER_ID_FIELD_NUMBER = 5;
    private SC2APIProtocol.Common.ImageData playerId_;
    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    public SC2APIProtocol.Common.ImageData getPlayerId() {
      return playerId_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerId_;
    }
    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getPlayerIdOrBuilder() {
      return playerId_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerId_;
    }

    public static final int UNIT_TYPE_FIELD_NUMBER = 6;
    private SC2APIProtocol.Common.ImageData unitType_;
    /**
     * <pre>
     * int32. Unique identifier for type of unit.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
     */
    public boolean hasUnitType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * int32. Unique identifier for type of unit.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
     */
    public SC2APIProtocol.Common.ImageData getUnitType() {
      return unitType_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitType_;
    }
    /**
     * <pre>
     * int32. Unique identifier for type of unit.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getUnitTypeOrBuilder() {
      return unitType_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitType_;
    }

    public static final int SELECTED_FIELD_NUMBER = 7;
    private SC2APIProtocol.Common.ImageData selected_;
    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    public boolean hasSelected() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    public SC2APIProtocol.Common.ImageData getSelected() {
      return selected_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : selected_;
    }
    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getSelectedOrBuilder() {
      return selected_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : selected_;
    }

    public static final int UNIT_HIT_POINTS_FIELD_NUMBER = 8;
    private SC2APIProtocol.Common.ImageData unitHitPoints_;
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
     */
    public boolean hasUnitHitPoints() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
     */
    public SC2APIProtocol.Common.ImageData getUnitHitPoints() {
      return unitHitPoints_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitHitPoints_;
    }
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getUnitHitPointsOrBuilder() {
      return unitHitPoints_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitHitPoints_;
    }

    public static final int UNIT_HIT_POINTS_RATIO_FIELD_NUMBER = 17;
    private SC2APIProtocol.Common.ImageData unitHitPointsRatio_;
    /**
     * <pre>
     * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
     */
    public boolean hasUnitHitPointsRatio() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
     */
    public SC2APIProtocol.Common.ImageData getUnitHitPointsRatio() {
      return unitHitPointsRatio_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitHitPointsRatio_;
    }
    /**
     * <pre>
     * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getUnitHitPointsRatioOrBuilder() {
      return unitHitPointsRatio_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitHitPointsRatio_;
    }

    public static final int UNIT_ENERGY_FIELD_NUMBER = 9;
    private SC2APIProtocol.Common.ImageData unitEnergy_;
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
     */
    public boolean hasUnitEnergy() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
     */
    public SC2APIProtocol.Common.ImageData getUnitEnergy() {
      return unitEnergy_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitEnergy_;
    }
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getUnitEnergyOrBuilder() {
      return unitEnergy_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitEnergy_;
    }

    public static final int UNIT_SHIELDS_FIELD_NUMBER = 10;
    private SC2APIProtocol.Common.ImageData unitShields_;
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
     */
    public boolean hasUnitShields() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
     */
    public SC2APIProtocol.Common.ImageData getUnitShields() {
      return unitShields_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitShields_;
    }
    /**
     * <pre>
     * int32.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getUnitShieldsOrBuilder() {
      return unitShields_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitShields_;
    }

    public static final int PLAYER_RELATIVE_FIELD_NUMBER = 11;
    private SC2APIProtocol.Common.ImageData playerRelative_;
    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
     */
    public boolean hasPlayerRelative() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
     */
    public SC2APIProtocol.Common.ImageData getPlayerRelative() {
      return playerRelative_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerRelative_;
    }
    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getPlayerRelativeOrBuilder() {
      return playerRelative_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerRelative_;
    }

    public static final int UNIT_DENSITY_AA_FIELD_NUMBER = 14;
    private SC2APIProtocol.Common.ImageData unitDensityAa_;
    /**
     * <pre>
     * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
     */
    public boolean hasUnitDensityAa() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
     */
    public SC2APIProtocol.Common.ImageData getUnitDensityAa() {
      return unitDensityAa_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitDensityAa_;
    }
    /**
     * <pre>
     * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getUnitDensityAaOrBuilder() {
      return unitDensityAa_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitDensityAa_;
    }

    public static final int UNIT_DENSITY_FIELD_NUMBER = 15;
    private SC2APIProtocol.Common.ImageData unitDensity_;
    /**
     * <pre>
     * uint8. Count of units overlapping a pixel.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
     */
    public boolean hasUnitDensity() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     * uint8. Count of units overlapping a pixel.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
     */
    public SC2APIProtocol.Common.ImageData getUnitDensity() {
      return unitDensity_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitDensity_;
    }
    /**
     * <pre>
     * uint8. Count of units overlapping a pixel.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getUnitDensityOrBuilder() {
      return unitDensity_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitDensity_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getHeightMap());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getVisibilityMap());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getCreep());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, getPower());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getPlayerId());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, getUnitType());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, getSelected());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, getUnitHitPoints());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(9, getUnitEnergy());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(10, getUnitShields());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(11, getPlayerRelative());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(14, getUnitDensityAa());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(15, getUnitDensity());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(17, getUnitHitPointsRatio());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeightMap());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getVisibilityMap());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getCreep());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getPower());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getPlayerId());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getUnitType());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getSelected());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getUnitHitPoints());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getUnitEnergy());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getUnitShields());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getPlayerRelative());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getUnitDensityAa());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getUnitDensity());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getUnitHitPointsRatio());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Spatial.FeatureLayers)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Spatial.FeatureLayers other = (SC2APIProtocol.Spatial.FeatureLayers) obj;

      boolean result = true;
      result = result && (hasHeightMap() == other.hasHeightMap());
      if (hasHeightMap()) {
        result = result && getHeightMap()
            .equals(other.getHeightMap());
      }
      result = result && (hasVisibilityMap() == other.hasVisibilityMap());
      if (hasVisibilityMap()) {
        result = result && getVisibilityMap()
            .equals(other.getVisibilityMap());
      }
      result = result && (hasCreep() == other.hasCreep());
      if (hasCreep()) {
        result = result && getCreep()
            .equals(other.getCreep());
      }
      result = result && (hasPower() == other.hasPower());
      if (hasPower()) {
        result = result && getPower()
            .equals(other.getPower());
      }
      result = result && (hasPlayerId() == other.hasPlayerId());
      if (hasPlayerId()) {
        result = result && getPlayerId()
            .equals(other.getPlayerId());
      }
      result = result && (hasUnitType() == other.hasUnitType());
      if (hasUnitType()) {
        result = result && getUnitType()
            .equals(other.getUnitType());
      }
      result = result && (hasSelected() == other.hasSelected());
      if (hasSelected()) {
        result = result && getSelected()
            .equals(other.getSelected());
      }
      result = result && (hasUnitHitPoints() == other.hasUnitHitPoints());
      if (hasUnitHitPoints()) {
        result = result && getUnitHitPoints()
            .equals(other.getUnitHitPoints());
      }
      result = result && (hasUnitHitPointsRatio() == other.hasUnitHitPointsRatio());
      if (hasUnitHitPointsRatio()) {
        result = result && getUnitHitPointsRatio()
            .equals(other.getUnitHitPointsRatio());
      }
      result = result && (hasUnitEnergy() == other.hasUnitEnergy());
      if (hasUnitEnergy()) {
        result = result && getUnitEnergy()
            .equals(other.getUnitEnergy());
      }
      result = result && (hasUnitShields() == other.hasUnitShields());
      if (hasUnitShields()) {
        result = result && getUnitShields()
            .equals(other.getUnitShields());
      }
      result = result && (hasPlayerRelative() == other.hasPlayerRelative());
      if (hasPlayerRelative()) {
        result = result && getPlayerRelative()
            .equals(other.getPlayerRelative());
      }
      result = result && (hasUnitDensityAa() == other.hasUnitDensityAa());
      if (hasUnitDensityAa()) {
        result = result && getUnitDensityAa()
            .equals(other.getUnitDensityAa());
      }
      result = result && (hasUnitDensity() == other.hasUnitDensity());
      if (hasUnitDensity()) {
        result = result && getUnitDensity()
            .equals(other.getUnitDensity());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasHeightMap()) {
        hash = (37 * hash) + HEIGHT_MAP_FIELD_NUMBER;
        hash = (53 * hash) + getHeightMap().hashCode();
      }
      if (hasVisibilityMap()) {
        hash = (37 * hash) + VISIBILITY_MAP_FIELD_NUMBER;
        hash = (53 * hash) + getVisibilityMap().hashCode();
      }
      if (hasCreep()) {
        hash = (37 * hash) + CREEP_FIELD_NUMBER;
        hash = (53 * hash) + getCreep().hashCode();
      }
      if (hasPower()) {
        hash = (37 * hash) + POWER_FIELD_NUMBER;
        hash = (53 * hash) + getPower().hashCode();
      }
      if (hasPlayerId()) {
        hash = (37 * hash) + PLAYER_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPlayerId().hashCode();
      }
      if (hasUnitType()) {
        hash = (37 * hash) + UNIT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getUnitType().hashCode();
      }
      if (hasSelected()) {
        hash = (37 * hash) + SELECTED_FIELD_NUMBER;
        hash = (53 * hash) + getSelected().hashCode();
      }
      if (hasUnitHitPoints()) {
        hash = (37 * hash) + UNIT_HIT_POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getUnitHitPoints().hashCode();
      }
      if (hasUnitHitPointsRatio()) {
        hash = (37 * hash) + UNIT_HIT_POINTS_RATIO_FIELD_NUMBER;
        hash = (53 * hash) + getUnitHitPointsRatio().hashCode();
      }
      if (hasUnitEnergy()) {
        hash = (37 * hash) + UNIT_ENERGY_FIELD_NUMBER;
        hash = (53 * hash) + getUnitEnergy().hashCode();
      }
      if (hasUnitShields()) {
        hash = (37 * hash) + UNIT_SHIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getUnitShields().hashCode();
      }
      if (hasPlayerRelative()) {
        hash = (37 * hash) + PLAYER_RELATIVE_FIELD_NUMBER;
        hash = (53 * hash) + getPlayerRelative().hashCode();
      }
      if (hasUnitDensityAa()) {
        hash = (37 * hash) + UNIT_DENSITY_AA_FIELD_NUMBER;
        hash = (53 * hash) + getUnitDensityAa().hashCode();
      }
      if (hasUnitDensity()) {
        hash = (37 * hash) + UNIT_DENSITY_FIELD_NUMBER;
        hash = (53 * hash) + getUnitDensity().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Spatial.FeatureLayers parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.FeatureLayers parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.FeatureLayers parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.FeatureLayers parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.FeatureLayers parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.FeatureLayers parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.FeatureLayers parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.FeatureLayers parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.FeatureLayers parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.FeatureLayers parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Spatial.FeatureLayers prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.FeatureLayers}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.FeatureLayers)
        SC2APIProtocol.Spatial.FeatureLayersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_FeatureLayers_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_FeatureLayers_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Spatial.FeatureLayers.class, SC2APIProtocol.Spatial.FeatureLayers.Builder.class);
      }

      // Construct using SC2APIProtocol.Spatial.FeatureLayers.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getHeightMapFieldBuilder();
          getVisibilityMapFieldBuilder();
          getCreepFieldBuilder();
          getPowerFieldBuilder();
          getPlayerIdFieldBuilder();
          getUnitTypeFieldBuilder();
          getSelectedFieldBuilder();
          getUnitHitPointsFieldBuilder();
          getUnitHitPointsRatioFieldBuilder();
          getUnitEnergyFieldBuilder();
          getUnitShieldsFieldBuilder();
          getPlayerRelativeFieldBuilder();
          getUnitDensityAaFieldBuilder();
          getUnitDensityFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (heightMapBuilder_ == null) {
          heightMap_ = null;
        } else {
          heightMapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (visibilityMapBuilder_ == null) {
          visibilityMap_ = null;
        } else {
          visibilityMapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (creepBuilder_ == null) {
          creep_ = null;
        } else {
          creepBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (powerBuilder_ == null) {
          power_ = null;
        } else {
          powerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (playerIdBuilder_ == null) {
          playerId_ = null;
        } else {
          playerIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (unitTypeBuilder_ == null) {
          unitType_ = null;
        } else {
          unitTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (selectedBuilder_ == null) {
          selected_ = null;
        } else {
          selectedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (unitHitPointsBuilder_ == null) {
          unitHitPoints_ = null;
        } else {
          unitHitPointsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (unitHitPointsRatioBuilder_ == null) {
          unitHitPointsRatio_ = null;
        } else {
          unitHitPointsRatioBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (unitEnergyBuilder_ == null) {
          unitEnergy_ = null;
        } else {
          unitEnergyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (unitShieldsBuilder_ == null) {
          unitShields_ = null;
        } else {
          unitShieldsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (playerRelativeBuilder_ == null) {
          playerRelative_ = null;
        } else {
          playerRelativeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (unitDensityAaBuilder_ == null) {
          unitDensityAa_ = null;
        } else {
          unitDensityAaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (unitDensityBuilder_ == null) {
          unitDensity_ = null;
        } else {
          unitDensityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_FeatureLayers_descriptor;
      }

      public SC2APIProtocol.Spatial.FeatureLayers getDefaultInstanceForType() {
        return SC2APIProtocol.Spatial.FeatureLayers.getDefaultInstance();
      }

      public SC2APIProtocol.Spatial.FeatureLayers build() {
        SC2APIProtocol.Spatial.FeatureLayers result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Spatial.FeatureLayers buildPartial() {
        SC2APIProtocol.Spatial.FeatureLayers result = new SC2APIProtocol.Spatial.FeatureLayers(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (heightMapBuilder_ == null) {
          result.heightMap_ = heightMap_;
        } else {
          result.heightMap_ = heightMapBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (visibilityMapBuilder_ == null) {
          result.visibilityMap_ = visibilityMap_;
        } else {
          result.visibilityMap_ = visibilityMapBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (creepBuilder_ == null) {
          result.creep_ = creep_;
        } else {
          result.creep_ = creepBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (powerBuilder_ == null) {
          result.power_ = power_;
        } else {
          result.power_ = powerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (playerIdBuilder_ == null) {
          result.playerId_ = playerId_;
        } else {
          result.playerId_ = playerIdBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (unitTypeBuilder_ == null) {
          result.unitType_ = unitType_;
        } else {
          result.unitType_ = unitTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (selectedBuilder_ == null) {
          result.selected_ = selected_;
        } else {
          result.selected_ = selectedBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (unitHitPointsBuilder_ == null) {
          result.unitHitPoints_ = unitHitPoints_;
        } else {
          result.unitHitPoints_ = unitHitPointsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (unitHitPointsRatioBuilder_ == null) {
          result.unitHitPointsRatio_ = unitHitPointsRatio_;
        } else {
          result.unitHitPointsRatio_ = unitHitPointsRatioBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (unitEnergyBuilder_ == null) {
          result.unitEnergy_ = unitEnergy_;
        } else {
          result.unitEnergy_ = unitEnergyBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (unitShieldsBuilder_ == null) {
          result.unitShields_ = unitShields_;
        } else {
          result.unitShields_ = unitShieldsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (playerRelativeBuilder_ == null) {
          result.playerRelative_ = playerRelative_;
        } else {
          result.playerRelative_ = playerRelativeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (unitDensityAaBuilder_ == null) {
          result.unitDensityAa_ = unitDensityAa_;
        } else {
          result.unitDensityAa_ = unitDensityAaBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (unitDensityBuilder_ == null) {
          result.unitDensity_ = unitDensity_;
        } else {
          result.unitDensity_ = unitDensityBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Spatial.FeatureLayers) {
          return mergeFrom((SC2APIProtocol.Spatial.FeatureLayers)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Spatial.FeatureLayers other) {
        if (other == SC2APIProtocol.Spatial.FeatureLayers.getDefaultInstance()) return this;
        if (other.hasHeightMap()) {
          mergeHeightMap(other.getHeightMap());
        }
        if (other.hasVisibilityMap()) {
          mergeVisibilityMap(other.getVisibilityMap());
        }
        if (other.hasCreep()) {
          mergeCreep(other.getCreep());
        }
        if (other.hasPower()) {
          mergePower(other.getPower());
        }
        if (other.hasPlayerId()) {
          mergePlayerId(other.getPlayerId());
        }
        if (other.hasUnitType()) {
          mergeUnitType(other.getUnitType());
        }
        if (other.hasSelected()) {
          mergeSelected(other.getSelected());
        }
        if (other.hasUnitHitPoints()) {
          mergeUnitHitPoints(other.getUnitHitPoints());
        }
        if (other.hasUnitHitPointsRatio()) {
          mergeUnitHitPointsRatio(other.getUnitHitPointsRatio());
        }
        if (other.hasUnitEnergy()) {
          mergeUnitEnergy(other.getUnitEnergy());
        }
        if (other.hasUnitShields()) {
          mergeUnitShields(other.getUnitShields());
        }
        if (other.hasPlayerRelative()) {
          mergePlayerRelative(other.getPlayerRelative());
        }
        if (other.hasUnitDensityAa()) {
          mergeUnitDensityAa(other.getUnitDensityAa());
        }
        if (other.hasUnitDensity()) {
          mergeUnitDensity(other.getUnitDensity());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Spatial.FeatureLayers parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Spatial.FeatureLayers) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Common.ImageData heightMap_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> heightMapBuilder_;
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public boolean hasHeightMap() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public SC2APIProtocol.Common.ImageData getHeightMap() {
        if (heightMapBuilder_ == null) {
          return heightMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : heightMap_;
        } else {
          return heightMapBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public Builder setHeightMap(SC2APIProtocol.Common.ImageData value) {
        if (heightMapBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          heightMap_ = value;
          onChanged();
        } else {
          heightMapBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public Builder setHeightMap(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (heightMapBuilder_ == null) {
          heightMap_ = builderForValue.build();
          onChanged();
        } else {
          heightMapBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public Builder mergeHeightMap(SC2APIProtocol.Common.ImageData value) {
        if (heightMapBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              heightMap_ != null &&
              heightMap_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            heightMap_ =
              SC2APIProtocol.Common.ImageData.newBuilder(heightMap_).mergeFrom(value).buildPartial();
          } else {
            heightMap_ = value;
          }
          onChanged();
        } else {
          heightMapBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public Builder clearHeightMap() {
        if (heightMapBuilder_ == null) {
          heightMap_ = null;
          onChanged();
        } else {
          heightMapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getHeightMapBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeightMapFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getHeightMapOrBuilder() {
        if (heightMapBuilder_ != null) {
          return heightMapBuilder_.getMessageOrBuilder();
        } else {
          return heightMap_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : heightMap_;
        }
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getHeightMapFieldBuilder() {
        if (heightMapBuilder_ == null) {
          heightMapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getHeightMap(),
                  getParentForChildren(),
                  isClean());
          heightMap_ = null;
        }
        return heightMapBuilder_;
      }

      private SC2APIProtocol.Common.ImageData visibilityMap_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> visibilityMapBuilder_;
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public boolean hasVisibilityMap() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public SC2APIProtocol.Common.ImageData getVisibilityMap() {
        if (visibilityMapBuilder_ == null) {
          return visibilityMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibilityMap_;
        } else {
          return visibilityMapBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public Builder setVisibilityMap(SC2APIProtocol.Common.ImageData value) {
        if (visibilityMapBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          visibilityMap_ = value;
          onChanged();
        } else {
          visibilityMapBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public Builder setVisibilityMap(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (visibilityMapBuilder_ == null) {
          visibilityMap_ = builderForValue.build();
          onChanged();
        } else {
          visibilityMapBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public Builder mergeVisibilityMap(SC2APIProtocol.Common.ImageData value) {
        if (visibilityMapBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              visibilityMap_ != null &&
              visibilityMap_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            visibilityMap_ =
              SC2APIProtocol.Common.ImageData.newBuilder(visibilityMap_).mergeFrom(value).buildPartial();
          } else {
            visibilityMap_ = value;
          }
          onChanged();
        } else {
          visibilityMapBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public Builder clearVisibilityMap() {
        if (visibilityMapBuilder_ == null) {
          visibilityMap_ = null;
          onChanged();
        } else {
          visibilityMapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getVisibilityMapBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getVisibilityMapFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getVisibilityMapOrBuilder() {
        if (visibilityMapBuilder_ != null) {
          return visibilityMapBuilder_.getMessageOrBuilder();
        } else {
          return visibilityMap_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibilityMap_;
        }
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getVisibilityMapFieldBuilder() {
        if (visibilityMapBuilder_ == null) {
          visibilityMapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getVisibilityMap(),
                  getParentForChildren(),
                  isClean());
          visibilityMap_ = null;
        }
        return visibilityMapBuilder_;
      }

      private SC2APIProtocol.Common.ImageData creep_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> creepBuilder_;
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public boolean hasCreep() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public SC2APIProtocol.Common.ImageData getCreep() {
        if (creepBuilder_ == null) {
          return creep_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
        } else {
          return creepBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public Builder setCreep(SC2APIProtocol.Common.ImageData value) {
        if (creepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          creep_ = value;
          onChanged();
        } else {
          creepBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public Builder setCreep(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (creepBuilder_ == null) {
          creep_ = builderForValue.build();
          onChanged();
        } else {
          creepBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public Builder mergeCreep(SC2APIProtocol.Common.ImageData value) {
        if (creepBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              creep_ != null &&
              creep_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            creep_ =
              SC2APIProtocol.Common.ImageData.newBuilder(creep_).mergeFrom(value).buildPartial();
          } else {
            creep_ = value;
          }
          onChanged();
        } else {
          creepBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public Builder clearCreep() {
        if (creepBuilder_ == null) {
          creep_ = null;
          onChanged();
        } else {
          creepBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getCreepBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getCreepFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getCreepOrBuilder() {
        if (creepBuilder_ != null) {
          return creepBuilder_.getMessageOrBuilder();
        } else {
          return creep_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
        }
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getCreepFieldBuilder() {
        if (creepBuilder_ == null) {
          creepBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getCreep(),
                  getParentForChildren(),
                  isClean());
          creep_ = null;
        }
        return creepBuilder_;
      }

      private SC2APIProtocol.Common.ImageData power_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> powerBuilder_;
      /**
       * <pre>
       * 1-bit. Protoss power.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
       */
      public boolean hasPower() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * 1-bit. Protoss power.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
       */
      public SC2APIProtocol.Common.ImageData getPower() {
        if (powerBuilder_ == null) {
          return power_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : power_;
        } else {
          return powerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1-bit. Protoss power.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
       */
      public Builder setPower(SC2APIProtocol.Common.ImageData value) {
        if (powerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          power_ = value;
          onChanged();
        } else {
          powerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Protoss power.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
       */
      public Builder setPower(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (powerBuilder_ == null) {
          power_ = builderForValue.build();
          onChanged();
        } else {
          powerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Protoss power.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
       */
      public Builder mergePower(SC2APIProtocol.Common.ImageData value) {
        if (powerBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              power_ != null &&
              power_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            power_ =
              SC2APIProtocol.Common.ImageData.newBuilder(power_).mergeFrom(value).buildPartial();
          } else {
            power_ = value;
          }
          onChanged();
        } else {
          powerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Protoss power.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
       */
      public Builder clearPower() {
        if (powerBuilder_ == null) {
          power_ = null;
          onChanged();
        } else {
          powerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       * 1-bit. Protoss power.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getPowerBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getPowerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1-bit. Protoss power.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getPowerOrBuilder() {
        if (powerBuilder_ != null) {
          return powerBuilder_.getMessageOrBuilder();
        } else {
          return power_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : power_;
        }
      }
      /**
       * <pre>
       * 1-bit. Protoss power.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData power = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getPowerFieldBuilder() {
        if (powerBuilder_ == null) {
          powerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getPower(),
                  getParentForChildren(),
                  isClean());
          power_ = null;
        }
        return powerBuilder_;
      }

      private SC2APIProtocol.Common.ImageData playerId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> playerIdBuilder_;
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public SC2APIProtocol.Common.ImageData getPlayerId() {
        if (playerIdBuilder_ == null) {
          return playerId_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerId_;
        } else {
          return playerIdBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public Builder setPlayerId(SC2APIProtocol.Common.ImageData value) {
        if (playerIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          playerId_ = value;
          onChanged();
        } else {
          playerIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public Builder setPlayerId(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (playerIdBuilder_ == null) {
          playerId_ = builderForValue.build();
          onChanged();
        } else {
          playerIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public Builder mergePlayerId(SC2APIProtocol.Common.ImageData value) {
        if (playerIdBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              playerId_ != null &&
              playerId_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            playerId_ =
              SC2APIProtocol.Common.ImageData.newBuilder(playerId_).mergeFrom(value).buildPartial();
          } else {
            playerId_ = value;
          }
          onChanged();
        } else {
          playerIdBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public Builder clearPlayerId() {
        if (playerIdBuilder_ == null) {
          playerId_ = null;
          onChanged();
        } else {
          playerIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getPlayerIdBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getPlayerIdFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getPlayerIdOrBuilder() {
        if (playerIdBuilder_ != null) {
          return playerIdBuilder_.getMessageOrBuilder();
        } else {
          return playerId_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerId_;
        }
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getPlayerIdFieldBuilder() {
        if (playerIdBuilder_ == null) {
          playerIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getPlayerId(),
                  getParentForChildren(),
                  isClean());
          playerId_ = null;
        }
        return playerIdBuilder_;
      }

      private SC2APIProtocol.Common.ImageData unitType_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> unitTypeBuilder_;
      /**
       * <pre>
       * int32. Unique identifier for type of unit.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
       */
      public boolean hasUnitType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * int32. Unique identifier for type of unit.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
       */
      public SC2APIProtocol.Common.ImageData getUnitType() {
        if (unitTypeBuilder_ == null) {
          return unitType_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitType_;
        } else {
          return unitTypeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * int32. Unique identifier for type of unit.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
       */
      public Builder setUnitType(SC2APIProtocol.Common.ImageData value) {
        if (unitTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          unitType_ = value;
          onChanged();
        } else {
          unitTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * int32. Unique identifier for type of unit.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
       */
      public Builder setUnitType(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (unitTypeBuilder_ == null) {
          unitType_ = builderForValue.build();
          onChanged();
        } else {
          unitTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * int32. Unique identifier for type of unit.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
       */
      public Builder mergeUnitType(SC2APIProtocol.Common.ImageData value) {
        if (unitTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              unitType_ != null &&
              unitType_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            unitType_ =
              SC2APIProtocol.Common.ImageData.newBuilder(unitType_).mergeFrom(value).buildPartial();
          } else {
            unitType_ = value;
          }
          onChanged();
        } else {
          unitTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * int32. Unique identifier for type of unit.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
       */
      public Builder clearUnitType() {
        if (unitTypeBuilder_ == null) {
          unitType_ = null;
          onChanged();
        } else {
          unitTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <pre>
       * int32. Unique identifier for type of unit.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getUnitTypeBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getUnitTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * int32. Unique identifier for type of unit.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getUnitTypeOrBuilder() {
        if (unitTypeBuilder_ != null) {
          return unitTypeBuilder_.getMessageOrBuilder();
        } else {
          return unitType_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitType_;
        }
      }
      /**
       * <pre>
       * int32. Unique identifier for type of unit.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getUnitTypeFieldBuilder() {
        if (unitTypeBuilder_ == null) {
          unitTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getUnitType(),
                  getParentForChildren(),
                  isClean());
          unitType_ = null;
        }
        return unitTypeBuilder_;
      }

      private SC2APIProtocol.Common.ImageData selected_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> selectedBuilder_;
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public boolean hasSelected() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public SC2APIProtocol.Common.ImageData getSelected() {
        if (selectedBuilder_ == null) {
          return selected_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : selected_;
        } else {
          return selectedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public Builder setSelected(SC2APIProtocol.Common.ImageData value) {
        if (selectedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          selected_ = value;
          onChanged();
        } else {
          selectedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public Builder setSelected(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (selectedBuilder_ == null) {
          selected_ = builderForValue.build();
          onChanged();
        } else {
          selectedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public Builder mergeSelected(SC2APIProtocol.Common.ImageData value) {
        if (selectedBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              selected_ != null &&
              selected_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            selected_ =
              SC2APIProtocol.Common.ImageData.newBuilder(selected_).mergeFrom(value).buildPartial();
          } else {
            selected_ = value;
          }
          onChanged();
        } else {
          selectedBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public Builder clearSelected() {
        if (selectedBuilder_ == null) {
          selected_ = null;
          onChanged();
        } else {
          selectedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getSelectedBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getSelectedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getSelectedOrBuilder() {
        if (selectedBuilder_ != null) {
          return selectedBuilder_.getMessageOrBuilder();
        } else {
          return selected_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : selected_;
        }
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getSelectedFieldBuilder() {
        if (selectedBuilder_ == null) {
          selectedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getSelected(),
                  getParentForChildren(),
                  isClean());
          selected_ = null;
        }
        return selectedBuilder_;
      }

      private SC2APIProtocol.Common.ImageData unitHitPoints_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> unitHitPointsBuilder_;
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
       */
      public boolean hasUnitHitPoints() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
       */
      public SC2APIProtocol.Common.ImageData getUnitHitPoints() {
        if (unitHitPointsBuilder_ == null) {
          return unitHitPoints_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitHitPoints_;
        } else {
          return unitHitPointsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
       */
      public Builder setUnitHitPoints(SC2APIProtocol.Common.ImageData value) {
        if (unitHitPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          unitHitPoints_ = value;
          onChanged();
        } else {
          unitHitPointsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
       */
      public Builder setUnitHitPoints(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (unitHitPointsBuilder_ == null) {
          unitHitPoints_ = builderForValue.build();
          onChanged();
        } else {
          unitHitPointsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
       */
      public Builder mergeUnitHitPoints(SC2APIProtocol.Common.ImageData value) {
        if (unitHitPointsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              unitHitPoints_ != null &&
              unitHitPoints_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            unitHitPoints_ =
              SC2APIProtocol.Common.ImageData.newBuilder(unitHitPoints_).mergeFrom(value).buildPartial();
          } else {
            unitHitPoints_ = value;
          }
          onChanged();
        } else {
          unitHitPointsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
       */
      public Builder clearUnitHitPoints() {
        if (unitHitPointsBuilder_ == null) {
          unitHitPoints_ = null;
          onChanged();
        } else {
          unitHitPointsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getUnitHitPointsBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getUnitHitPointsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getUnitHitPointsOrBuilder() {
        if (unitHitPointsBuilder_ != null) {
          return unitHitPointsBuilder_.getMessageOrBuilder();
        } else {
          return unitHitPoints_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitHitPoints_;
        }
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getUnitHitPointsFieldBuilder() {
        if (unitHitPointsBuilder_ == null) {
          unitHitPointsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getUnitHitPoints(),
                  getParentForChildren(),
                  isClean());
          unitHitPoints_ = null;
        }
        return unitHitPointsBuilder_;
      }

      private SC2APIProtocol.Common.ImageData unitHitPointsRatio_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> unitHitPointsRatioBuilder_;
      /**
       * <pre>
       * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
       */
      public boolean hasUnitHitPointsRatio() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
       */
      public SC2APIProtocol.Common.ImageData getUnitHitPointsRatio() {
        if (unitHitPointsRatioBuilder_ == null) {
          return unitHitPointsRatio_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitHitPointsRatio_;
        } else {
          return unitHitPointsRatioBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
       */
      public Builder setUnitHitPointsRatio(SC2APIProtocol.Common.ImageData value) {
        if (unitHitPointsRatioBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          unitHitPointsRatio_ = value;
          onChanged();
        } else {
          unitHitPointsRatioBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
       */
      public Builder setUnitHitPointsRatio(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (unitHitPointsRatioBuilder_ == null) {
          unitHitPointsRatio_ = builderForValue.build();
          onChanged();
        } else {
          unitHitPointsRatioBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
       */
      public Builder mergeUnitHitPointsRatio(SC2APIProtocol.Common.ImageData value) {
        if (unitHitPointsRatioBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              unitHitPointsRatio_ != null &&
              unitHitPointsRatio_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            unitHitPointsRatio_ =
              SC2APIProtocol.Common.ImageData.newBuilder(unitHitPointsRatio_).mergeFrom(value).buildPartial();
          } else {
            unitHitPointsRatio_ = value;
          }
          onChanged();
        } else {
          unitHitPointsRatioBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
       */
      public Builder clearUnitHitPointsRatio() {
        if (unitHitPointsRatioBuilder_ == null) {
          unitHitPointsRatio_ = null;
          onChanged();
        } else {
          unitHitPointsRatioBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <pre>
       * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getUnitHitPointsRatioBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getUnitHitPointsRatioFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getUnitHitPointsRatioOrBuilder() {
        if (unitHitPointsRatioBuilder_ != null) {
          return unitHitPointsRatioBuilder_.getMessageOrBuilder();
        } else {
          return unitHitPointsRatio_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitHitPointsRatio_;
        }
      }
      /**
       * <pre>
       * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getUnitHitPointsRatioFieldBuilder() {
        if (unitHitPointsRatioBuilder_ == null) {
          unitHitPointsRatioBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getUnitHitPointsRatio(),
                  getParentForChildren(),
                  isClean());
          unitHitPointsRatio_ = null;
        }
        return unitHitPointsRatioBuilder_;
      }

      private SC2APIProtocol.Common.ImageData unitEnergy_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> unitEnergyBuilder_;
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
       */
      public boolean hasUnitEnergy() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
       */
      public SC2APIProtocol.Common.ImageData getUnitEnergy() {
        if (unitEnergyBuilder_ == null) {
          return unitEnergy_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitEnergy_;
        } else {
          return unitEnergyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
       */
      public Builder setUnitEnergy(SC2APIProtocol.Common.ImageData value) {
        if (unitEnergyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          unitEnergy_ = value;
          onChanged();
        } else {
          unitEnergyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
       */
      public Builder setUnitEnergy(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (unitEnergyBuilder_ == null) {
          unitEnergy_ = builderForValue.build();
          onChanged();
        } else {
          unitEnergyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
       */
      public Builder mergeUnitEnergy(SC2APIProtocol.Common.ImageData value) {
        if (unitEnergyBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              unitEnergy_ != null &&
              unitEnergy_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            unitEnergy_ =
              SC2APIProtocol.Common.ImageData.newBuilder(unitEnergy_).mergeFrom(value).buildPartial();
          } else {
            unitEnergy_ = value;
          }
          onChanged();
        } else {
          unitEnergyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
       */
      public Builder clearUnitEnergy() {
        if (unitEnergyBuilder_ == null) {
          unitEnergy_ = null;
          onChanged();
        } else {
          unitEnergyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getUnitEnergyBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getUnitEnergyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getUnitEnergyOrBuilder() {
        if (unitEnergyBuilder_ != null) {
          return unitEnergyBuilder_.getMessageOrBuilder();
        } else {
          return unitEnergy_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitEnergy_;
        }
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_energy = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getUnitEnergyFieldBuilder() {
        if (unitEnergyBuilder_ == null) {
          unitEnergyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getUnitEnergy(),
                  getParentForChildren(),
                  isClean());
          unitEnergy_ = null;
        }
        return unitEnergyBuilder_;
      }

      private SC2APIProtocol.Common.ImageData unitShields_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> unitShieldsBuilder_;
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
       */
      public boolean hasUnitShields() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
       */
      public SC2APIProtocol.Common.ImageData getUnitShields() {
        if (unitShieldsBuilder_ == null) {
          return unitShields_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitShields_;
        } else {
          return unitShieldsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
       */
      public Builder setUnitShields(SC2APIProtocol.Common.ImageData value) {
        if (unitShieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          unitShields_ = value;
          onChanged();
        } else {
          unitShieldsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
       */
      public Builder setUnitShields(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (unitShieldsBuilder_ == null) {
          unitShields_ = builderForValue.build();
          onChanged();
        } else {
          unitShieldsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
       */
      public Builder mergeUnitShields(SC2APIProtocol.Common.ImageData value) {
        if (unitShieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              unitShields_ != null &&
              unitShields_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            unitShields_ =
              SC2APIProtocol.Common.ImageData.newBuilder(unitShields_).mergeFrom(value).buildPartial();
          } else {
            unitShields_ = value;
          }
          onChanged();
        } else {
          unitShieldsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
       */
      public Builder clearUnitShields() {
        if (unitShieldsBuilder_ == null) {
          unitShields_ = null;
          onChanged();
        } else {
          unitShieldsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getUnitShieldsBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getUnitShieldsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getUnitShieldsOrBuilder() {
        if (unitShieldsBuilder_ != null) {
          return unitShieldsBuilder_.getMessageOrBuilder();
        } else {
          return unitShields_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitShields_;
        }
      }
      /**
       * <pre>
       * int32.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_shields = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getUnitShieldsFieldBuilder() {
        if (unitShieldsBuilder_ == null) {
          unitShieldsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getUnitShields(),
                  getParentForChildren(),
                  isClean());
          unitShields_ = null;
        }
        return unitShieldsBuilder_;
      }

      private SC2APIProtocol.Common.ImageData playerRelative_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> playerRelativeBuilder_;
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
       */
      public boolean hasPlayerRelative() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
       */
      public SC2APIProtocol.Common.ImageData getPlayerRelative() {
        if (playerRelativeBuilder_ == null) {
          return playerRelative_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerRelative_;
        } else {
          return playerRelativeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
       */
      public Builder setPlayerRelative(SC2APIProtocol.Common.ImageData value) {
        if (playerRelativeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          playerRelative_ = value;
          onChanged();
        } else {
          playerRelativeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
       */
      public Builder setPlayerRelative(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (playerRelativeBuilder_ == null) {
          playerRelative_ = builderForValue.build();
          onChanged();
        } else {
          playerRelativeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
       */
      public Builder mergePlayerRelative(SC2APIProtocol.Common.ImageData value) {
        if (playerRelativeBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              playerRelative_ != null &&
              playerRelative_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            playerRelative_ =
              SC2APIProtocol.Common.ImageData.newBuilder(playerRelative_).mergeFrom(value).buildPartial();
          } else {
            playerRelative_ = value;
          }
          onChanged();
        } else {
          playerRelativeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
       */
      public Builder clearPlayerRelative() {
        if (playerRelativeBuilder_ == null) {
          playerRelative_ = null;
          onChanged();
        } else {
          playerRelativeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getPlayerRelativeBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getPlayerRelativeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getPlayerRelativeOrBuilder() {
        if (playerRelativeBuilder_ != null) {
          return playerRelativeBuilder_.getMessageOrBuilder();
        } else {
          return playerRelative_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerRelative_;
        }
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getPlayerRelativeFieldBuilder() {
        if (playerRelativeBuilder_ == null) {
          playerRelativeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getPlayerRelative(),
                  getParentForChildren(),
                  isClean());
          playerRelative_ = null;
        }
        return playerRelativeBuilder_;
      }

      private SC2APIProtocol.Common.ImageData unitDensityAa_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> unitDensityAaBuilder_;
      /**
       * <pre>
       * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
       */
      public boolean hasUnitDensityAa() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
       */
      public SC2APIProtocol.Common.ImageData getUnitDensityAa() {
        if (unitDensityAaBuilder_ == null) {
          return unitDensityAa_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitDensityAa_;
        } else {
          return unitDensityAaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
       */
      public Builder setUnitDensityAa(SC2APIProtocol.Common.ImageData value) {
        if (unitDensityAaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          unitDensityAa_ = value;
          onChanged();
        } else {
          unitDensityAaBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
       */
      public Builder setUnitDensityAa(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (unitDensityAaBuilder_ == null) {
          unitDensityAa_ = builderForValue.build();
          onChanged();
        } else {
          unitDensityAaBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
       */
      public Builder mergeUnitDensityAa(SC2APIProtocol.Common.ImageData value) {
        if (unitDensityAaBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              unitDensityAa_ != null &&
              unitDensityAa_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            unitDensityAa_ =
              SC2APIProtocol.Common.ImageData.newBuilder(unitDensityAa_).mergeFrom(value).buildPartial();
          } else {
            unitDensityAa_ = value;
          }
          onChanged();
        } else {
          unitDensityAaBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
       */
      public Builder clearUnitDensityAa() {
        if (unitDensityAaBuilder_ == null) {
          unitDensityAa_ = null;
          onChanged();
        } else {
          unitDensityAaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <pre>
       * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getUnitDensityAaBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getUnitDensityAaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getUnitDensityAaOrBuilder() {
        if (unitDensityAaBuilder_ != null) {
          return unitDensityAaBuilder_.getMessageOrBuilder();
        } else {
          return unitDensityAa_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitDensityAa_;
        }
      }
      /**
       * <pre>
       * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density_aa = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getUnitDensityAaFieldBuilder() {
        if (unitDensityAaBuilder_ == null) {
          unitDensityAaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getUnitDensityAa(),
                  getParentForChildren(),
                  isClean());
          unitDensityAa_ = null;
        }
        return unitDensityAaBuilder_;
      }

      private SC2APIProtocol.Common.ImageData unitDensity_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> unitDensityBuilder_;
      /**
       * <pre>
       * uint8. Count of units overlapping a pixel.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
       */
      public boolean hasUnitDensity() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       * uint8. Count of units overlapping a pixel.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
       */
      public SC2APIProtocol.Common.ImageData getUnitDensity() {
        if (unitDensityBuilder_ == null) {
          return unitDensity_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitDensity_;
        } else {
          return unitDensityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. Count of units overlapping a pixel.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
       */
      public Builder setUnitDensity(SC2APIProtocol.Common.ImageData value) {
        if (unitDensityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          unitDensity_ = value;
          onChanged();
        } else {
          unitDensityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * uint8. Count of units overlapping a pixel.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
       */
      public Builder setUnitDensity(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (unitDensityBuilder_ == null) {
          unitDensity_ = builderForValue.build();
          onChanged();
        } else {
          unitDensityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * uint8. Count of units overlapping a pixel.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
       */
      public Builder mergeUnitDensity(SC2APIProtocol.Common.ImageData value) {
        if (unitDensityBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              unitDensity_ != null &&
              unitDensity_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            unitDensity_ =
              SC2APIProtocol.Common.ImageData.newBuilder(unitDensity_).mergeFrom(value).buildPartial();
          } else {
            unitDensity_ = value;
          }
          onChanged();
        } else {
          unitDensityBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * uint8. Count of units overlapping a pixel.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
       */
      public Builder clearUnitDensity() {
        if (unitDensityBuilder_ == null) {
          unitDensity_ = null;
          onChanged();
        } else {
          unitDensityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <pre>
       * uint8. Count of units overlapping a pixel.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getUnitDensityBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getUnitDensityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. Count of units overlapping a pixel.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getUnitDensityOrBuilder() {
        if (unitDensityBuilder_ != null) {
          return unitDensityBuilder_.getMessageOrBuilder();
        } else {
          return unitDensity_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitDensity_;
        }
      }
      /**
       * <pre>
       * uint8. Count of units overlapping a pixel.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_density = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getUnitDensityFieldBuilder() {
        if (unitDensityBuilder_ == null) {
          unitDensityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getUnitDensity(),
                  getParentForChildren(),
                  isClean());
          unitDensity_ = null;
        }
        return unitDensityBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.FeatureLayers)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.FeatureLayers)
    private static final SC2APIProtocol.Spatial.FeatureLayers DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Spatial.FeatureLayers();
    }

    public static SC2APIProtocol.Spatial.FeatureLayers getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<FeatureLayers>
        PARSER = new com.google.protobuf.AbstractParser<FeatureLayers>() {
      public FeatureLayers parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FeatureLayers(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FeatureLayers> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FeatureLayers> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Spatial.FeatureLayers getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FeatureLayersMinimapOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.FeatureLayersMinimap)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    boolean hasHeightMap();
    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    SC2APIProtocol.Common.ImageData getHeightMap();
    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getHeightMapOrBuilder();

    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    boolean hasVisibilityMap();
    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    SC2APIProtocol.Common.ImageData getVisibilityMap();
    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getVisibilityMapOrBuilder();

    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    boolean hasCreep();
    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    SC2APIProtocol.Common.ImageData getCreep();
    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getCreepOrBuilder();

    /**
     * <pre>
     * 1-bit. Area covered by the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
     */
    boolean hasCamera();
    /**
     * <pre>
     * 1-bit. Area covered by the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
     */
    SC2APIProtocol.Common.ImageData getCamera();
    /**
     * <pre>
     * 1-bit. Area covered by the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getCameraOrBuilder();

    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    boolean hasPlayerId();
    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    SC2APIProtocol.Common.ImageData getPlayerId();
    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getPlayerIdOrBuilder();

    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
     */
    boolean hasPlayerRelative();
    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
     */
    SC2APIProtocol.Common.ImageData getPlayerRelative();
    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getPlayerRelativeOrBuilder();

    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    boolean hasSelected();
    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    SC2APIProtocol.Common.ImageData getSelected();
    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getSelectedOrBuilder();

    /**
     * <pre>
     * Cheat layers. Only populated in replays.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
     */
    boolean hasUnitType();
    /**
     * <pre>
     * Cheat layers. Only populated in replays.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
     */
    SC2APIProtocol.Common.ImageData getUnitType();
    /**
     * <pre>
     * Cheat layers. Only populated in replays.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getUnitTypeOrBuilder();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.FeatureLayersMinimap}
   */
  public  static final class FeatureLayersMinimap extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.FeatureLayersMinimap)
      FeatureLayersMinimapOrBuilder {
    // Use FeatureLayersMinimap.newBuilder() to construct.
    private FeatureLayersMinimap(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FeatureLayersMinimap() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FeatureLayersMinimap(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = heightMap_.toBuilder();
              }
              heightMap_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(heightMap_);
                heightMap_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = visibilityMap_.toBuilder();
              }
              visibilityMap_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(visibilityMap_);
                visibilityMap_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = creep_.toBuilder();
              }
              creep_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(creep_);
                creep_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = camera_.toBuilder();
              }
              camera_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(camera_);
                camera_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = playerId_.toBuilder();
              }
              playerId_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(playerId_);
                playerId_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = playerRelative_.toBuilder();
              }
              playerRelative_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(playerRelative_);
                playerRelative_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = selected_.toBuilder();
              }
              selected_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(selected_);
                selected_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = unitType_.toBuilder();
              }
              unitType_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(unitType_);
                unitType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_FeatureLayersMinimap_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_FeatureLayersMinimap_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Spatial.FeatureLayersMinimap.class, SC2APIProtocol.Spatial.FeatureLayersMinimap.Builder.class);
    }

    private int bitField0_;
    public static final int HEIGHT_MAP_FIELD_NUMBER = 1;
    private SC2APIProtocol.Common.ImageData heightMap_;
    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    public boolean hasHeightMap() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    public SC2APIProtocol.Common.ImageData getHeightMap() {
      return heightMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : heightMap_;
    }
    /**
     * <pre>
     * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getHeightMapOrBuilder() {
      return heightMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : heightMap_;
    }

    public static final int VISIBILITY_MAP_FIELD_NUMBER = 2;
    private SC2APIProtocol.Common.ImageData visibilityMap_;
    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    public boolean hasVisibilityMap() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    public SC2APIProtocol.Common.ImageData getVisibilityMap() {
      return visibilityMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibilityMap_;
    }
    /**
     * <pre>
     * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getVisibilityMapOrBuilder() {
      return visibilityMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibilityMap_;
    }

    public static final int CREEP_FIELD_NUMBER = 3;
    private SC2APIProtocol.Common.ImageData creep_;
    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    public boolean hasCreep() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    public SC2APIProtocol.Common.ImageData getCreep() {
      return creep_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
    }
    /**
     * <pre>
     * 1-bit. Zerg creep.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getCreepOrBuilder() {
      return creep_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
    }

    public static final int CAMERA_FIELD_NUMBER = 4;
    private SC2APIProtocol.Common.ImageData camera_;
    /**
     * <pre>
     * 1-bit. Area covered by the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
     */
    public boolean hasCamera() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 1-bit. Area covered by the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
     */
    public SC2APIProtocol.Common.ImageData getCamera() {
      return camera_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : camera_;
    }
    /**
     * <pre>
     * 1-bit. Area covered by the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getCameraOrBuilder() {
      return camera_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : camera_;
    }

    public static final int PLAYER_ID_FIELD_NUMBER = 5;
    private SC2APIProtocol.Common.ImageData playerId_;
    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    public SC2APIProtocol.Common.ImageData getPlayerId() {
      return playerId_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerId_;
    }
    /**
     * <pre>
     * uint8. Participants: [1, 15] Neutral: 16
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getPlayerIdOrBuilder() {
      return playerId_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerId_;
    }

    public static final int PLAYER_RELATIVE_FIELD_NUMBER = 6;
    private SC2APIProtocol.Common.ImageData playerRelative_;
    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
     */
    public boolean hasPlayerRelative() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
     */
    public SC2APIProtocol.Common.ImageData getPlayerRelative() {
      return playerRelative_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerRelative_;
    }
    /**
     * <pre>
     * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getPlayerRelativeOrBuilder() {
      return playerRelative_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerRelative_;
    }

    public static final int SELECTED_FIELD_NUMBER = 7;
    private SC2APIProtocol.Common.ImageData selected_;
    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    public boolean hasSelected() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    public SC2APIProtocol.Common.ImageData getSelected() {
      return selected_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : selected_;
    }
    /**
     * <pre>
     * 1-bit. Selected units.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getSelectedOrBuilder() {
      return selected_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : selected_;
    }

    public static final int UNIT_TYPE_FIELD_NUMBER = 8;
    private SC2APIProtocol.Common.ImageData unitType_;
    /**
     * <pre>
     * Cheat layers. Only populated in replays.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
     */
    public boolean hasUnitType() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * Cheat layers. Only populated in replays.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
     */
    public SC2APIProtocol.Common.ImageData getUnitType() {
      return unitType_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitType_;
    }
    /**
     * <pre>
     * Cheat layers. Only populated in replays.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getUnitTypeOrBuilder() {
      return unitType_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitType_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getHeightMap());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getVisibilityMap());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getCreep());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, getCamera());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getPlayerId());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, getPlayerRelative());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, getSelected());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, getUnitType());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeightMap());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getVisibilityMap());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getCreep());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCamera());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getPlayerId());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getPlayerRelative());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getSelected());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getUnitType());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Spatial.FeatureLayersMinimap)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Spatial.FeatureLayersMinimap other = (SC2APIProtocol.Spatial.FeatureLayersMinimap) obj;

      boolean result = true;
      result = result && (hasHeightMap() == other.hasHeightMap());
      if (hasHeightMap()) {
        result = result && getHeightMap()
            .equals(other.getHeightMap());
      }
      result = result && (hasVisibilityMap() == other.hasVisibilityMap());
      if (hasVisibilityMap()) {
        result = result && getVisibilityMap()
            .equals(other.getVisibilityMap());
      }
      result = result && (hasCreep() == other.hasCreep());
      if (hasCreep()) {
        result = result && getCreep()
            .equals(other.getCreep());
      }
      result = result && (hasCamera() == other.hasCamera());
      if (hasCamera()) {
        result = result && getCamera()
            .equals(other.getCamera());
      }
      result = result && (hasPlayerId() == other.hasPlayerId());
      if (hasPlayerId()) {
        result = result && getPlayerId()
            .equals(other.getPlayerId());
      }
      result = result && (hasPlayerRelative() == other.hasPlayerRelative());
      if (hasPlayerRelative()) {
        result = result && getPlayerRelative()
            .equals(other.getPlayerRelative());
      }
      result = result && (hasSelected() == other.hasSelected());
      if (hasSelected()) {
        result = result && getSelected()
            .equals(other.getSelected());
      }
      result = result && (hasUnitType() == other.hasUnitType());
      if (hasUnitType()) {
        result = result && getUnitType()
            .equals(other.getUnitType());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasHeightMap()) {
        hash = (37 * hash) + HEIGHT_MAP_FIELD_NUMBER;
        hash = (53 * hash) + getHeightMap().hashCode();
      }
      if (hasVisibilityMap()) {
        hash = (37 * hash) + VISIBILITY_MAP_FIELD_NUMBER;
        hash = (53 * hash) + getVisibilityMap().hashCode();
      }
      if (hasCreep()) {
        hash = (37 * hash) + CREEP_FIELD_NUMBER;
        hash = (53 * hash) + getCreep().hashCode();
      }
      if (hasCamera()) {
        hash = (37 * hash) + CAMERA_FIELD_NUMBER;
        hash = (53 * hash) + getCamera().hashCode();
      }
      if (hasPlayerId()) {
        hash = (37 * hash) + PLAYER_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPlayerId().hashCode();
      }
      if (hasPlayerRelative()) {
        hash = (37 * hash) + PLAYER_RELATIVE_FIELD_NUMBER;
        hash = (53 * hash) + getPlayerRelative().hashCode();
      }
      if (hasSelected()) {
        hash = (37 * hash) + SELECTED_FIELD_NUMBER;
        hash = (53 * hash) + getSelected().hashCode();
      }
      if (hasUnitType()) {
        hash = (37 * hash) + UNIT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getUnitType().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Spatial.FeatureLayersMinimap parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.FeatureLayersMinimap parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.FeatureLayersMinimap parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.FeatureLayersMinimap parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.FeatureLayersMinimap parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.FeatureLayersMinimap parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.FeatureLayersMinimap parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.FeatureLayersMinimap parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.FeatureLayersMinimap parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.FeatureLayersMinimap parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Spatial.FeatureLayersMinimap prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.FeatureLayersMinimap}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.FeatureLayersMinimap)
        SC2APIProtocol.Spatial.FeatureLayersMinimapOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_FeatureLayersMinimap_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_FeatureLayersMinimap_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Spatial.FeatureLayersMinimap.class, SC2APIProtocol.Spatial.FeatureLayersMinimap.Builder.class);
      }

      // Construct using SC2APIProtocol.Spatial.FeatureLayersMinimap.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getHeightMapFieldBuilder();
          getVisibilityMapFieldBuilder();
          getCreepFieldBuilder();
          getCameraFieldBuilder();
          getPlayerIdFieldBuilder();
          getPlayerRelativeFieldBuilder();
          getSelectedFieldBuilder();
          getUnitTypeFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (heightMapBuilder_ == null) {
          heightMap_ = null;
        } else {
          heightMapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (visibilityMapBuilder_ == null) {
          visibilityMap_ = null;
        } else {
          visibilityMapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (creepBuilder_ == null) {
          creep_ = null;
        } else {
          creepBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (cameraBuilder_ == null) {
          camera_ = null;
        } else {
          cameraBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (playerIdBuilder_ == null) {
          playerId_ = null;
        } else {
          playerIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (playerRelativeBuilder_ == null) {
          playerRelative_ = null;
        } else {
          playerRelativeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (selectedBuilder_ == null) {
          selected_ = null;
        } else {
          selectedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (unitTypeBuilder_ == null) {
          unitType_ = null;
        } else {
          unitTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_FeatureLayersMinimap_descriptor;
      }

      public SC2APIProtocol.Spatial.FeatureLayersMinimap getDefaultInstanceForType() {
        return SC2APIProtocol.Spatial.FeatureLayersMinimap.getDefaultInstance();
      }

      public SC2APIProtocol.Spatial.FeatureLayersMinimap build() {
        SC2APIProtocol.Spatial.FeatureLayersMinimap result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Spatial.FeatureLayersMinimap buildPartial() {
        SC2APIProtocol.Spatial.FeatureLayersMinimap result = new SC2APIProtocol.Spatial.FeatureLayersMinimap(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (heightMapBuilder_ == null) {
          result.heightMap_ = heightMap_;
        } else {
          result.heightMap_ = heightMapBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (visibilityMapBuilder_ == null) {
          result.visibilityMap_ = visibilityMap_;
        } else {
          result.visibilityMap_ = visibilityMapBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (creepBuilder_ == null) {
          result.creep_ = creep_;
        } else {
          result.creep_ = creepBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (cameraBuilder_ == null) {
          result.camera_ = camera_;
        } else {
          result.camera_ = cameraBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (playerIdBuilder_ == null) {
          result.playerId_ = playerId_;
        } else {
          result.playerId_ = playerIdBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (playerRelativeBuilder_ == null) {
          result.playerRelative_ = playerRelative_;
        } else {
          result.playerRelative_ = playerRelativeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (selectedBuilder_ == null) {
          result.selected_ = selected_;
        } else {
          result.selected_ = selectedBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (unitTypeBuilder_ == null) {
          result.unitType_ = unitType_;
        } else {
          result.unitType_ = unitTypeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Spatial.FeatureLayersMinimap) {
          return mergeFrom((SC2APIProtocol.Spatial.FeatureLayersMinimap)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Spatial.FeatureLayersMinimap other) {
        if (other == SC2APIProtocol.Spatial.FeatureLayersMinimap.getDefaultInstance()) return this;
        if (other.hasHeightMap()) {
          mergeHeightMap(other.getHeightMap());
        }
        if (other.hasVisibilityMap()) {
          mergeVisibilityMap(other.getVisibilityMap());
        }
        if (other.hasCreep()) {
          mergeCreep(other.getCreep());
        }
        if (other.hasCamera()) {
          mergeCamera(other.getCamera());
        }
        if (other.hasPlayerId()) {
          mergePlayerId(other.getPlayerId());
        }
        if (other.hasPlayerRelative()) {
          mergePlayerRelative(other.getPlayerRelative());
        }
        if (other.hasSelected()) {
          mergeSelected(other.getSelected());
        }
        if (other.hasUnitType()) {
          mergeUnitType(other.getUnitType());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Spatial.FeatureLayersMinimap parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Spatial.FeatureLayersMinimap) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Common.ImageData heightMap_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> heightMapBuilder_;
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public boolean hasHeightMap() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public SC2APIProtocol.Common.ImageData getHeightMap() {
        if (heightMapBuilder_ == null) {
          return heightMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : heightMap_;
        } else {
          return heightMapBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public Builder setHeightMap(SC2APIProtocol.Common.ImageData value) {
        if (heightMapBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          heightMap_ = value;
          onChanged();
        } else {
          heightMapBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public Builder setHeightMap(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (heightMapBuilder_ == null) {
          heightMap_ = builderForValue.build();
          onChanged();
        } else {
          heightMapBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public Builder mergeHeightMap(SC2APIProtocol.Common.ImageData value) {
        if (heightMapBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              heightMap_ != null &&
              heightMap_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            heightMap_ =
              SC2APIProtocol.Common.ImageData.newBuilder(heightMap_).mergeFrom(value).buildPartial();
          } else {
            heightMap_ = value;
          }
          onChanged();
        } else {
          heightMapBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public Builder clearHeightMap() {
        if (heightMapBuilder_ == null) {
          heightMap_ = null;
          onChanged();
        } else {
          heightMapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getHeightMapBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeightMapFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getHeightMapOrBuilder() {
        if (heightMapBuilder_ != null) {
          return heightMapBuilder_.getMessageOrBuilder();
        } else {
          return heightMap_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : heightMap_;
        }
      }
      /**
       * <pre>
       * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData height_map = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getHeightMapFieldBuilder() {
        if (heightMapBuilder_ == null) {
          heightMapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getHeightMap(),
                  getParentForChildren(),
                  isClean());
          heightMap_ = null;
        }
        return heightMapBuilder_;
      }

      private SC2APIProtocol.Common.ImageData visibilityMap_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> visibilityMapBuilder_;
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public boolean hasVisibilityMap() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public SC2APIProtocol.Common.ImageData getVisibilityMap() {
        if (visibilityMapBuilder_ == null) {
          return visibilityMap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibilityMap_;
        } else {
          return visibilityMapBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public Builder setVisibilityMap(SC2APIProtocol.Common.ImageData value) {
        if (visibilityMapBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          visibilityMap_ = value;
          onChanged();
        } else {
          visibilityMapBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public Builder setVisibilityMap(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (visibilityMapBuilder_ == null) {
          visibilityMap_ = builderForValue.build();
          onChanged();
        } else {
          visibilityMapBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public Builder mergeVisibilityMap(SC2APIProtocol.Common.ImageData value) {
        if (visibilityMapBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              visibilityMap_ != null &&
              visibilityMap_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            visibilityMap_ =
              SC2APIProtocol.Common.ImageData.newBuilder(visibilityMap_).mergeFrom(value).buildPartial();
          } else {
            visibilityMap_ = value;
          }
          onChanged();
        } else {
          visibilityMapBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public Builder clearVisibilityMap() {
        if (visibilityMapBuilder_ == null) {
          visibilityMap_ = null;
          onChanged();
        } else {
          visibilityMapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getVisibilityMapBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getVisibilityMapFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getVisibilityMapOrBuilder() {
        if (visibilityMapBuilder_ != null) {
          return visibilityMapBuilder_.getMessageOrBuilder();
        } else {
          return visibilityMap_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibilityMap_;
        }
      }
      /**
       * <pre>
       * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility_map = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getVisibilityMapFieldBuilder() {
        if (visibilityMapBuilder_ == null) {
          visibilityMapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getVisibilityMap(),
                  getParentForChildren(),
                  isClean());
          visibilityMap_ = null;
        }
        return visibilityMapBuilder_;
      }

      private SC2APIProtocol.Common.ImageData creep_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> creepBuilder_;
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public boolean hasCreep() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public SC2APIProtocol.Common.ImageData getCreep() {
        if (creepBuilder_ == null) {
          return creep_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
        } else {
          return creepBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public Builder setCreep(SC2APIProtocol.Common.ImageData value) {
        if (creepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          creep_ = value;
          onChanged();
        } else {
          creepBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public Builder setCreep(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (creepBuilder_ == null) {
          creep_ = builderForValue.build();
          onChanged();
        } else {
          creepBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public Builder mergeCreep(SC2APIProtocol.Common.ImageData value) {
        if (creepBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              creep_ != null &&
              creep_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            creep_ =
              SC2APIProtocol.Common.ImageData.newBuilder(creep_).mergeFrom(value).buildPartial();
          } else {
            creep_ = value;
          }
          onChanged();
        } else {
          creepBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public Builder clearCreep() {
        if (creepBuilder_ == null) {
          creep_ = null;
          onChanged();
        } else {
          creepBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getCreepBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getCreepFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getCreepOrBuilder() {
        if (creepBuilder_ != null) {
          return creepBuilder_.getMessageOrBuilder();
        } else {
          return creep_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
        }
      }
      /**
       * <pre>
       * 1-bit. Zerg creep.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getCreepFieldBuilder() {
        if (creepBuilder_ == null) {
          creepBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getCreep(),
                  getParentForChildren(),
                  isClean());
          creep_ = null;
        }
        return creepBuilder_;
      }

      private SC2APIProtocol.Common.ImageData camera_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> cameraBuilder_;
      /**
       * <pre>
       * 1-bit. Area covered by the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
       */
      public boolean hasCamera() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * 1-bit. Area covered by the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
       */
      public SC2APIProtocol.Common.ImageData getCamera() {
        if (cameraBuilder_ == null) {
          return camera_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : camera_;
        } else {
          return cameraBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1-bit. Area covered by the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
       */
      public Builder setCamera(SC2APIProtocol.Common.ImageData value) {
        if (cameraBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          camera_ = value;
          onChanged();
        } else {
          cameraBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Area covered by the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
       */
      public Builder setCamera(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (cameraBuilder_ == null) {
          camera_ = builderForValue.build();
          onChanged();
        } else {
          cameraBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Area covered by the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
       */
      public Builder mergeCamera(SC2APIProtocol.Common.ImageData value) {
        if (cameraBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              camera_ != null &&
              camera_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            camera_ =
              SC2APIProtocol.Common.ImageData.newBuilder(camera_).mergeFrom(value).buildPartial();
          } else {
            camera_ = value;
          }
          onChanged();
        } else {
          cameraBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Area covered by the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
       */
      public Builder clearCamera() {
        if (cameraBuilder_ == null) {
          camera_ = null;
          onChanged();
        } else {
          cameraBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       * 1-bit. Area covered by the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getCameraBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getCameraFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1-bit. Area covered by the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getCameraOrBuilder() {
        if (cameraBuilder_ != null) {
          return cameraBuilder_.getMessageOrBuilder();
        } else {
          return camera_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : camera_;
        }
      }
      /**
       * <pre>
       * 1-bit. Area covered by the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData camera = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getCameraFieldBuilder() {
        if (cameraBuilder_ == null) {
          cameraBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getCamera(),
                  getParentForChildren(),
                  isClean());
          camera_ = null;
        }
        return cameraBuilder_;
      }

      private SC2APIProtocol.Common.ImageData playerId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> playerIdBuilder_;
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public SC2APIProtocol.Common.ImageData getPlayerId() {
        if (playerIdBuilder_ == null) {
          return playerId_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerId_;
        } else {
          return playerIdBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public Builder setPlayerId(SC2APIProtocol.Common.ImageData value) {
        if (playerIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          playerId_ = value;
          onChanged();
        } else {
          playerIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public Builder setPlayerId(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (playerIdBuilder_ == null) {
          playerId_ = builderForValue.build();
          onChanged();
        } else {
          playerIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public Builder mergePlayerId(SC2APIProtocol.Common.ImageData value) {
        if (playerIdBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              playerId_ != null &&
              playerId_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            playerId_ =
              SC2APIProtocol.Common.ImageData.newBuilder(playerId_).mergeFrom(value).buildPartial();
          } else {
            playerId_ = value;
          }
          onChanged();
        } else {
          playerIdBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public Builder clearPlayerId() {
        if (playerIdBuilder_ == null) {
          playerId_ = null;
          onChanged();
        } else {
          playerIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getPlayerIdBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getPlayerIdFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getPlayerIdOrBuilder() {
        if (playerIdBuilder_ != null) {
          return playerIdBuilder_.getMessageOrBuilder();
        } else {
          return playerId_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerId_;
        }
      }
      /**
       * <pre>
       * uint8. Participants: [1, 15] Neutral: 16
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_id = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getPlayerIdFieldBuilder() {
        if (playerIdBuilder_ == null) {
          playerIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getPlayerId(),
                  getParentForChildren(),
                  isClean());
          playerId_ = null;
        }
        return playerIdBuilder_;
      }

      private SC2APIProtocol.Common.ImageData playerRelative_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> playerRelativeBuilder_;
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
       */
      public boolean hasPlayerRelative() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
       */
      public SC2APIProtocol.Common.ImageData getPlayerRelative() {
        if (playerRelativeBuilder_ == null) {
          return playerRelative_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerRelative_;
        } else {
          return playerRelativeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
       */
      public Builder setPlayerRelative(SC2APIProtocol.Common.ImageData value) {
        if (playerRelativeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          playerRelative_ = value;
          onChanged();
        } else {
          playerRelativeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
       */
      public Builder setPlayerRelative(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (playerRelativeBuilder_ == null) {
          playerRelative_ = builderForValue.build();
          onChanged();
        } else {
          playerRelativeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
       */
      public Builder mergePlayerRelative(SC2APIProtocol.Common.ImageData value) {
        if (playerRelativeBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              playerRelative_ != null &&
              playerRelative_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            playerRelative_ =
              SC2APIProtocol.Common.ImageData.newBuilder(playerRelative_).mergeFrom(value).buildPartial();
          } else {
            playerRelative_ = value;
          }
          onChanged();
        } else {
          playerRelativeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
       */
      public Builder clearPlayerRelative() {
        if (playerRelativeBuilder_ == null) {
          playerRelative_ = null;
          onChanged();
        } else {
          playerRelativeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getPlayerRelativeBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getPlayerRelativeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getPlayerRelativeOrBuilder() {
        if (playerRelativeBuilder_ != null) {
          return playerRelativeBuilder_.getMessageOrBuilder();
        } else {
          return playerRelative_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : playerRelative_;
        }
      }
      /**
       * <pre>
       * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData player_relative = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getPlayerRelativeFieldBuilder() {
        if (playerRelativeBuilder_ == null) {
          playerRelativeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getPlayerRelative(),
                  getParentForChildren(),
                  isClean());
          playerRelative_ = null;
        }
        return playerRelativeBuilder_;
      }

      private SC2APIProtocol.Common.ImageData selected_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> selectedBuilder_;
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public boolean hasSelected() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public SC2APIProtocol.Common.ImageData getSelected() {
        if (selectedBuilder_ == null) {
          return selected_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : selected_;
        } else {
          return selectedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public Builder setSelected(SC2APIProtocol.Common.ImageData value) {
        if (selectedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          selected_ = value;
          onChanged();
        } else {
          selectedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public Builder setSelected(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (selectedBuilder_ == null) {
          selected_ = builderForValue.build();
          onChanged();
        } else {
          selectedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public Builder mergeSelected(SC2APIProtocol.Common.ImageData value) {
        if (selectedBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              selected_ != null &&
              selected_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            selected_ =
              SC2APIProtocol.Common.ImageData.newBuilder(selected_).mergeFrom(value).buildPartial();
          } else {
            selected_ = value;
          }
          onChanged();
        } else {
          selectedBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public Builder clearSelected() {
        if (selectedBuilder_ == null) {
          selected_ = null;
          onChanged();
        } else {
          selectedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getSelectedBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getSelectedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getSelectedOrBuilder() {
        if (selectedBuilder_ != null) {
          return selectedBuilder_.getMessageOrBuilder();
        } else {
          return selected_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : selected_;
        }
      }
      /**
       * <pre>
       * 1-bit. Selected units.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData selected = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getSelectedFieldBuilder() {
        if (selectedBuilder_ == null) {
          selectedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getSelected(),
                  getParentForChildren(),
                  isClean());
          selected_ = null;
        }
        return selectedBuilder_;
      }

      private SC2APIProtocol.Common.ImageData unitType_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> unitTypeBuilder_;
      /**
       * <pre>
       * Cheat layers. Only populated in replays.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
       */
      public boolean hasUnitType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * Cheat layers. Only populated in replays.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
       */
      public SC2APIProtocol.Common.ImageData getUnitType() {
        if (unitTypeBuilder_ == null) {
          return unitType_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitType_;
        } else {
          return unitTypeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Cheat layers. Only populated in replays.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
       */
      public Builder setUnitType(SC2APIProtocol.Common.ImageData value) {
        if (unitTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          unitType_ = value;
          onChanged();
        } else {
          unitTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       * Cheat layers. Only populated in replays.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
       */
      public Builder setUnitType(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (unitTypeBuilder_ == null) {
          unitType_ = builderForValue.build();
          onChanged();
        } else {
          unitTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       * Cheat layers. Only populated in replays.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
       */
      public Builder mergeUnitType(SC2APIProtocol.Common.ImageData value) {
        if (unitTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              unitType_ != null &&
              unitType_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            unitType_ =
              SC2APIProtocol.Common.ImageData.newBuilder(unitType_).mergeFrom(value).buildPartial();
          } else {
            unitType_ = value;
          }
          onChanged();
        } else {
          unitTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       * Cheat layers. Only populated in replays.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
       */
      public Builder clearUnitType() {
        if (unitTypeBuilder_ == null) {
          unitType_ = null;
          onChanged();
        } else {
          unitTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <pre>
       * Cheat layers. Only populated in replays.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getUnitTypeBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getUnitTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Cheat layers. Only populated in replays.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getUnitTypeOrBuilder() {
        if (unitTypeBuilder_ != null) {
          return unitTypeBuilder_.getMessageOrBuilder();
        } else {
          return unitType_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : unitType_;
        }
      }
      /**
       * <pre>
       * Cheat layers. Only populated in replays.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData unit_type = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getUnitTypeFieldBuilder() {
        if (unitTypeBuilder_ == null) {
          unitTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getUnitType(),
                  getParentForChildren(),
                  isClean());
          unitType_ = null;
        }
        return unitTypeBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.FeatureLayersMinimap)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.FeatureLayersMinimap)
    private static final SC2APIProtocol.Spatial.FeatureLayersMinimap DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Spatial.FeatureLayersMinimap();
    }

    public static SC2APIProtocol.Spatial.FeatureLayersMinimap getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<FeatureLayersMinimap>
        PARSER = new com.google.protobuf.AbstractParser<FeatureLayersMinimap>() {
      public FeatureLayersMinimap parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FeatureLayersMinimap(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FeatureLayersMinimap> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FeatureLayersMinimap> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Spatial.FeatureLayersMinimap getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ObservationRenderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ObservationRender)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
     */
    boolean hasMap();
    /**
     * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
     */
    SC2APIProtocol.Common.ImageData getMap();
    /**
     * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getMapOrBuilder();

    /**
     * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
     */
    boolean hasMinimap();
    /**
     * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
     */
    SC2APIProtocol.Common.ImageData getMinimap();
    /**
     * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getMinimapOrBuilder();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ObservationRender}
   */
  public  static final class ObservationRender extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ObservationRender)
      ObservationRenderOrBuilder {
    // Use ObservationRender.newBuilder() to construct.
    private ObservationRender(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ObservationRender() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ObservationRender(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = map_.toBuilder();
              }
              map_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(map_);
                map_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = minimap_.toBuilder();
              }
              minimap_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minimap_);
                minimap_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ObservationRender_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ObservationRender_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Spatial.ObservationRender.class, SC2APIProtocol.Spatial.ObservationRender.Builder.class);
    }

    private int bitField0_;
    public static final int MAP_FIELD_NUMBER = 1;
    private SC2APIProtocol.Common.ImageData map_;
    /**
     * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
     */
    public boolean hasMap() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
     */
    public SC2APIProtocol.Common.ImageData getMap() {
      return map_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : map_;
    }
    /**
     * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getMapOrBuilder() {
      return map_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : map_;
    }

    public static final int MINIMAP_FIELD_NUMBER = 2;
    private SC2APIProtocol.Common.ImageData minimap_;
    /**
     * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
     */
    public boolean hasMinimap() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
     */
    public SC2APIProtocol.Common.ImageData getMinimap() {
      return minimap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : minimap_;
    }
    /**
     * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getMinimapOrBuilder() {
      return minimap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : minimap_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getMap());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getMinimap());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getMap());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMinimap());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Spatial.ObservationRender)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Spatial.ObservationRender other = (SC2APIProtocol.Spatial.ObservationRender) obj;

      boolean result = true;
      result = result && (hasMap() == other.hasMap());
      if (hasMap()) {
        result = result && getMap()
            .equals(other.getMap());
      }
      result = result && (hasMinimap() == other.hasMinimap());
      if (hasMinimap()) {
        result = result && getMinimap()
            .equals(other.getMinimap());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMap()) {
        hash = (37 * hash) + MAP_FIELD_NUMBER;
        hash = (53 * hash) + getMap().hashCode();
      }
      if (hasMinimap()) {
        hash = (37 * hash) + MINIMAP_FIELD_NUMBER;
        hash = (53 * hash) + getMinimap().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Spatial.ObservationRender parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ObservationRender parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ObservationRender parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ObservationRender parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ObservationRender parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ObservationRender parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ObservationRender parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ObservationRender parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ObservationRender parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ObservationRender parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Spatial.ObservationRender prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ObservationRender}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ObservationRender)
        SC2APIProtocol.Spatial.ObservationRenderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ObservationRender_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ObservationRender_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Spatial.ObservationRender.class, SC2APIProtocol.Spatial.ObservationRender.Builder.class);
      }

      // Construct using SC2APIProtocol.Spatial.ObservationRender.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMapFieldBuilder();
          getMinimapFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (mapBuilder_ == null) {
          map_ = null;
        } else {
          mapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (minimapBuilder_ == null) {
          minimap_ = null;
        } else {
          minimapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ObservationRender_descriptor;
      }

      public SC2APIProtocol.Spatial.ObservationRender getDefaultInstanceForType() {
        return SC2APIProtocol.Spatial.ObservationRender.getDefaultInstance();
      }

      public SC2APIProtocol.Spatial.ObservationRender build() {
        SC2APIProtocol.Spatial.ObservationRender result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Spatial.ObservationRender buildPartial() {
        SC2APIProtocol.Spatial.ObservationRender result = new SC2APIProtocol.Spatial.ObservationRender(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (mapBuilder_ == null) {
          result.map_ = map_;
        } else {
          result.map_ = mapBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (minimapBuilder_ == null) {
          result.minimap_ = minimap_;
        } else {
          result.minimap_ = minimapBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Spatial.ObservationRender) {
          return mergeFrom((SC2APIProtocol.Spatial.ObservationRender)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Spatial.ObservationRender other) {
        if (other == SC2APIProtocol.Spatial.ObservationRender.getDefaultInstance()) return this;
        if (other.hasMap()) {
          mergeMap(other.getMap());
        }
        if (other.hasMinimap()) {
          mergeMinimap(other.getMinimap());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Spatial.ObservationRender parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Spatial.ObservationRender) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Common.ImageData map_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> mapBuilder_;
      /**
       * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
       */
      public boolean hasMap() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
       */
      public SC2APIProtocol.Common.ImageData getMap() {
        if (mapBuilder_ == null) {
          return map_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : map_;
        } else {
          return mapBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
       */
      public Builder setMap(SC2APIProtocol.Common.ImageData value) {
        if (mapBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          map_ = value;
          onChanged();
        } else {
          mapBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
       */
      public Builder setMap(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (mapBuilder_ == null) {
          map_ = builderForValue.build();
          onChanged();
        } else {
          mapBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
       */
      public Builder mergeMap(SC2APIProtocol.Common.ImageData value) {
        if (mapBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              map_ != null &&
              map_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            map_ =
              SC2APIProtocol.Common.ImageData.newBuilder(map_).mergeFrom(value).buildPartial();
          } else {
            map_ = value;
          }
          onChanged();
        } else {
          mapBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
       */
      public Builder clearMap() {
        if (mapBuilder_ == null) {
          map_ = null;
          onChanged();
        } else {
          mapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getMapBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMapFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getMapOrBuilder() {
        if (mapBuilder_ != null) {
          return mapBuilder_.getMessageOrBuilder();
        } else {
          return map_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : map_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData map = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getMapFieldBuilder() {
        if (mapBuilder_ == null) {
          mapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getMap(),
                  getParentForChildren(),
                  isClean());
          map_ = null;
        }
        return mapBuilder_;
      }

      private SC2APIProtocol.Common.ImageData minimap_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> minimapBuilder_;
      /**
       * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
       */
      public boolean hasMinimap() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
       */
      public SC2APIProtocol.Common.ImageData getMinimap() {
        if (minimapBuilder_ == null) {
          return minimap_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : minimap_;
        } else {
          return minimapBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
       */
      public Builder setMinimap(SC2APIProtocol.Common.ImageData value) {
        if (minimapBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minimap_ = value;
          onChanged();
        } else {
          minimapBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
       */
      public Builder setMinimap(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (minimapBuilder_ == null) {
          minimap_ = builderForValue.build();
          onChanged();
        } else {
          minimapBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
       */
      public Builder mergeMinimap(SC2APIProtocol.Common.ImageData value) {
        if (minimapBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              minimap_ != null &&
              minimap_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            minimap_ =
              SC2APIProtocol.Common.ImageData.newBuilder(minimap_).mergeFrom(value).buildPartial();
          } else {
            minimap_ = value;
          }
          onChanged();
        } else {
          minimapBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
       */
      public Builder clearMinimap() {
        if (minimapBuilder_ == null) {
          minimap_ = null;
          onChanged();
        } else {
          minimapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getMinimapBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMinimapFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getMinimapOrBuilder() {
        if (minimapBuilder_ != null) {
          return minimapBuilder_.getMessageOrBuilder();
        } else {
          return minimap_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : minimap_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ImageData minimap = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getMinimapFieldBuilder() {
        if (minimapBuilder_ == null) {
          minimapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getMinimap(),
                  getParentForChildren(),
                  isClean());
          minimap_ = null;
        }
        return minimapBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ObservationRender)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ObservationRender)
    private static final SC2APIProtocol.Spatial.ObservationRender DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Spatial.ObservationRender();
    }

    public static SC2APIProtocol.Spatial.ObservationRender getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ObservationRender>
        PARSER = new com.google.protobuf.AbstractParser<ObservationRender>() {
      public ObservationRender parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ObservationRender(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ObservationRender> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ObservationRender> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Spatial.ObservationRender getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActionSpatialOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ActionSpatial)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
     */
    boolean hasUnitCommand();
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
     */
    SC2APIProtocol.Spatial.ActionSpatialUnitCommand getUnitCommand();
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
     */
    SC2APIProtocol.Spatial.ActionSpatialUnitCommandOrBuilder getUnitCommandOrBuilder();

    /**
     * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
     */
    boolean hasCameraMove();
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
     */
    SC2APIProtocol.Spatial.ActionSpatialCameraMove getCameraMove();
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
     */
    SC2APIProtocol.Spatial.ActionSpatialCameraMoveOrBuilder getCameraMoveOrBuilder();

    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
     */
    boolean hasUnitSelectionPoint();
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
     */
    SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint getUnitSelectionPoint();
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
     */
    SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPointOrBuilder getUnitSelectionPointOrBuilder();

    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
     */
    boolean hasUnitSelectionRect();
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
     */
    SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect getUnitSelectionRect();
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
     */
    SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRectOrBuilder getUnitSelectionRectOrBuilder();

    public SC2APIProtocol.Spatial.ActionSpatial.ActionCase getActionCase();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ActionSpatial}
   */
  public  static final class ActionSpatial extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ActionSpatial)
      ActionSpatialOrBuilder {
    // Use ActionSpatial.newBuilder() to construct.
    private ActionSpatial(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ActionSpatial() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ActionSpatial(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Spatial.ActionSpatialUnitCommand.Builder subBuilder = null;
              if (actionCase_ == 1) {
                subBuilder = ((SC2APIProtocol.Spatial.ActionSpatialUnitCommand) action_).toBuilder();
              }
              action_ =
                  input.readMessage(SC2APIProtocol.Spatial.ActionSpatialUnitCommand.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Spatial.ActionSpatialUnitCommand) action_);
                action_ = subBuilder.buildPartial();
              }
              actionCase_ = 1;
              break;
            }
            case 18: {
              SC2APIProtocol.Spatial.ActionSpatialCameraMove.Builder subBuilder = null;
              if (actionCase_ == 2) {
                subBuilder = ((SC2APIProtocol.Spatial.ActionSpatialCameraMove) action_).toBuilder();
              }
              action_ =
                  input.readMessage(SC2APIProtocol.Spatial.ActionSpatialCameraMove.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Spatial.ActionSpatialCameraMove) action_);
                action_ = subBuilder.buildPartial();
              }
              actionCase_ = 2;
              break;
            }
            case 26: {
              SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Builder subBuilder = null;
              if (actionCase_ == 3) {
                subBuilder = ((SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) action_).toBuilder();
              }
              action_ =
                  input.readMessage(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) action_);
                action_ = subBuilder.buildPartial();
              }
              actionCase_ = 3;
              break;
            }
            case 34: {
              SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.Builder subBuilder = null;
              if (actionCase_ == 4) {
                subBuilder = ((SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) action_).toBuilder();
              }
              action_ =
                  input.readMessage(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) action_);
                action_ = subBuilder.buildPartial();
              }
              actionCase_ = 4;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatial_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatial_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Spatial.ActionSpatial.class, SC2APIProtocol.Spatial.ActionSpatial.Builder.class);
    }

    private int bitField0_;
    private int actionCase_ = 0;
    private java.lang.Object action_;
    public enum ActionCase
        implements com.google.protobuf.Internal.EnumLite {
      UNIT_COMMAND(1),
      CAMERA_MOVE(2),
      UNIT_SELECTION_POINT(3),
      UNIT_SELECTION_RECT(4),
      ACTION_NOT_SET(0);
      private final int value;
      private ActionCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ActionCase valueOf(int value) {
        return forNumber(value);
      }

      public static ActionCase forNumber(int value) {
        switch (value) {
          case 1: return UNIT_COMMAND;
          case 2: return CAMERA_MOVE;
          case 3: return UNIT_SELECTION_POINT;
          case 4: return UNIT_SELECTION_RECT;
          case 0: return ACTION_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ActionCase
    getActionCase() {
      return ActionCase.forNumber(
          actionCase_);
    }

    public static final int UNIT_COMMAND_FIELD_NUMBER = 1;
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
     */
    public boolean hasUnitCommand() {
      return actionCase_ == 1;
    }
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
     */
    public SC2APIProtocol.Spatial.ActionSpatialUnitCommand getUnitCommand() {
      if (actionCase_ == 1) {
         return (SC2APIProtocol.Spatial.ActionSpatialUnitCommand) action_;
      }
      return SC2APIProtocol.Spatial.ActionSpatialUnitCommand.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
     */
    public SC2APIProtocol.Spatial.ActionSpatialUnitCommandOrBuilder getUnitCommandOrBuilder() {
      if (actionCase_ == 1) {
         return (SC2APIProtocol.Spatial.ActionSpatialUnitCommand) action_;
      }
      return SC2APIProtocol.Spatial.ActionSpatialUnitCommand.getDefaultInstance();
    }

    public static final int CAMERA_MOVE_FIELD_NUMBER = 2;
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
     */
    public boolean hasCameraMove() {
      return actionCase_ == 2;
    }
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
     */
    public SC2APIProtocol.Spatial.ActionSpatialCameraMove getCameraMove() {
      if (actionCase_ == 2) {
         return (SC2APIProtocol.Spatial.ActionSpatialCameraMove) action_;
      }
      return SC2APIProtocol.Spatial.ActionSpatialCameraMove.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
     */
    public SC2APIProtocol.Spatial.ActionSpatialCameraMoveOrBuilder getCameraMoveOrBuilder() {
      if (actionCase_ == 2) {
         return (SC2APIProtocol.Spatial.ActionSpatialCameraMove) action_;
      }
      return SC2APIProtocol.Spatial.ActionSpatialCameraMove.getDefaultInstance();
    }

    public static final int UNIT_SELECTION_POINT_FIELD_NUMBER = 3;
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
     */
    public boolean hasUnitSelectionPoint() {
      return actionCase_ == 3;
    }
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
     */
    public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint getUnitSelectionPoint() {
      if (actionCase_ == 3) {
         return (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) action_;
      }
      return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
     */
    public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPointOrBuilder getUnitSelectionPointOrBuilder() {
      if (actionCase_ == 3) {
         return (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) action_;
      }
      return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.getDefaultInstance();
    }

    public static final int UNIT_SELECTION_RECT_FIELD_NUMBER = 4;
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
     */
    public boolean hasUnitSelectionRect() {
      return actionCase_ == 4;
    }
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
     */
    public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect getUnitSelectionRect() {
      if (actionCase_ == 4) {
         return (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) action_;
      }
      return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
     */
    public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRectOrBuilder getUnitSelectionRectOrBuilder() {
      if (actionCase_ == 4) {
         return (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) action_;
      }
      return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (actionCase_ == 1) {
        output.writeMessage(1, (SC2APIProtocol.Spatial.ActionSpatialUnitCommand) action_);
      }
      if (actionCase_ == 2) {
        output.writeMessage(2, (SC2APIProtocol.Spatial.ActionSpatialCameraMove) action_);
      }
      if (actionCase_ == 3) {
        output.writeMessage(3, (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) action_);
      }
      if (actionCase_ == 4) {
        output.writeMessage(4, (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) action_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (actionCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (SC2APIProtocol.Spatial.ActionSpatialUnitCommand) action_);
      }
      if (actionCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (SC2APIProtocol.Spatial.ActionSpatialCameraMove) action_);
      }
      if (actionCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) action_);
      }
      if (actionCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) action_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Spatial.ActionSpatial)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Spatial.ActionSpatial other = (SC2APIProtocol.Spatial.ActionSpatial) obj;

      boolean result = true;
      result = result && getActionCase().equals(
          other.getActionCase());
      if (!result) return false;
      switch (actionCase_) {
        case 1:
          result = result && getUnitCommand()
              .equals(other.getUnitCommand());
          break;
        case 2:
          result = result && getCameraMove()
              .equals(other.getCameraMove());
          break;
        case 3:
          result = result && getUnitSelectionPoint()
              .equals(other.getUnitSelectionPoint());
          break;
        case 4:
          result = result && getUnitSelectionRect()
              .equals(other.getUnitSelectionRect());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      switch (actionCase_) {
        case 1:
          hash = (37 * hash) + UNIT_COMMAND_FIELD_NUMBER;
          hash = (53 * hash) + getUnitCommand().hashCode();
          break;
        case 2:
          hash = (37 * hash) + CAMERA_MOVE_FIELD_NUMBER;
          hash = (53 * hash) + getCameraMove().hashCode();
          break;
        case 3:
          hash = (37 * hash) + UNIT_SELECTION_POINT_FIELD_NUMBER;
          hash = (53 * hash) + getUnitSelectionPoint().hashCode();
          break;
        case 4:
          hash = (37 * hash) + UNIT_SELECTION_RECT_FIELD_NUMBER;
          hash = (53 * hash) + getUnitSelectionRect().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Spatial.ActionSpatial parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ActionSpatial parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatial parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ActionSpatial parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatial parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatial parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatial parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatial parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatial parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatial parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Spatial.ActionSpatial prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ActionSpatial}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ActionSpatial)
        SC2APIProtocol.Spatial.ActionSpatialOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatial_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatial_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Spatial.ActionSpatial.class, SC2APIProtocol.Spatial.ActionSpatial.Builder.class);
      }

      // Construct using SC2APIProtocol.Spatial.ActionSpatial.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        actionCase_ = 0;
        action_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatial_descriptor;
      }

      public SC2APIProtocol.Spatial.ActionSpatial getDefaultInstanceForType() {
        return SC2APIProtocol.Spatial.ActionSpatial.getDefaultInstance();
      }

      public SC2APIProtocol.Spatial.ActionSpatial build() {
        SC2APIProtocol.Spatial.ActionSpatial result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Spatial.ActionSpatial buildPartial() {
        SC2APIProtocol.Spatial.ActionSpatial result = new SC2APIProtocol.Spatial.ActionSpatial(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (actionCase_ == 1) {
          if (unitCommandBuilder_ == null) {
            result.action_ = action_;
          } else {
            result.action_ = unitCommandBuilder_.build();
          }
        }
        if (actionCase_ == 2) {
          if (cameraMoveBuilder_ == null) {
            result.action_ = action_;
          } else {
            result.action_ = cameraMoveBuilder_.build();
          }
        }
        if (actionCase_ == 3) {
          if (unitSelectionPointBuilder_ == null) {
            result.action_ = action_;
          } else {
            result.action_ = unitSelectionPointBuilder_.build();
          }
        }
        if (actionCase_ == 4) {
          if (unitSelectionRectBuilder_ == null) {
            result.action_ = action_;
          } else {
            result.action_ = unitSelectionRectBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.actionCase_ = actionCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Spatial.ActionSpatial) {
          return mergeFrom((SC2APIProtocol.Spatial.ActionSpatial)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Spatial.ActionSpatial other) {
        if (other == SC2APIProtocol.Spatial.ActionSpatial.getDefaultInstance()) return this;
        switch (other.getActionCase()) {
          case UNIT_COMMAND: {
            mergeUnitCommand(other.getUnitCommand());
            break;
          }
          case CAMERA_MOVE: {
            mergeCameraMove(other.getCameraMove());
            break;
          }
          case UNIT_SELECTION_POINT: {
            mergeUnitSelectionPoint(other.getUnitSelectionPoint());
            break;
          }
          case UNIT_SELECTION_RECT: {
            mergeUnitSelectionRect(other.getUnitSelectionRect());
            break;
          }
          case ACTION_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Spatial.ActionSpatial parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Spatial.ActionSpatial) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int actionCase_ = 0;
      private java.lang.Object action_;
      public ActionCase
          getActionCase() {
        return ActionCase.forNumber(
            actionCase_);
      }

      public Builder clearAction() {
        actionCase_ = 0;
        action_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.ActionSpatialUnitCommand, SC2APIProtocol.Spatial.ActionSpatialUnitCommand.Builder, SC2APIProtocol.Spatial.ActionSpatialUnitCommandOrBuilder> unitCommandBuilder_;
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
       */
      public boolean hasUnitCommand() {
        return actionCase_ == 1;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialUnitCommand getUnitCommand() {
        if (unitCommandBuilder_ == null) {
          if (actionCase_ == 1) {
            return (SC2APIProtocol.Spatial.ActionSpatialUnitCommand) action_;
          }
          return SC2APIProtocol.Spatial.ActionSpatialUnitCommand.getDefaultInstance();
        } else {
          if (actionCase_ == 1) {
            return unitCommandBuilder_.getMessage();
          }
          return SC2APIProtocol.Spatial.ActionSpatialUnitCommand.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
       */
      public Builder setUnitCommand(SC2APIProtocol.Spatial.ActionSpatialUnitCommand value) {
        if (unitCommandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          action_ = value;
          onChanged();
        } else {
          unitCommandBuilder_.setMessage(value);
        }
        actionCase_ = 1;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
       */
      public Builder setUnitCommand(
          SC2APIProtocol.Spatial.ActionSpatialUnitCommand.Builder builderForValue) {
        if (unitCommandBuilder_ == null) {
          action_ = builderForValue.build();
          onChanged();
        } else {
          unitCommandBuilder_.setMessage(builderForValue.build());
        }
        actionCase_ = 1;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
       */
      public Builder mergeUnitCommand(SC2APIProtocol.Spatial.ActionSpatialUnitCommand value) {
        if (unitCommandBuilder_ == null) {
          if (actionCase_ == 1 &&
              action_ != SC2APIProtocol.Spatial.ActionSpatialUnitCommand.getDefaultInstance()) {
            action_ = SC2APIProtocol.Spatial.ActionSpatialUnitCommand.newBuilder((SC2APIProtocol.Spatial.ActionSpatialUnitCommand) action_)
                .mergeFrom(value).buildPartial();
          } else {
            action_ = value;
          }
          onChanged();
        } else {
          if (actionCase_ == 1) {
            unitCommandBuilder_.mergeFrom(value);
          }
          unitCommandBuilder_.setMessage(value);
        }
        actionCase_ = 1;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
       */
      public Builder clearUnitCommand() {
        if (unitCommandBuilder_ == null) {
          if (actionCase_ == 1) {
            actionCase_ = 0;
            action_ = null;
            onChanged();
          }
        } else {
          if (actionCase_ == 1) {
            actionCase_ = 0;
            action_ = null;
          }
          unitCommandBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialUnitCommand.Builder getUnitCommandBuilder() {
        return getUnitCommandFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialUnitCommandOrBuilder getUnitCommandOrBuilder() {
        if ((actionCase_ == 1) && (unitCommandBuilder_ != null)) {
          return unitCommandBuilder_.getMessageOrBuilder();
        } else {
          if (actionCase_ == 1) {
            return (SC2APIProtocol.Spatial.ActionSpatialUnitCommand) action_;
          }
          return SC2APIProtocol.Spatial.ActionSpatialUnitCommand.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.ActionSpatialUnitCommand, SC2APIProtocol.Spatial.ActionSpatialUnitCommand.Builder, SC2APIProtocol.Spatial.ActionSpatialUnitCommandOrBuilder> 
          getUnitCommandFieldBuilder() {
        if (unitCommandBuilder_ == null) {
          if (!(actionCase_ == 1)) {
            action_ = SC2APIProtocol.Spatial.ActionSpatialUnitCommand.getDefaultInstance();
          }
          unitCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Spatial.ActionSpatialUnitCommand, SC2APIProtocol.Spatial.ActionSpatialUnitCommand.Builder, SC2APIProtocol.Spatial.ActionSpatialUnitCommandOrBuilder>(
                  (SC2APIProtocol.Spatial.ActionSpatialUnitCommand) action_,
                  getParentForChildren(),
                  isClean());
          action_ = null;
        }
        actionCase_ = 1;
        onChanged();;
        return unitCommandBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.ActionSpatialCameraMove, SC2APIProtocol.Spatial.ActionSpatialCameraMove.Builder, SC2APIProtocol.Spatial.ActionSpatialCameraMoveOrBuilder> cameraMoveBuilder_;
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
       */
      public boolean hasCameraMove() {
        return actionCase_ == 2;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialCameraMove getCameraMove() {
        if (cameraMoveBuilder_ == null) {
          if (actionCase_ == 2) {
            return (SC2APIProtocol.Spatial.ActionSpatialCameraMove) action_;
          }
          return SC2APIProtocol.Spatial.ActionSpatialCameraMove.getDefaultInstance();
        } else {
          if (actionCase_ == 2) {
            return cameraMoveBuilder_.getMessage();
          }
          return SC2APIProtocol.Spatial.ActionSpatialCameraMove.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
       */
      public Builder setCameraMove(SC2APIProtocol.Spatial.ActionSpatialCameraMove value) {
        if (cameraMoveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          action_ = value;
          onChanged();
        } else {
          cameraMoveBuilder_.setMessage(value);
        }
        actionCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
       */
      public Builder setCameraMove(
          SC2APIProtocol.Spatial.ActionSpatialCameraMove.Builder builderForValue) {
        if (cameraMoveBuilder_ == null) {
          action_ = builderForValue.build();
          onChanged();
        } else {
          cameraMoveBuilder_.setMessage(builderForValue.build());
        }
        actionCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
       */
      public Builder mergeCameraMove(SC2APIProtocol.Spatial.ActionSpatialCameraMove value) {
        if (cameraMoveBuilder_ == null) {
          if (actionCase_ == 2 &&
              action_ != SC2APIProtocol.Spatial.ActionSpatialCameraMove.getDefaultInstance()) {
            action_ = SC2APIProtocol.Spatial.ActionSpatialCameraMove.newBuilder((SC2APIProtocol.Spatial.ActionSpatialCameraMove) action_)
                .mergeFrom(value).buildPartial();
          } else {
            action_ = value;
          }
          onChanged();
        } else {
          if (actionCase_ == 2) {
            cameraMoveBuilder_.mergeFrom(value);
          }
          cameraMoveBuilder_.setMessage(value);
        }
        actionCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
       */
      public Builder clearCameraMove() {
        if (cameraMoveBuilder_ == null) {
          if (actionCase_ == 2) {
            actionCase_ = 0;
            action_ = null;
            onChanged();
          }
        } else {
          if (actionCase_ == 2) {
            actionCase_ = 0;
            action_ = null;
          }
          cameraMoveBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialCameraMove.Builder getCameraMoveBuilder() {
        return getCameraMoveFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialCameraMoveOrBuilder getCameraMoveOrBuilder() {
        if ((actionCase_ == 2) && (cameraMoveBuilder_ != null)) {
          return cameraMoveBuilder_.getMessageOrBuilder();
        } else {
          if (actionCase_ == 2) {
            return (SC2APIProtocol.Spatial.ActionSpatialCameraMove) action_;
          }
          return SC2APIProtocol.Spatial.ActionSpatialCameraMove.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.ActionSpatialCameraMove, SC2APIProtocol.Spatial.ActionSpatialCameraMove.Builder, SC2APIProtocol.Spatial.ActionSpatialCameraMoveOrBuilder> 
          getCameraMoveFieldBuilder() {
        if (cameraMoveBuilder_ == null) {
          if (!(actionCase_ == 2)) {
            action_ = SC2APIProtocol.Spatial.ActionSpatialCameraMove.getDefaultInstance();
          }
          cameraMoveBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Spatial.ActionSpatialCameraMove, SC2APIProtocol.Spatial.ActionSpatialCameraMove.Builder, SC2APIProtocol.Spatial.ActionSpatialCameraMoveOrBuilder>(
                  (SC2APIProtocol.Spatial.ActionSpatialCameraMove) action_,
                  getParentForChildren(),
                  isClean());
          action_ = null;
        }
        actionCase_ = 2;
        onChanged();;
        return cameraMoveBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Builder, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPointOrBuilder> unitSelectionPointBuilder_;
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
       */
      public boolean hasUnitSelectionPoint() {
        return actionCase_ == 3;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint getUnitSelectionPoint() {
        if (unitSelectionPointBuilder_ == null) {
          if (actionCase_ == 3) {
            return (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) action_;
          }
          return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.getDefaultInstance();
        } else {
          if (actionCase_ == 3) {
            return unitSelectionPointBuilder_.getMessage();
          }
          return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
       */
      public Builder setUnitSelectionPoint(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint value) {
        if (unitSelectionPointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          action_ = value;
          onChanged();
        } else {
          unitSelectionPointBuilder_.setMessage(value);
        }
        actionCase_ = 3;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
       */
      public Builder setUnitSelectionPoint(
          SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Builder builderForValue) {
        if (unitSelectionPointBuilder_ == null) {
          action_ = builderForValue.build();
          onChanged();
        } else {
          unitSelectionPointBuilder_.setMessage(builderForValue.build());
        }
        actionCase_ = 3;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
       */
      public Builder mergeUnitSelectionPoint(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint value) {
        if (unitSelectionPointBuilder_ == null) {
          if (actionCase_ == 3 &&
              action_ != SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.getDefaultInstance()) {
            action_ = SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.newBuilder((SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) action_)
                .mergeFrom(value).buildPartial();
          } else {
            action_ = value;
          }
          onChanged();
        } else {
          if (actionCase_ == 3) {
            unitSelectionPointBuilder_.mergeFrom(value);
          }
          unitSelectionPointBuilder_.setMessage(value);
        }
        actionCase_ = 3;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
       */
      public Builder clearUnitSelectionPoint() {
        if (unitSelectionPointBuilder_ == null) {
          if (actionCase_ == 3) {
            actionCase_ = 0;
            action_ = null;
            onChanged();
          }
        } else {
          if (actionCase_ == 3) {
            actionCase_ = 0;
            action_ = null;
          }
          unitSelectionPointBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Builder getUnitSelectionPointBuilder() {
        return getUnitSelectionPointFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPointOrBuilder getUnitSelectionPointOrBuilder() {
        if ((actionCase_ == 3) && (unitSelectionPointBuilder_ != null)) {
          return unitSelectionPointBuilder_.getMessageOrBuilder();
        } else {
          if (actionCase_ == 3) {
            return (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) action_;
          }
          return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Builder, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPointOrBuilder> 
          getUnitSelectionPointFieldBuilder() {
        if (unitSelectionPointBuilder_ == null) {
          if (!(actionCase_ == 3)) {
            action_ = SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.getDefaultInstance();
          }
          unitSelectionPointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Builder, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPointOrBuilder>(
                  (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) action_,
                  getParentForChildren(),
                  isClean());
          action_ = null;
        }
        actionCase_ = 3;
        onChanged();;
        return unitSelectionPointBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.Builder, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRectOrBuilder> unitSelectionRectBuilder_;
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
       */
      public boolean hasUnitSelectionRect() {
        return actionCase_ == 4;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect getUnitSelectionRect() {
        if (unitSelectionRectBuilder_ == null) {
          if (actionCase_ == 4) {
            return (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) action_;
          }
          return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.getDefaultInstance();
        } else {
          if (actionCase_ == 4) {
            return unitSelectionRectBuilder_.getMessage();
          }
          return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
       */
      public Builder setUnitSelectionRect(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect value) {
        if (unitSelectionRectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          action_ = value;
          onChanged();
        } else {
          unitSelectionRectBuilder_.setMessage(value);
        }
        actionCase_ = 4;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
       */
      public Builder setUnitSelectionRect(
          SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.Builder builderForValue) {
        if (unitSelectionRectBuilder_ == null) {
          action_ = builderForValue.build();
          onChanged();
        } else {
          unitSelectionRectBuilder_.setMessage(builderForValue.build());
        }
        actionCase_ = 4;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
       */
      public Builder mergeUnitSelectionRect(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect value) {
        if (unitSelectionRectBuilder_ == null) {
          if (actionCase_ == 4 &&
              action_ != SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.getDefaultInstance()) {
            action_ = SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.newBuilder((SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) action_)
                .mergeFrom(value).buildPartial();
          } else {
            action_ = value;
          }
          onChanged();
        } else {
          if (actionCase_ == 4) {
            unitSelectionRectBuilder_.mergeFrom(value);
          }
          unitSelectionRectBuilder_.setMessage(value);
        }
        actionCase_ = 4;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
       */
      public Builder clearUnitSelectionRect() {
        if (unitSelectionRectBuilder_ == null) {
          if (actionCase_ == 4) {
            actionCase_ = 0;
            action_ = null;
            onChanged();
          }
        } else {
          if (actionCase_ == 4) {
            actionCase_ = 0;
            action_ = null;
          }
          unitSelectionRectBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.Builder getUnitSelectionRectBuilder() {
        return getUnitSelectionRectFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRectOrBuilder getUnitSelectionRectOrBuilder() {
        if ((actionCase_ == 4) && (unitSelectionRectBuilder_ != null)) {
          return unitSelectionRectBuilder_.getMessageOrBuilder();
        } else {
          if (actionCase_ == 4) {
            return (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) action_;
          }
          return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.Builder, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRectOrBuilder> 
          getUnitSelectionRectFieldBuilder() {
        if (unitSelectionRectBuilder_ == null) {
          if (!(actionCase_ == 4)) {
            action_ = SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.getDefaultInstance();
          }
          unitSelectionRectBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.Builder, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRectOrBuilder>(
                  (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) action_,
                  getParentForChildren(),
                  isClean());
          action_ = null;
        }
        actionCase_ = 4;
        onChanged();;
        return unitSelectionRectBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ActionSpatial)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionSpatial)
    private static final SC2APIProtocol.Spatial.ActionSpatial DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Spatial.ActionSpatial();
    }

    public static SC2APIProtocol.Spatial.ActionSpatial getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ActionSpatial>
        PARSER = new com.google.protobuf.AbstractParser<ActionSpatial>() {
      public ActionSpatial parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ActionSpatial(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ActionSpatial> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ActionSpatial> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Spatial.ActionSpatial getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActionSpatialUnitCommandOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ActionSpatialUnitCommand)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    boolean hasAbilityId();
    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    int getAbilityId();

    /**
     * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
     */
    boolean hasTargetScreenCoord();
    /**
     * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
     */
    SC2APIProtocol.Common.PointI getTargetScreenCoord();
    /**
     * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
     */
    SC2APIProtocol.Common.PointIOrBuilder getTargetScreenCoordOrBuilder();

    /**
     * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
     */
    boolean hasTargetMinimapCoord();
    /**
     * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
     */
    SC2APIProtocol.Common.PointI getTargetMinimapCoord();
    /**
     * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
     */
    SC2APIProtocol.Common.PointIOrBuilder getTargetMinimapCoordOrBuilder();

    /**
     * <pre>
     * Equivalent to shift+command.
     * </pre>
     *
     * <code>optional bool queue_command = 4;</code>
     */
    boolean hasQueueCommand();
    /**
     * <pre>
     * Equivalent to shift+command.
     * </pre>
     *
     * <code>optional bool queue_command = 4;</code>
     */
    boolean getQueueCommand();

    public SC2APIProtocol.Spatial.ActionSpatialUnitCommand.TargetCase getTargetCase();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ActionSpatialUnitCommand}
   */
  public  static final class ActionSpatialUnitCommand extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ActionSpatialUnitCommand)
      ActionSpatialUnitCommandOrBuilder {
    // Use ActionSpatialUnitCommand.newBuilder() to construct.
    private ActionSpatialUnitCommand(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ActionSpatialUnitCommand() {
      abilityId_ = 0;
      queueCommand_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ActionSpatialUnitCommand(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              abilityId_ = input.readInt32();
              break;
            }
            case 18: {
              SC2APIProtocol.Common.PointI.Builder subBuilder = null;
              if (targetCase_ == 2) {
                subBuilder = ((SC2APIProtocol.Common.PointI) target_).toBuilder();
              }
              target_ =
                  input.readMessage(SC2APIProtocol.Common.PointI.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Common.PointI) target_);
                target_ = subBuilder.buildPartial();
              }
              targetCase_ = 2;
              break;
            }
            case 26: {
              SC2APIProtocol.Common.PointI.Builder subBuilder = null;
              if (targetCase_ == 3) {
                subBuilder = ((SC2APIProtocol.Common.PointI) target_).toBuilder();
              }
              target_ =
                  input.readMessage(SC2APIProtocol.Common.PointI.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Common.PointI) target_);
                target_ = subBuilder.buildPartial();
              }
              targetCase_ = 3;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              queueCommand_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitCommand_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Spatial.ActionSpatialUnitCommand.class, SC2APIProtocol.Spatial.ActionSpatialUnitCommand.Builder.class);
    }

    private int bitField0_;
    private int targetCase_ = 0;
    private java.lang.Object target_;
    public enum TargetCase
        implements com.google.protobuf.Internal.EnumLite {
      TARGET_SCREEN_COORD(2),
      TARGET_MINIMAP_COORD(3),
      TARGET_NOT_SET(0);
      private final int value;
      private TargetCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TargetCase valueOf(int value) {
        return forNumber(value);
      }

      public static TargetCase forNumber(int value) {
        switch (value) {
          case 2: return TARGET_SCREEN_COORD;
          case 3: return TARGET_MINIMAP_COORD;
          case 0: return TARGET_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TargetCase
    getTargetCase() {
      return TargetCase.forNumber(
          targetCase_);
    }

    public static final int ABILITY_ID_FIELD_NUMBER = 1;
    private int abilityId_;
    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    public boolean hasAbilityId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    public int getAbilityId() {
      return abilityId_;
    }

    public static final int TARGET_SCREEN_COORD_FIELD_NUMBER = 2;
    /**
     * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
     */
    public boolean hasTargetScreenCoord() {
      return targetCase_ == 2;
    }
    /**
     * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
     */
    public SC2APIProtocol.Common.PointI getTargetScreenCoord() {
      if (targetCase_ == 2) {
         return (SC2APIProtocol.Common.PointI) target_;
      }
      return SC2APIProtocol.Common.PointI.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
     */
    public SC2APIProtocol.Common.PointIOrBuilder getTargetScreenCoordOrBuilder() {
      if (targetCase_ == 2) {
         return (SC2APIProtocol.Common.PointI) target_;
      }
      return SC2APIProtocol.Common.PointI.getDefaultInstance();
    }

    public static final int TARGET_MINIMAP_COORD_FIELD_NUMBER = 3;
    /**
     * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
     */
    public boolean hasTargetMinimapCoord() {
      return targetCase_ == 3;
    }
    /**
     * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
     */
    public SC2APIProtocol.Common.PointI getTargetMinimapCoord() {
      if (targetCase_ == 3) {
         return (SC2APIProtocol.Common.PointI) target_;
      }
      return SC2APIProtocol.Common.PointI.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
     */
    public SC2APIProtocol.Common.PointIOrBuilder getTargetMinimapCoordOrBuilder() {
      if (targetCase_ == 3) {
         return (SC2APIProtocol.Common.PointI) target_;
      }
      return SC2APIProtocol.Common.PointI.getDefaultInstance();
    }

    public static final int QUEUE_COMMAND_FIELD_NUMBER = 4;
    private boolean queueCommand_;
    /**
     * <pre>
     * Equivalent to shift+command.
     * </pre>
     *
     * <code>optional bool queue_command = 4;</code>
     */
    public boolean hasQueueCommand() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Equivalent to shift+command.
     * </pre>
     *
     * <code>optional bool queue_command = 4;</code>
     */
    public boolean getQueueCommand() {
      return queueCommand_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, abilityId_);
      }
      if (targetCase_ == 2) {
        output.writeMessage(2, (SC2APIProtocol.Common.PointI) target_);
      }
      if (targetCase_ == 3) {
        output.writeMessage(3, (SC2APIProtocol.Common.PointI) target_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, queueCommand_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, abilityId_);
      }
      if (targetCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (SC2APIProtocol.Common.PointI) target_);
      }
      if (targetCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (SC2APIProtocol.Common.PointI) target_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, queueCommand_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Spatial.ActionSpatialUnitCommand)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Spatial.ActionSpatialUnitCommand other = (SC2APIProtocol.Spatial.ActionSpatialUnitCommand) obj;

      boolean result = true;
      result = result && (hasAbilityId() == other.hasAbilityId());
      if (hasAbilityId()) {
        result = result && (getAbilityId()
            == other.getAbilityId());
      }
      result = result && (hasQueueCommand() == other.hasQueueCommand());
      if (hasQueueCommand()) {
        result = result && (getQueueCommand()
            == other.getQueueCommand());
      }
      result = result && getTargetCase().equals(
          other.getTargetCase());
      if (!result) return false;
      switch (targetCase_) {
        case 2:
          result = result && getTargetScreenCoord()
              .equals(other.getTargetScreenCoord());
          break;
        case 3:
          result = result && getTargetMinimapCoord()
              .equals(other.getTargetMinimapCoord());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasAbilityId()) {
        hash = (37 * hash) + ABILITY_ID_FIELD_NUMBER;
        hash = (53 * hash) + getAbilityId();
      }
      if (hasQueueCommand()) {
        hash = (37 * hash) + QUEUE_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getQueueCommand());
      }
      switch (targetCase_) {
        case 2:
          hash = (37 * hash) + TARGET_SCREEN_COORD_FIELD_NUMBER;
          hash = (53 * hash) + getTargetScreenCoord().hashCode();
          break;
        case 3:
          hash = (37 * hash) + TARGET_MINIMAP_COORD_FIELD_NUMBER;
          hash = (53 * hash) + getTargetMinimapCoord().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Spatial.ActionSpatialUnitCommand prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ActionSpatialUnitCommand}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ActionSpatialUnitCommand)
        SC2APIProtocol.Spatial.ActionSpatialUnitCommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitCommand_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitCommand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Spatial.ActionSpatialUnitCommand.class, SC2APIProtocol.Spatial.ActionSpatialUnitCommand.Builder.class);
      }

      // Construct using SC2APIProtocol.Spatial.ActionSpatialUnitCommand.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        abilityId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        queueCommand_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        targetCase_ = 0;
        target_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitCommand_descriptor;
      }

      public SC2APIProtocol.Spatial.ActionSpatialUnitCommand getDefaultInstanceForType() {
        return SC2APIProtocol.Spatial.ActionSpatialUnitCommand.getDefaultInstance();
      }

      public SC2APIProtocol.Spatial.ActionSpatialUnitCommand build() {
        SC2APIProtocol.Spatial.ActionSpatialUnitCommand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Spatial.ActionSpatialUnitCommand buildPartial() {
        SC2APIProtocol.Spatial.ActionSpatialUnitCommand result = new SC2APIProtocol.Spatial.ActionSpatialUnitCommand(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.abilityId_ = abilityId_;
        if (targetCase_ == 2) {
          if (targetScreenCoordBuilder_ == null) {
            result.target_ = target_;
          } else {
            result.target_ = targetScreenCoordBuilder_.build();
          }
        }
        if (targetCase_ == 3) {
          if (targetMinimapCoordBuilder_ == null) {
            result.target_ = target_;
          } else {
            result.target_ = targetMinimapCoordBuilder_.build();
          }
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.queueCommand_ = queueCommand_;
        result.bitField0_ = to_bitField0_;
        result.targetCase_ = targetCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Spatial.ActionSpatialUnitCommand) {
          return mergeFrom((SC2APIProtocol.Spatial.ActionSpatialUnitCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Spatial.ActionSpatialUnitCommand other) {
        if (other == SC2APIProtocol.Spatial.ActionSpatialUnitCommand.getDefaultInstance()) return this;
        if (other.hasAbilityId()) {
          setAbilityId(other.getAbilityId());
        }
        if (other.hasQueueCommand()) {
          setQueueCommand(other.getQueueCommand());
        }
        switch (other.getTargetCase()) {
          case TARGET_SCREEN_COORD: {
            mergeTargetScreenCoord(other.getTargetScreenCoord());
            break;
          }
          case TARGET_MINIMAP_COORD: {
            mergeTargetMinimapCoord(other.getTargetMinimapCoord());
            break;
          }
          case TARGET_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Spatial.ActionSpatialUnitCommand parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Spatial.ActionSpatialUnitCommand) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int targetCase_ = 0;
      private java.lang.Object target_;
      public TargetCase
          getTargetCase() {
        return TargetCase.forNumber(
            targetCase_);
      }

      public Builder clearTarget() {
        targetCase_ = 0;
        target_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int abilityId_ ;
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public boolean hasAbilityId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public int getAbilityId() {
        return abilityId_;
      }
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public Builder setAbilityId(int value) {
        bitField0_ |= 0x00000001;
        abilityId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public Builder clearAbilityId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        abilityId_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder> targetScreenCoordBuilder_;
      /**
       * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
       */
      public boolean hasTargetScreenCoord() {
        return targetCase_ == 2;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
       */
      public SC2APIProtocol.Common.PointI getTargetScreenCoord() {
        if (targetScreenCoordBuilder_ == null) {
          if (targetCase_ == 2) {
            return (SC2APIProtocol.Common.PointI) target_;
          }
          return SC2APIProtocol.Common.PointI.getDefaultInstance();
        } else {
          if (targetCase_ == 2) {
            return targetScreenCoordBuilder_.getMessage();
          }
          return SC2APIProtocol.Common.PointI.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
       */
      public Builder setTargetScreenCoord(SC2APIProtocol.Common.PointI value) {
        if (targetScreenCoordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetScreenCoordBuilder_.setMessage(value);
        }
        targetCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
       */
      public Builder setTargetScreenCoord(
          SC2APIProtocol.Common.PointI.Builder builderForValue) {
        if (targetScreenCoordBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetScreenCoordBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
       */
      public Builder mergeTargetScreenCoord(SC2APIProtocol.Common.PointI value) {
        if (targetScreenCoordBuilder_ == null) {
          if (targetCase_ == 2 &&
              target_ != SC2APIProtocol.Common.PointI.getDefaultInstance()) {
            target_ = SC2APIProtocol.Common.PointI.newBuilder((SC2APIProtocol.Common.PointI) target_)
                .mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 2) {
            targetScreenCoordBuilder_.mergeFrom(value);
          }
          targetScreenCoordBuilder_.setMessage(value);
        }
        targetCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
       */
      public Builder clearTargetScreenCoord() {
        if (targetScreenCoordBuilder_ == null) {
          if (targetCase_ == 2) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 2) {
            targetCase_ = 0;
            target_ = null;
          }
          targetScreenCoordBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
       */
      public SC2APIProtocol.Common.PointI.Builder getTargetScreenCoordBuilder() {
        return getTargetScreenCoordFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
       */
      public SC2APIProtocol.Common.PointIOrBuilder getTargetScreenCoordOrBuilder() {
        if ((targetCase_ == 2) && (targetScreenCoordBuilder_ != null)) {
          return targetScreenCoordBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 2) {
            return (SC2APIProtocol.Common.PointI) target_;
          }
          return SC2APIProtocol.Common.PointI.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_screen_coord = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder> 
          getTargetScreenCoordFieldBuilder() {
        if (targetScreenCoordBuilder_ == null) {
          if (!(targetCase_ == 2)) {
            target_ = SC2APIProtocol.Common.PointI.getDefaultInstance();
          }
          targetScreenCoordBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder>(
                  (SC2APIProtocol.Common.PointI) target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 2;
        onChanged();;
        return targetScreenCoordBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder> targetMinimapCoordBuilder_;
      /**
       * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
       */
      public boolean hasTargetMinimapCoord() {
        return targetCase_ == 3;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
       */
      public SC2APIProtocol.Common.PointI getTargetMinimapCoord() {
        if (targetMinimapCoordBuilder_ == null) {
          if (targetCase_ == 3) {
            return (SC2APIProtocol.Common.PointI) target_;
          }
          return SC2APIProtocol.Common.PointI.getDefaultInstance();
        } else {
          if (targetCase_ == 3) {
            return targetMinimapCoordBuilder_.getMessage();
          }
          return SC2APIProtocol.Common.PointI.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
       */
      public Builder setTargetMinimapCoord(SC2APIProtocol.Common.PointI value) {
        if (targetMinimapCoordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetMinimapCoordBuilder_.setMessage(value);
        }
        targetCase_ = 3;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
       */
      public Builder setTargetMinimapCoord(
          SC2APIProtocol.Common.PointI.Builder builderForValue) {
        if (targetMinimapCoordBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetMinimapCoordBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 3;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
       */
      public Builder mergeTargetMinimapCoord(SC2APIProtocol.Common.PointI value) {
        if (targetMinimapCoordBuilder_ == null) {
          if (targetCase_ == 3 &&
              target_ != SC2APIProtocol.Common.PointI.getDefaultInstance()) {
            target_ = SC2APIProtocol.Common.PointI.newBuilder((SC2APIProtocol.Common.PointI) target_)
                .mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 3) {
            targetMinimapCoordBuilder_.mergeFrom(value);
          }
          targetMinimapCoordBuilder_.setMessage(value);
        }
        targetCase_ = 3;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
       */
      public Builder clearTargetMinimapCoord() {
        if (targetMinimapCoordBuilder_ == null) {
          if (targetCase_ == 3) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 3) {
            targetCase_ = 0;
            target_ = null;
          }
          targetMinimapCoordBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
       */
      public SC2APIProtocol.Common.PointI.Builder getTargetMinimapCoordBuilder() {
        return getTargetMinimapCoordFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
       */
      public SC2APIProtocol.Common.PointIOrBuilder getTargetMinimapCoordOrBuilder() {
        if ((targetCase_ == 3) && (targetMinimapCoordBuilder_ != null)) {
          return targetMinimapCoordBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 3) {
            return (SC2APIProtocol.Common.PointI) target_;
          }
          return SC2APIProtocol.Common.PointI.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.PointI target_minimap_coord = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder> 
          getTargetMinimapCoordFieldBuilder() {
        if (targetMinimapCoordBuilder_ == null) {
          if (!(targetCase_ == 3)) {
            target_ = SC2APIProtocol.Common.PointI.getDefaultInstance();
          }
          targetMinimapCoordBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder>(
                  (SC2APIProtocol.Common.PointI) target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 3;
        onChanged();;
        return targetMinimapCoordBuilder_;
      }

      private boolean queueCommand_ ;
      /**
       * <pre>
       * Equivalent to shift+command.
       * </pre>
       *
       * <code>optional bool queue_command = 4;</code>
       */
      public boolean hasQueueCommand() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Equivalent to shift+command.
       * </pre>
       *
       * <code>optional bool queue_command = 4;</code>
       */
      public boolean getQueueCommand() {
        return queueCommand_;
      }
      /**
       * <pre>
       * Equivalent to shift+command.
       * </pre>
       *
       * <code>optional bool queue_command = 4;</code>
       */
      public Builder setQueueCommand(boolean value) {
        bitField0_ |= 0x00000008;
        queueCommand_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Equivalent to shift+command.
       * </pre>
       *
       * <code>optional bool queue_command = 4;</code>
       */
      public Builder clearQueueCommand() {
        bitField0_ = (bitField0_ & ~0x00000008);
        queueCommand_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ActionSpatialUnitCommand)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionSpatialUnitCommand)
    private static final SC2APIProtocol.Spatial.ActionSpatialUnitCommand DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Spatial.ActionSpatialUnitCommand();
    }

    public static SC2APIProtocol.Spatial.ActionSpatialUnitCommand getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ActionSpatialUnitCommand>
        PARSER = new com.google.protobuf.AbstractParser<ActionSpatialUnitCommand>() {
      public ActionSpatialUnitCommand parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ActionSpatialUnitCommand(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ActionSpatialUnitCommand> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ActionSpatialUnitCommand> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Spatial.ActionSpatialUnitCommand getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActionSpatialCameraMoveOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ActionSpatialCameraMove)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Simulates a click on the minimap to move the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
     */
    boolean hasCenterMinimap();
    /**
     * <pre>
     * Simulates a click on the minimap to move the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
     */
    SC2APIProtocol.Common.PointI getCenterMinimap();
    /**
     * <pre>
     * Simulates a click on the minimap to move the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
     */
    SC2APIProtocol.Common.PointIOrBuilder getCenterMinimapOrBuilder();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ActionSpatialCameraMove}
   */
  public  static final class ActionSpatialCameraMove extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ActionSpatialCameraMove)
      ActionSpatialCameraMoveOrBuilder {
    // Use ActionSpatialCameraMove.newBuilder() to construct.
    private ActionSpatialCameraMove(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ActionSpatialCameraMove() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ActionSpatialCameraMove(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Common.PointI.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = centerMinimap_.toBuilder();
              }
              centerMinimap_ = input.readMessage(SC2APIProtocol.Common.PointI.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(centerMinimap_);
                centerMinimap_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialCameraMove_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialCameraMove_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Spatial.ActionSpatialCameraMove.class, SC2APIProtocol.Spatial.ActionSpatialCameraMove.Builder.class);
    }

    private int bitField0_;
    public static final int CENTER_MINIMAP_FIELD_NUMBER = 1;
    private SC2APIProtocol.Common.PointI centerMinimap_;
    /**
     * <pre>
     * Simulates a click on the minimap to move the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
     */
    public boolean hasCenterMinimap() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Simulates a click on the minimap to move the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
     */
    public SC2APIProtocol.Common.PointI getCenterMinimap() {
      return centerMinimap_ == null ? SC2APIProtocol.Common.PointI.getDefaultInstance() : centerMinimap_;
    }
    /**
     * <pre>
     * Simulates a click on the minimap to move the camera.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
     */
    public SC2APIProtocol.Common.PointIOrBuilder getCenterMinimapOrBuilder() {
      return centerMinimap_ == null ? SC2APIProtocol.Common.PointI.getDefaultInstance() : centerMinimap_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getCenterMinimap());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCenterMinimap());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Spatial.ActionSpatialCameraMove)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Spatial.ActionSpatialCameraMove other = (SC2APIProtocol.Spatial.ActionSpatialCameraMove) obj;

      boolean result = true;
      result = result && (hasCenterMinimap() == other.hasCenterMinimap());
      if (hasCenterMinimap()) {
        result = result && getCenterMinimap()
            .equals(other.getCenterMinimap());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasCenterMinimap()) {
        hash = (37 * hash) + CENTER_MINIMAP_FIELD_NUMBER;
        hash = (53 * hash) + getCenterMinimap().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Spatial.ActionSpatialCameraMove prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ActionSpatialCameraMove}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ActionSpatialCameraMove)
        SC2APIProtocol.Spatial.ActionSpatialCameraMoveOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialCameraMove_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialCameraMove_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Spatial.ActionSpatialCameraMove.class, SC2APIProtocol.Spatial.ActionSpatialCameraMove.Builder.class);
      }

      // Construct using SC2APIProtocol.Spatial.ActionSpatialCameraMove.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCenterMinimapFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (centerMinimapBuilder_ == null) {
          centerMinimap_ = null;
        } else {
          centerMinimapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialCameraMove_descriptor;
      }

      public SC2APIProtocol.Spatial.ActionSpatialCameraMove getDefaultInstanceForType() {
        return SC2APIProtocol.Spatial.ActionSpatialCameraMove.getDefaultInstance();
      }

      public SC2APIProtocol.Spatial.ActionSpatialCameraMove build() {
        SC2APIProtocol.Spatial.ActionSpatialCameraMove result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Spatial.ActionSpatialCameraMove buildPartial() {
        SC2APIProtocol.Spatial.ActionSpatialCameraMove result = new SC2APIProtocol.Spatial.ActionSpatialCameraMove(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (centerMinimapBuilder_ == null) {
          result.centerMinimap_ = centerMinimap_;
        } else {
          result.centerMinimap_ = centerMinimapBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Spatial.ActionSpatialCameraMove) {
          return mergeFrom((SC2APIProtocol.Spatial.ActionSpatialCameraMove)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Spatial.ActionSpatialCameraMove other) {
        if (other == SC2APIProtocol.Spatial.ActionSpatialCameraMove.getDefaultInstance()) return this;
        if (other.hasCenterMinimap()) {
          mergeCenterMinimap(other.getCenterMinimap());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Spatial.ActionSpatialCameraMove parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Spatial.ActionSpatialCameraMove) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Common.PointI centerMinimap_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder> centerMinimapBuilder_;
      /**
       * <pre>
       * Simulates a click on the minimap to move the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
       */
      public boolean hasCenterMinimap() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Simulates a click on the minimap to move the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
       */
      public SC2APIProtocol.Common.PointI getCenterMinimap() {
        if (centerMinimapBuilder_ == null) {
          return centerMinimap_ == null ? SC2APIProtocol.Common.PointI.getDefaultInstance() : centerMinimap_;
        } else {
          return centerMinimapBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Simulates a click on the minimap to move the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
       */
      public Builder setCenterMinimap(SC2APIProtocol.Common.PointI value) {
        if (centerMinimapBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          centerMinimap_ = value;
          onChanged();
        } else {
          centerMinimapBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Simulates a click on the minimap to move the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
       */
      public Builder setCenterMinimap(
          SC2APIProtocol.Common.PointI.Builder builderForValue) {
        if (centerMinimapBuilder_ == null) {
          centerMinimap_ = builderForValue.build();
          onChanged();
        } else {
          centerMinimapBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Simulates a click on the minimap to move the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
       */
      public Builder mergeCenterMinimap(SC2APIProtocol.Common.PointI value) {
        if (centerMinimapBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              centerMinimap_ != null &&
              centerMinimap_ != SC2APIProtocol.Common.PointI.getDefaultInstance()) {
            centerMinimap_ =
              SC2APIProtocol.Common.PointI.newBuilder(centerMinimap_).mergeFrom(value).buildPartial();
          } else {
            centerMinimap_ = value;
          }
          onChanged();
        } else {
          centerMinimapBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Simulates a click on the minimap to move the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
       */
      public Builder clearCenterMinimap() {
        if (centerMinimapBuilder_ == null) {
          centerMinimap_ = null;
          onChanged();
        } else {
          centerMinimapBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * Simulates a click on the minimap to move the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
       */
      public SC2APIProtocol.Common.PointI.Builder getCenterMinimapBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCenterMinimapFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Simulates a click on the minimap to move the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
       */
      public SC2APIProtocol.Common.PointIOrBuilder getCenterMinimapOrBuilder() {
        if (centerMinimapBuilder_ != null) {
          return centerMinimapBuilder_.getMessageOrBuilder();
        } else {
          return centerMinimap_ == null ?
              SC2APIProtocol.Common.PointI.getDefaultInstance() : centerMinimap_;
        }
      }
      /**
       * <pre>
       * Simulates a click on the minimap to move the camera.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.PointI center_minimap = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder> 
          getCenterMinimapFieldBuilder() {
        if (centerMinimapBuilder_ == null) {
          centerMinimapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder>(
                  getCenterMinimap(),
                  getParentForChildren(),
                  isClean());
          centerMinimap_ = null;
        }
        return centerMinimapBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ActionSpatialCameraMove)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionSpatialCameraMove)
    private static final SC2APIProtocol.Spatial.ActionSpatialCameraMove DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Spatial.ActionSpatialCameraMove();
    }

    public static SC2APIProtocol.Spatial.ActionSpatialCameraMove getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ActionSpatialCameraMove>
        PARSER = new com.google.protobuf.AbstractParser<ActionSpatialCameraMove>() {
      public ActionSpatialCameraMove parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ActionSpatialCameraMove(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ActionSpatialCameraMove> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ActionSpatialCameraMove> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Spatial.ActionSpatialCameraMove getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActionSpatialUnitSelectionPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
     */
    boolean hasSelectionScreenCoord();
    /**
     * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
     */
    SC2APIProtocol.Common.PointI getSelectionScreenCoord();
    /**
     * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
     */
    SC2APIProtocol.Common.PointIOrBuilder getSelectionScreenCoordOrBuilder();

    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;</code>
     */
    SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type getType();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ActionSpatialUnitSelectionPoint}
   */
  public  static final class ActionSpatialUnitSelectionPoint extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
      ActionSpatialUnitSelectionPointOrBuilder {
    // Use ActionSpatialUnitSelectionPoint.newBuilder() to construct.
    private ActionSpatialUnitSelectionPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ActionSpatialUnitSelectionPoint() {
      type_ = 1;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ActionSpatialUnitSelectionPoint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Common.PointI.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = selectionScreenCoord_.toBuilder();
              }
              selectionScreenCoord_ = input.readMessage(SC2APIProtocol.Common.PointI.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(selectionScreenCoord_);
                selectionScreenCoord_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type value = SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = rawValue;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitSelectionPoint_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitSelectionPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.class, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Builder.class);
    }

    /**
     * Protobuf enum {@code SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Equivalent to normal click. Changes selection to unit.
       * </pre>
       *
       * <code>Select = 1;</code>
       */
      Select(1),
      /**
       * <pre>
       * Equivalent to shift+click. Toggle selection of unit.
       * </pre>
       *
       * <code>Toggle = 2;</code>
       */
      Toggle(2),
      /**
       * <pre>
       * Equivalent to control+click. Selects all units of a given type.
       * </pre>
       *
       * <code>AllType = 3;</code>
       */
      AllType(3),
      /**
       * <pre>
       * Equivalent to shift+control+click. Selects all units of a given type.
       * </pre>
       *
       * <code>AddAllType = 4;</code>
       */
      AddAllType(4),
      ;

      /**
       * <pre>
       * Equivalent to normal click. Changes selection to unit.
       * </pre>
       *
       * <code>Select = 1;</code>
       */
      public static final int Select_VALUE = 1;
      /**
       * <pre>
       * Equivalent to shift+click. Toggle selection of unit.
       * </pre>
       *
       * <code>Toggle = 2;</code>
       */
      public static final int Toggle_VALUE = 2;
      /**
       * <pre>
       * Equivalent to control+click. Selects all units of a given type.
       * </pre>
       *
       * <code>AllType = 3;</code>
       */
      public static final int AllType_VALUE = 3;
      /**
       * <pre>
       * Equivalent to shift+control+click. Selects all units of a given type.
       * </pre>
       *
       * <code>AddAllType = 4;</code>
       */
      public static final int AddAllType_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      public static Type forNumber(int value) {
        switch (value) {
          case 1: return Select;
          case 2: return Toggle;
          case 3: return AllType;
          case 4: return AddAllType;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type)
    }

    private int bitField0_;
    public static final int SELECTION_SCREEN_COORD_FIELD_NUMBER = 1;
    private SC2APIProtocol.Common.PointI selectionScreenCoord_;
    /**
     * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
     */
    public boolean hasSelectionScreenCoord() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
     */
    public SC2APIProtocol.Common.PointI getSelectionScreenCoord() {
      return selectionScreenCoord_ == null ? SC2APIProtocol.Common.PointI.getDefaultInstance() : selectionScreenCoord_;
    }
    /**
     * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
     */
    public SC2APIProtocol.Common.PointIOrBuilder getSelectionScreenCoordOrBuilder() {
      return selectionScreenCoord_ == null ? SC2APIProtocol.Common.PointI.getDefaultInstance() : selectionScreenCoord_;
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;</code>
     */
    public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type getType() {
      SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type result = SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type.valueOf(type_);
      return result == null ? SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type.Select : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getSelectionScreenCoord());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, type_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getSelectionScreenCoord());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint other = (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) obj;

      boolean result = true;
      result = result && (hasSelectionScreenCoord() == other.hasSelectionScreenCoord());
      if (hasSelectionScreenCoord()) {
        result = result && getSelectionScreenCoord()
            .equals(other.getSelectionScreenCoord());
      }
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && type_ == other.type_;
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasSelectionScreenCoord()) {
        hash = (37 * hash) + SELECTION_SCREEN_COORD_FIELD_NUMBER;
        hash = (53 * hash) + getSelectionScreenCoord().hashCode();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ActionSpatialUnitSelectionPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
        SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitSelectionPoint_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitSelectionPoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.class, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Builder.class);
      }

      // Construct using SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSelectionScreenCoordFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (selectionScreenCoordBuilder_ == null) {
          selectionScreenCoord_ = null;
        } else {
          selectionScreenCoordBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitSelectionPoint_descriptor;
      }

      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint getDefaultInstanceForType() {
        return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.getDefaultInstance();
      }

      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint build() {
        SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint buildPartial() {
        SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint result = new SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (selectionScreenCoordBuilder_ == null) {
          result.selectionScreenCoord_ = selectionScreenCoord_;
        } else {
          result.selectionScreenCoord_ = selectionScreenCoordBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) {
          return mergeFrom((SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint other) {
        if (other == SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.getDefaultInstance()) return this;
        if (other.hasSelectionScreenCoord()) {
          mergeSelectionScreenCoord(other.getSelectionScreenCoord());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Common.PointI selectionScreenCoord_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder> selectionScreenCoordBuilder_;
      /**
       * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
       */
      public boolean hasSelectionScreenCoord() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
       */
      public SC2APIProtocol.Common.PointI getSelectionScreenCoord() {
        if (selectionScreenCoordBuilder_ == null) {
          return selectionScreenCoord_ == null ? SC2APIProtocol.Common.PointI.getDefaultInstance() : selectionScreenCoord_;
        } else {
          return selectionScreenCoordBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
       */
      public Builder setSelectionScreenCoord(SC2APIProtocol.Common.PointI value) {
        if (selectionScreenCoordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          selectionScreenCoord_ = value;
          onChanged();
        } else {
          selectionScreenCoordBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
       */
      public Builder setSelectionScreenCoord(
          SC2APIProtocol.Common.PointI.Builder builderForValue) {
        if (selectionScreenCoordBuilder_ == null) {
          selectionScreenCoord_ = builderForValue.build();
          onChanged();
        } else {
          selectionScreenCoordBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
       */
      public Builder mergeSelectionScreenCoord(SC2APIProtocol.Common.PointI value) {
        if (selectionScreenCoordBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              selectionScreenCoord_ != null &&
              selectionScreenCoord_ != SC2APIProtocol.Common.PointI.getDefaultInstance()) {
            selectionScreenCoord_ =
              SC2APIProtocol.Common.PointI.newBuilder(selectionScreenCoord_).mergeFrom(value).buildPartial();
          } else {
            selectionScreenCoord_ = value;
          }
          onChanged();
        } else {
          selectionScreenCoordBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
       */
      public Builder clearSelectionScreenCoord() {
        if (selectionScreenCoordBuilder_ == null) {
          selectionScreenCoord_ = null;
          onChanged();
        } else {
          selectionScreenCoordBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
       */
      public SC2APIProtocol.Common.PointI.Builder getSelectionScreenCoordBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSelectionScreenCoordFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
       */
      public SC2APIProtocol.Common.PointIOrBuilder getSelectionScreenCoordOrBuilder() {
        if (selectionScreenCoordBuilder_ != null) {
          return selectionScreenCoordBuilder_.getMessageOrBuilder();
        } else {
          return selectionScreenCoord_ == null ?
              SC2APIProtocol.Common.PointI.getDefaultInstance() : selectionScreenCoord_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.PointI selection_screen_coord = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder> 
          getSelectionScreenCoordFieldBuilder() {
        if (selectionScreenCoordBuilder_ == null) {
          selectionScreenCoordBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.PointI, SC2APIProtocol.Common.PointI.Builder, SC2APIProtocol.Common.PointIOrBuilder>(
                  getSelectionScreenCoord(),
                  getParentForChildren(),
                  isClean());
          selectionScreenCoord_ = null;
        }
        return selectionScreenCoordBuilder_;
      }

      private int type_ = 1;
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;</code>
       */
      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type getType() {
        SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type result = SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type.valueOf(type_);
        return result == null ? SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type.Select : result;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;</code>
       */
      public Builder setType(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 1;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
    private static final SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint();
    }

    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ActionSpatialUnitSelectionPoint>
        PARSER = new com.google.protobuf.AbstractParser<ActionSpatialUnitSelectionPoint>() {
      public ActionSpatialUnitSelectionPoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ActionSpatialUnitSelectionPoint(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ActionSpatialUnitSelectionPoint> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ActionSpatialUnitSelectionPoint> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionPoint getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActionSpatialUnitSelectionRectOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ActionSpatialUnitSelectionRect)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Eventually this should not be an array, but a single field (multiple would be cheating).
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
     */
    java.util.List<SC2APIProtocol.Common.RectangleI> 
        getSelectionScreenCoordList();
    /**
     * <pre>
     * Eventually this should not be an array, but a single field (multiple would be cheating).
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
     */
    SC2APIProtocol.Common.RectangleI getSelectionScreenCoord(int index);
    /**
     * <pre>
     * Eventually this should not be an array, but a single field (multiple would be cheating).
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
     */
    int getSelectionScreenCoordCount();
    /**
     * <pre>
     * Eventually this should not be an array, but a single field (multiple would be cheating).
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
     */
    java.util.List<? extends SC2APIProtocol.Common.RectangleIOrBuilder> 
        getSelectionScreenCoordOrBuilderList();
    /**
     * <pre>
     * Eventually this should not be an array, but a single field (multiple would be cheating).
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
     */
    SC2APIProtocol.Common.RectangleIOrBuilder getSelectionScreenCoordOrBuilder(
        int index);

    /**
     * <pre>
     * Equivalent to shift+drag. Adds units to selection.
     * </pre>
     *
     * <code>optional bool selection_add = 2;</code>
     */
    boolean hasSelectionAdd();
    /**
     * <pre>
     * Equivalent to shift+drag. Adds units to selection.
     * </pre>
     *
     * <code>optional bool selection_add = 2;</code>
     */
    boolean getSelectionAdd();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ActionSpatialUnitSelectionRect}
   */
  public  static final class ActionSpatialUnitSelectionRect extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ActionSpatialUnitSelectionRect)
      ActionSpatialUnitSelectionRectOrBuilder {
    // Use ActionSpatialUnitSelectionRect.newBuilder() to construct.
    private ActionSpatialUnitSelectionRect(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ActionSpatialUnitSelectionRect() {
      selectionScreenCoord_ = java.util.Collections.emptyList();
      selectionAdd_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ActionSpatialUnitSelectionRect(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                selectionScreenCoord_ = new java.util.ArrayList<SC2APIProtocol.Common.RectangleI>();
                mutable_bitField0_ |= 0x00000001;
              }
              selectionScreenCoord_.add(
                  input.readMessage(SC2APIProtocol.Common.RectangleI.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              selectionAdd_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          selectionScreenCoord_ = java.util.Collections.unmodifiableList(selectionScreenCoord_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitSelectionRect_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitSelectionRect_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.class, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.Builder.class);
    }

    private int bitField0_;
    public static final int SELECTION_SCREEN_COORD_FIELD_NUMBER = 1;
    private java.util.List<SC2APIProtocol.Common.RectangleI> selectionScreenCoord_;
    /**
     * <pre>
     * Eventually this should not be an array, but a single field (multiple would be cheating).
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
     */
    public java.util.List<SC2APIProtocol.Common.RectangleI> getSelectionScreenCoordList() {
      return selectionScreenCoord_;
    }
    /**
     * <pre>
     * Eventually this should not be an array, but a single field (multiple would be cheating).
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
     */
    public java.util.List<? extends SC2APIProtocol.Common.RectangleIOrBuilder> 
        getSelectionScreenCoordOrBuilderList() {
      return selectionScreenCoord_;
    }
    /**
     * <pre>
     * Eventually this should not be an array, but a single field (multiple would be cheating).
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
     */
    public int getSelectionScreenCoordCount() {
      return selectionScreenCoord_.size();
    }
    /**
     * <pre>
     * Eventually this should not be an array, but a single field (multiple would be cheating).
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
     */
    public SC2APIProtocol.Common.RectangleI getSelectionScreenCoord(int index) {
      return selectionScreenCoord_.get(index);
    }
    /**
     * <pre>
     * Eventually this should not be an array, but a single field (multiple would be cheating).
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
     */
    public SC2APIProtocol.Common.RectangleIOrBuilder getSelectionScreenCoordOrBuilder(
        int index) {
      return selectionScreenCoord_.get(index);
    }

    public static final int SELECTION_ADD_FIELD_NUMBER = 2;
    private boolean selectionAdd_;
    /**
     * <pre>
     * Equivalent to shift+drag. Adds units to selection.
     * </pre>
     *
     * <code>optional bool selection_add = 2;</code>
     */
    public boolean hasSelectionAdd() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Equivalent to shift+drag. Adds units to selection.
     * </pre>
     *
     * <code>optional bool selection_add = 2;</code>
     */
    public boolean getSelectionAdd() {
      return selectionAdd_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < selectionScreenCoord_.size(); i++) {
        output.writeMessage(1, selectionScreenCoord_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(2, selectionAdd_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < selectionScreenCoord_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, selectionScreenCoord_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, selectionAdd_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect other = (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) obj;

      boolean result = true;
      result = result && getSelectionScreenCoordList()
          .equals(other.getSelectionScreenCoordList());
      result = result && (hasSelectionAdd() == other.hasSelectionAdd());
      if (hasSelectionAdd()) {
        result = result && (getSelectionAdd()
            == other.getSelectionAdd());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getSelectionScreenCoordCount() > 0) {
        hash = (37 * hash) + SELECTION_SCREEN_COORD_FIELD_NUMBER;
        hash = (53 * hash) + getSelectionScreenCoordList().hashCode();
      }
      if (hasSelectionAdd()) {
        hash = (37 * hash) + SELECTION_ADD_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSelectionAdd());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ActionSpatialUnitSelectionRect}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ActionSpatialUnitSelectionRect)
        SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRectOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitSelectionRect_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitSelectionRect_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.class, SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.Builder.class);
      }

      // Construct using SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSelectionScreenCoordFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (selectionScreenCoordBuilder_ == null) {
          selectionScreenCoord_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          selectionScreenCoordBuilder_.clear();
        }
        selectionAdd_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Spatial.internal_static_SC2APIProtocol_ActionSpatialUnitSelectionRect_descriptor;
      }

      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect getDefaultInstanceForType() {
        return SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.getDefaultInstance();
      }

      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect build() {
        SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect buildPartial() {
        SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect result = new SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (selectionScreenCoordBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            selectionScreenCoord_ = java.util.Collections.unmodifiableList(selectionScreenCoord_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.selectionScreenCoord_ = selectionScreenCoord_;
        } else {
          result.selectionScreenCoord_ = selectionScreenCoordBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.selectionAdd_ = selectionAdd_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) {
          return mergeFrom((SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect other) {
        if (other == SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect.getDefaultInstance()) return this;
        if (selectionScreenCoordBuilder_ == null) {
          if (!other.selectionScreenCoord_.isEmpty()) {
            if (selectionScreenCoord_.isEmpty()) {
              selectionScreenCoord_ = other.selectionScreenCoord_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSelectionScreenCoordIsMutable();
              selectionScreenCoord_.addAll(other.selectionScreenCoord_);
            }
            onChanged();
          }
        } else {
          if (!other.selectionScreenCoord_.isEmpty()) {
            if (selectionScreenCoordBuilder_.isEmpty()) {
              selectionScreenCoordBuilder_.dispose();
              selectionScreenCoordBuilder_ = null;
              selectionScreenCoord_ = other.selectionScreenCoord_;
              bitField0_ = (bitField0_ & ~0x00000001);
              selectionScreenCoordBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSelectionScreenCoordFieldBuilder() : null;
            } else {
              selectionScreenCoordBuilder_.addAllMessages(other.selectionScreenCoord_);
            }
          }
        }
        if (other.hasSelectionAdd()) {
          setSelectionAdd(other.getSelectionAdd());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<SC2APIProtocol.Common.RectangleI> selectionScreenCoord_ =
        java.util.Collections.emptyList();
      private void ensureSelectionScreenCoordIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          selectionScreenCoord_ = new java.util.ArrayList<SC2APIProtocol.Common.RectangleI>(selectionScreenCoord_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Common.RectangleI, SC2APIProtocol.Common.RectangleI.Builder, SC2APIProtocol.Common.RectangleIOrBuilder> selectionScreenCoordBuilder_;

      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public java.util.List<SC2APIProtocol.Common.RectangleI> getSelectionScreenCoordList() {
        if (selectionScreenCoordBuilder_ == null) {
          return java.util.Collections.unmodifiableList(selectionScreenCoord_);
        } else {
          return selectionScreenCoordBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public int getSelectionScreenCoordCount() {
        if (selectionScreenCoordBuilder_ == null) {
          return selectionScreenCoord_.size();
        } else {
          return selectionScreenCoordBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public SC2APIProtocol.Common.RectangleI getSelectionScreenCoord(int index) {
        if (selectionScreenCoordBuilder_ == null) {
          return selectionScreenCoord_.get(index);
        } else {
          return selectionScreenCoordBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public Builder setSelectionScreenCoord(
          int index, SC2APIProtocol.Common.RectangleI value) {
        if (selectionScreenCoordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectionScreenCoordIsMutable();
          selectionScreenCoord_.set(index, value);
          onChanged();
        } else {
          selectionScreenCoordBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public Builder setSelectionScreenCoord(
          int index, SC2APIProtocol.Common.RectangleI.Builder builderForValue) {
        if (selectionScreenCoordBuilder_ == null) {
          ensureSelectionScreenCoordIsMutable();
          selectionScreenCoord_.set(index, builderForValue.build());
          onChanged();
        } else {
          selectionScreenCoordBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public Builder addSelectionScreenCoord(SC2APIProtocol.Common.RectangleI value) {
        if (selectionScreenCoordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectionScreenCoordIsMutable();
          selectionScreenCoord_.add(value);
          onChanged();
        } else {
          selectionScreenCoordBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public Builder addSelectionScreenCoord(
          int index, SC2APIProtocol.Common.RectangleI value) {
        if (selectionScreenCoordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelectionScreenCoordIsMutable();
          selectionScreenCoord_.add(index, value);
          onChanged();
        } else {
          selectionScreenCoordBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public Builder addSelectionScreenCoord(
          SC2APIProtocol.Common.RectangleI.Builder builderForValue) {
        if (selectionScreenCoordBuilder_ == null) {
          ensureSelectionScreenCoordIsMutable();
          selectionScreenCoord_.add(builderForValue.build());
          onChanged();
        } else {
          selectionScreenCoordBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public Builder addSelectionScreenCoord(
          int index, SC2APIProtocol.Common.RectangleI.Builder builderForValue) {
        if (selectionScreenCoordBuilder_ == null) {
          ensureSelectionScreenCoordIsMutable();
          selectionScreenCoord_.add(index, builderForValue.build());
          onChanged();
        } else {
          selectionScreenCoordBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public Builder addAllSelectionScreenCoord(
          java.lang.Iterable<? extends SC2APIProtocol.Common.RectangleI> values) {
        if (selectionScreenCoordBuilder_ == null) {
          ensureSelectionScreenCoordIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, selectionScreenCoord_);
          onChanged();
        } else {
          selectionScreenCoordBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public Builder clearSelectionScreenCoord() {
        if (selectionScreenCoordBuilder_ == null) {
          selectionScreenCoord_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          selectionScreenCoordBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public Builder removeSelectionScreenCoord(int index) {
        if (selectionScreenCoordBuilder_ == null) {
          ensureSelectionScreenCoordIsMutable();
          selectionScreenCoord_.remove(index);
          onChanged();
        } else {
          selectionScreenCoordBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public SC2APIProtocol.Common.RectangleI.Builder getSelectionScreenCoordBuilder(
          int index) {
        return getSelectionScreenCoordFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public SC2APIProtocol.Common.RectangleIOrBuilder getSelectionScreenCoordOrBuilder(
          int index) {
        if (selectionScreenCoordBuilder_ == null) {
          return selectionScreenCoord_.get(index);  } else {
          return selectionScreenCoordBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public java.util.List<? extends SC2APIProtocol.Common.RectangleIOrBuilder> 
           getSelectionScreenCoordOrBuilderList() {
        if (selectionScreenCoordBuilder_ != null) {
          return selectionScreenCoordBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(selectionScreenCoord_);
        }
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public SC2APIProtocol.Common.RectangleI.Builder addSelectionScreenCoordBuilder() {
        return getSelectionScreenCoordFieldBuilder().addBuilder(
            SC2APIProtocol.Common.RectangleI.getDefaultInstance());
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public SC2APIProtocol.Common.RectangleI.Builder addSelectionScreenCoordBuilder(
          int index) {
        return getSelectionScreenCoordFieldBuilder().addBuilder(
            index, SC2APIProtocol.Common.RectangleI.getDefaultInstance());
      }
      /**
       * <pre>
       * Eventually this should not be an array, but a single field (multiple would be cheating).
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;</code>
       */
      public java.util.List<SC2APIProtocol.Common.RectangleI.Builder> 
           getSelectionScreenCoordBuilderList() {
        return getSelectionScreenCoordFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Common.RectangleI, SC2APIProtocol.Common.RectangleI.Builder, SC2APIProtocol.Common.RectangleIOrBuilder> 
          getSelectionScreenCoordFieldBuilder() {
        if (selectionScreenCoordBuilder_ == null) {
          selectionScreenCoordBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              SC2APIProtocol.Common.RectangleI, SC2APIProtocol.Common.RectangleI.Builder, SC2APIProtocol.Common.RectangleIOrBuilder>(
                  selectionScreenCoord_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          selectionScreenCoord_ = null;
        }
        return selectionScreenCoordBuilder_;
      }

      private boolean selectionAdd_ ;
      /**
       * <pre>
       * Equivalent to shift+drag. Adds units to selection.
       * </pre>
       *
       * <code>optional bool selection_add = 2;</code>
       */
      public boolean hasSelectionAdd() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Equivalent to shift+drag. Adds units to selection.
       * </pre>
       *
       * <code>optional bool selection_add = 2;</code>
       */
      public boolean getSelectionAdd() {
        return selectionAdd_;
      }
      /**
       * <pre>
       * Equivalent to shift+drag. Adds units to selection.
       * </pre>
       *
       * <code>optional bool selection_add = 2;</code>
       */
      public Builder setSelectionAdd(boolean value) {
        bitField0_ |= 0x00000002;
        selectionAdd_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Equivalent to shift+drag. Adds units to selection.
       * </pre>
       *
       * <code>optional bool selection_add = 2;</code>
       */
      public Builder clearSelectionAdd() {
        bitField0_ = (bitField0_ & ~0x00000002);
        selectionAdd_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ActionSpatialUnitSelectionRect)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionSpatialUnitSelectionRect)
    private static final SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect();
    }

    public static SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ActionSpatialUnitSelectionRect>
        PARSER = new com.google.protobuf.AbstractParser<ActionSpatialUnitSelectionRect>() {
      public ActionSpatialUnitSelectionRect parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ActionSpatialUnitSelectionRect(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ActionSpatialUnitSelectionRect> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ActionSpatialUnitSelectionRect> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Spatial.ActionSpatialUnitSelectionRect getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ObservationFeatureLayer_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ObservationFeatureLayer_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_FeatureLayers_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_FeatureLayers_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_FeatureLayersMinimap_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_FeatureLayersMinimap_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ObservationRender_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ObservationRender_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ActionSpatial_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ActionSpatial_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ActionSpatialUnitCommand_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ActionSpatialUnitCommand_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ActionSpatialCameraMove_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ActionSpatialCameraMove_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ActionSpatialUnitSelectionPoint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ActionSpatialUnitSelectionPoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ActionSpatialUnitSelectionRect_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ActionSpatialUnitSelectionRect_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rspatial.proto\022\016SC2APIProtocol\032\014common." +
      "proto\"\210\001\n\027ObservationFeatureLayer\022.\n\007ren" +
      "ders\030\001 \001(\0132\035.SC2APIProtocol.FeatureLayer" +
      "s\022=\n\017minimap_renders\030\002 \001(\0132$.SC2APIProto" +
      "col.FeatureLayersMinimap\"\266\005\n\rFeatureLaye" +
      "rs\022-\n\nheight_map\030\001 \001(\0132\031.SC2APIProtocol." +
      "ImageData\0221\n\016visibility_map\030\002 \001(\0132\031.SC2A" +
      "PIProtocol.ImageData\022(\n\005creep\030\003 \001(\0132\031.SC" +
      "2APIProtocol.ImageData\022(\n\005power\030\004 \001(\0132\031." +
      "SC2APIProtocol.ImageData\022,\n\tplayer_id\030\005 ",
      "\001(\0132\031.SC2APIProtocol.ImageData\022,\n\tunit_t" +
      "ype\030\006 \001(\0132\031.SC2APIProtocol.ImageData\022+\n\010" +
      "selected\030\007 \001(\0132\031.SC2APIProtocol.ImageDat" +
      "a\0222\n\017unit_hit_points\030\010 \001(\0132\031.SC2APIProto" +
      "col.ImageData\0228\n\025unit_hit_points_ratio\030\021" +
      " \001(\0132\031.SC2APIProtocol.ImageData\022.\n\013unit_" +
      "energy\030\t \001(\0132\031.SC2APIProtocol.ImageData\022" +
      "/\n\014unit_shields\030\n \001(\0132\031.SC2APIProtocol.I" +
      "mageData\0222\n\017player_relative\030\013 \001(\0132\031.SC2A" +
      "PIProtocol.ImageData\0222\n\017unit_density_aa\030",
      "\016 \001(\0132\031.SC2APIProtocol.ImageData\022/\n\014unit" +
      "_density\030\017 \001(\0132\031.SC2APIProtocol.ImageDat" +
      "a\"\212\003\n\024FeatureLayersMinimap\022-\n\nheight_map" +
      "\030\001 \001(\0132\031.SC2APIProtocol.ImageData\0221\n\016vis" +
      "ibility_map\030\002 \001(\0132\031.SC2APIProtocol.Image" +
      "Data\022(\n\005creep\030\003 \001(\0132\031.SC2APIProtocol.Ima" +
      "geData\022)\n\006camera\030\004 \001(\0132\031.SC2APIProtocol." +
      "ImageData\022,\n\tplayer_id\030\005 \001(\0132\031.SC2APIPro" +
      "tocol.ImageData\0222\n\017player_relative\030\006 \001(\013" +
      "2\031.SC2APIProtocol.ImageData\022+\n\010selected\030",
      "\007 \001(\0132\031.SC2APIProtocol.ImageData\022,\n\tunit" +
      "_type\030\010 \001(\0132\031.SC2APIProtocol.ImageData\"g" +
      "\n\021ObservationRender\022&\n\003map\030\001 \001(\0132\031.SC2AP" +
      "IProtocol.ImageData\022*\n\007minimap\030\002 \001(\0132\031.S" +
      "C2APIProtocol.ImageData\"\273\002\n\rActionSpatia" +
      "l\022@\n\014unit_command\030\001 \001(\0132(.SC2APIProtocol" +
      ".ActionSpatialUnitCommandH\000\022>\n\013camera_mo" +
      "ve\030\002 \001(\0132\'.SC2APIProtocol.ActionSpatialC" +
      "ameraMoveH\000\022O\n\024unit_selection_point\030\003 \001(" +
      "\0132/.SC2APIProtocol.ActionSpatialUnitSele",
      "ctionPointH\000\022M\n\023unit_selection_rect\030\004 \001(" +
      "\0132..SC2APIProtocol.ActionSpatialUnitSele" +
      "ctionRectH\000B\010\n\006action\"\276\001\n\030ActionSpatialU" +
      "nitCommand\022\022\n\nability_id\030\001 \001(\005\0225\n\023target" +
      "_screen_coord\030\002 \001(\0132\026.SC2APIProtocol.Poi" +
      "ntIH\000\0226\n\024target_minimap_coord\030\003 \001(\0132\026.SC" +
      "2APIProtocol.PointIH\000\022\025\n\rqueue_command\030\004" +
      " \001(\010B\010\n\006target\"I\n\027ActionSpatialCameraMov" +
      "e\022.\n\016center_minimap\030\001 \001(\0132\026.SC2APIProtoc" +
      "ol.PointI\"\332\001\n\037ActionSpatialUnitSelection",
      "Point\0226\n\026selection_screen_coord\030\001 \001(\0132\026." +
      "SC2APIProtocol.PointI\022B\n\004type\030\002 \001(\01624.SC" +
      "2APIProtocol.ActionSpatialUnitSelectionP" +
      "oint.Type\";\n\004Type\022\n\n\006Select\020\001\022\n\n\006Toggle\020" +
      "\002\022\013\n\007AllType\020\003\022\016\n\nAddAllType\020\004\"s\n\036Action" +
      "SpatialUnitSelectionRect\022:\n\026selection_sc" +
      "reen_coord\030\001 \003(\0132\032.SC2APIProtocol.Rectan" +
      "gleI\022\025\n\rselection_add\030\002 \001(\010"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          SC2APIProtocol.Common.getDescriptor(),
        }, assigner);
    internal_static_SC2APIProtocol_ObservationFeatureLayer_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_SC2APIProtocol_ObservationFeatureLayer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ObservationFeatureLayer_descriptor,
        new java.lang.String[] { "Renders", "MinimapRenders", });
    internal_static_SC2APIProtocol_FeatureLayers_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_SC2APIProtocol_FeatureLayers_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_FeatureLayers_descriptor,
        new java.lang.String[] { "HeightMap", "VisibilityMap", "Creep", "Power", "PlayerId", "UnitType", "Selected", "UnitHitPoints", "UnitHitPointsRatio", "UnitEnergy", "UnitShields", "PlayerRelative", "UnitDensityAa", "UnitDensity", });
    internal_static_SC2APIProtocol_FeatureLayersMinimap_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_SC2APIProtocol_FeatureLayersMinimap_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_FeatureLayersMinimap_descriptor,
        new java.lang.String[] { "HeightMap", "VisibilityMap", "Creep", "Camera", "PlayerId", "PlayerRelative", "Selected", "UnitType", });
    internal_static_SC2APIProtocol_ObservationRender_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_SC2APIProtocol_ObservationRender_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ObservationRender_descriptor,
        new java.lang.String[] { "Map", "Minimap", });
    internal_static_SC2APIProtocol_ActionSpatial_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_SC2APIProtocol_ActionSpatial_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ActionSpatial_descriptor,
        new java.lang.String[] { "UnitCommand", "CameraMove", "UnitSelectionPoint", "UnitSelectionRect", "Action", });
    internal_static_SC2APIProtocol_ActionSpatialUnitCommand_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_SC2APIProtocol_ActionSpatialUnitCommand_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ActionSpatialUnitCommand_descriptor,
        new java.lang.String[] { "AbilityId", "TargetScreenCoord", "TargetMinimapCoord", "QueueCommand", "Target", });
    internal_static_SC2APIProtocol_ActionSpatialCameraMove_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_SC2APIProtocol_ActionSpatialCameraMove_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ActionSpatialCameraMove_descriptor,
        new java.lang.String[] { "CenterMinimap", });
    internal_static_SC2APIProtocol_ActionSpatialUnitSelectionPoint_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_SC2APIProtocol_ActionSpatialUnitSelectionPoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ActionSpatialUnitSelectionPoint_descriptor,
        new java.lang.String[] { "SelectionScreenCoord", "Type", });
    internal_static_SC2APIProtocol_ActionSpatialUnitSelectionRect_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_SC2APIProtocol_ActionSpatialUnitSelectionRect_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ActionSpatialUnitSelectionRect_descriptor,
        new java.lang.String[] { "SelectionScreenCoord", "SelectionAdd", });
    SC2APIProtocol.Common.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
