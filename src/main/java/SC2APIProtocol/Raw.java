// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raw.proto

package SC2APIProtocol;

public final class Raw {
  private Raw() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code SC2APIProtocol.DisplayType}
   */
  public enum DisplayType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Fully visible
     * </pre>
     *
     * <code>Visible = 1;</code>
     */
    Visible(1),
    /**
     * <pre>
     * Dimmed version of unit left behind after entering fog of war
     * </pre>
     *
     * <code>Snapshot = 2;</code>
     */
    Snapshot(2),
    /**
     * <pre>
     * Fully hidden
     * </pre>
     *
     * <code>Hidden = 3;</code>
     */
    Hidden(3),
    ;

    /**
     * <pre>
     * Fully visible
     * </pre>
     *
     * <code>Visible = 1;</code>
     */
    public static final int Visible_VALUE = 1;
    /**
     * <pre>
     * Dimmed version of unit left behind after entering fog of war
     * </pre>
     *
     * <code>Snapshot = 2;</code>
     */
    public static final int Snapshot_VALUE = 2;
    /**
     * <pre>
     * Fully hidden
     * </pre>
     *
     * <code>Hidden = 3;</code>
     */
    public static final int Hidden_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DisplayType valueOf(int value) {
      return forNumber(value);
    }

    public static DisplayType forNumber(int value) {
      switch (value) {
        case 1: return Visible;
        case 2: return Snapshot;
        case 3: return Hidden;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DisplayType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DisplayType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DisplayType>() {
            public DisplayType findValueByNumber(int number) {
              return DisplayType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.getDescriptor().getEnumTypes().get(0);
    }

    private static final DisplayType[] VALUES = values();

    public static DisplayType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DisplayType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SC2APIProtocol.DisplayType)
  }

  /**
   * Protobuf enum {@code SC2APIProtocol.Alliance}
   */
  public enum Alliance
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>Self = 1;</code>
     */
    Self(1),
    /**
     * <code>Ally = 2;</code>
     */
    Ally(2),
    /**
     * <code>Neutral = 3;</code>
     */
    Neutral(3),
    /**
     * <code>Enemy = 4;</code>
     */
    Enemy(4),
    ;

    /**
     * <code>Self = 1;</code>
     */
    public static final int Self_VALUE = 1;
    /**
     * <code>Ally = 2;</code>
     */
    public static final int Ally_VALUE = 2;
    /**
     * <code>Neutral = 3;</code>
     */
    public static final int Neutral_VALUE = 3;
    /**
     * <code>Enemy = 4;</code>
     */
    public static final int Enemy_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Alliance valueOf(int value) {
      return forNumber(value);
    }

    public static Alliance forNumber(int value) {
      switch (value) {
        case 1: return Self;
        case 2: return Ally;
        case 3: return Neutral;
        case 4: return Enemy;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Alliance>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Alliance> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Alliance>() {
            public Alliance findValueByNumber(int number) {
              return Alliance.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.getDescriptor().getEnumTypes().get(1);
    }

    private static final Alliance[] VALUES = values();

    public static Alliance valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Alliance(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SC2APIProtocol.Alliance)
  }

  /**
   * Protobuf enum {@code SC2APIProtocol.CloakState}
   */
  public enum CloakState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>Cloaked = 1;</code>
     */
    Cloaked(1),
    /**
     * <code>CloakedDetected = 2;</code>
     */
    CloakedDetected(2),
    /**
     * <code>NotCloaked = 3;</code>
     */
    NotCloaked(3),
    ;

    /**
     * <code>Cloaked = 1;</code>
     */
    public static final int Cloaked_VALUE = 1;
    /**
     * <code>CloakedDetected = 2;</code>
     */
    public static final int CloakedDetected_VALUE = 2;
    /**
     * <code>NotCloaked = 3;</code>
     */
    public static final int NotCloaked_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CloakState valueOf(int value) {
      return forNumber(value);
    }

    public static CloakState forNumber(int value) {
      switch (value) {
        case 1: return Cloaked;
        case 2: return CloakedDetected;
        case 3: return NotCloaked;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CloakState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CloakState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CloakState>() {
            public CloakState findValueByNumber(int number) {
              return CloakState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.getDescriptor().getEnumTypes().get(2);
    }

    private static final CloakState[] VALUES = values();

    public static CloakState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CloakState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SC2APIProtocol.CloakState)
  }

  public interface StartRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.StartRaw)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Width and height of the map.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
     */
    boolean hasMapSize();
    /**
     * <pre>
     * Width and height of the map.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
     */
    SC2APIProtocol.Common.Size2DI getMapSize();
    /**
     * <pre>
     * Width and height of the map.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
     */
    SC2APIProtocol.Common.Size2DIOrBuilder getMapSizeOrBuilder();

    /**
     * <pre>
     * 1 byte bitmap of the pathing grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
     */
    boolean hasPathingGrid();
    /**
     * <pre>
     * 1 byte bitmap of the pathing grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
     */
    SC2APIProtocol.Common.ImageData getPathingGrid();
    /**
     * <pre>
     * 1 byte bitmap of the pathing grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getPathingGridOrBuilder();

    /**
     * <pre>
     * 1 byte bitmap of the terrain height.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
     */
    boolean hasTerrainHeight();
    /**
     * <pre>
     * 1 byte bitmap of the terrain height.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
     */
    SC2APIProtocol.Common.ImageData getTerrainHeight();
    /**
     * <pre>
     * 1 byte bitmap of the terrain height.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getTerrainHeightOrBuilder();

    /**
     * <pre>
     * 1 byte bitmap of the building placement grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
     */
    boolean hasPlacementGrid();
    /**
     * <pre>
     * 1 byte bitmap of the building placement grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
     */
    SC2APIProtocol.Common.ImageData getPlacementGrid();
    /**
     * <pre>
     * 1 byte bitmap of the building placement grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getPlacementGridOrBuilder();

    /**
     * <pre>
     * The playable cells.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
     */
    boolean hasPlayableArea();
    /**
     * <pre>
     * The playable cells.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
     */
    SC2APIProtocol.Common.RectangleI getPlayableArea();
    /**
     * <pre>
     * The playable cells.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
     */
    SC2APIProtocol.Common.RectangleIOrBuilder getPlayableAreaOrBuilder();

    /**
     * <pre>
     * Possible start locations for players.
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
     */
    java.util.List<SC2APIProtocol.Common.Point2D> 
        getStartLocationsList();
    /**
     * <pre>
     * Possible start locations for players.
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
     */
    SC2APIProtocol.Common.Point2D getStartLocations(int index);
    /**
     * <pre>
     * Possible start locations for players.
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
     */
    int getStartLocationsCount();
    /**
     * <pre>
     * Possible start locations for players.
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
     */
    java.util.List<? extends SC2APIProtocol.Common.Point2DOrBuilder> 
        getStartLocationsOrBuilderList();
    /**
     * <pre>
     * Possible start locations for players.
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
     */
    SC2APIProtocol.Common.Point2DOrBuilder getStartLocationsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code SC2APIProtocol.StartRaw}
   */
  public  static final class StartRaw extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.StartRaw)
      StartRawOrBuilder {
    // Use StartRaw.newBuilder() to construct.
    private StartRaw(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StartRaw() {
      startLocations_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StartRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Common.Size2DI.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = mapSize_.toBuilder();
              }
              mapSize_ = input.readMessage(SC2APIProtocol.Common.Size2DI.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mapSize_);
                mapSize_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = pathingGrid_.toBuilder();
              }
              pathingGrid_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pathingGrid_);
                pathingGrid_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = terrainHeight_.toBuilder();
              }
              terrainHeight_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(terrainHeight_);
                terrainHeight_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = placementGrid_.toBuilder();
              }
              placementGrid_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(placementGrid_);
                placementGrid_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              SC2APIProtocol.Common.RectangleI.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = playableArea_.toBuilder();
              }
              playableArea_ = input.readMessage(SC2APIProtocol.Common.RectangleI.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(playableArea_);
                playableArea_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                startLocations_ = new java.util.ArrayList<SC2APIProtocol.Common.Point2D>();
                mutable_bitField0_ |= 0x00000020;
              }
              startLocations_.add(
                  input.readMessage(SC2APIProtocol.Common.Point2D.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          startLocations_ = java.util.Collections.unmodifiableList(startLocations_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_StartRaw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_StartRaw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.StartRaw.class, SC2APIProtocol.Raw.StartRaw.Builder.class);
    }

    private int bitField0_;
    public static final int MAP_SIZE_FIELD_NUMBER = 1;
    private SC2APIProtocol.Common.Size2DI mapSize_;
    /**
     * <pre>
     * Width and height of the map.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
     */
    public boolean hasMapSize() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Width and height of the map.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
     */
    public SC2APIProtocol.Common.Size2DI getMapSize() {
      return mapSize_ == null ? SC2APIProtocol.Common.Size2DI.getDefaultInstance() : mapSize_;
    }
    /**
     * <pre>
     * Width and height of the map.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
     */
    public SC2APIProtocol.Common.Size2DIOrBuilder getMapSizeOrBuilder() {
      return mapSize_ == null ? SC2APIProtocol.Common.Size2DI.getDefaultInstance() : mapSize_;
    }

    public static final int PATHING_GRID_FIELD_NUMBER = 2;
    private SC2APIProtocol.Common.ImageData pathingGrid_;
    /**
     * <pre>
     * 1 byte bitmap of the pathing grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
     */
    public boolean hasPathingGrid() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 1 byte bitmap of the pathing grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
     */
    public SC2APIProtocol.Common.ImageData getPathingGrid() {
      return pathingGrid_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : pathingGrid_;
    }
    /**
     * <pre>
     * 1 byte bitmap of the pathing grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getPathingGridOrBuilder() {
      return pathingGrid_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : pathingGrid_;
    }

    public static final int TERRAIN_HEIGHT_FIELD_NUMBER = 3;
    private SC2APIProtocol.Common.ImageData terrainHeight_;
    /**
     * <pre>
     * 1 byte bitmap of the terrain height.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
     */
    public boolean hasTerrainHeight() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 1 byte bitmap of the terrain height.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
     */
    public SC2APIProtocol.Common.ImageData getTerrainHeight() {
      return terrainHeight_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : terrainHeight_;
    }
    /**
     * <pre>
     * 1 byte bitmap of the terrain height.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getTerrainHeightOrBuilder() {
      return terrainHeight_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : terrainHeight_;
    }

    public static final int PLACEMENT_GRID_FIELD_NUMBER = 4;
    private SC2APIProtocol.Common.ImageData placementGrid_;
    /**
     * <pre>
     * 1 byte bitmap of the building placement grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
     */
    public boolean hasPlacementGrid() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 1 byte bitmap of the building placement grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
     */
    public SC2APIProtocol.Common.ImageData getPlacementGrid() {
      return placementGrid_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : placementGrid_;
    }
    /**
     * <pre>
     * 1 byte bitmap of the building placement grid.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getPlacementGridOrBuilder() {
      return placementGrid_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : placementGrid_;
    }

    public static final int PLAYABLE_AREA_FIELD_NUMBER = 5;
    private SC2APIProtocol.Common.RectangleI playableArea_;
    /**
     * <pre>
     * The playable cells.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
     */
    public boolean hasPlayableArea() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * The playable cells.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
     */
    public SC2APIProtocol.Common.RectangleI getPlayableArea() {
      return playableArea_ == null ? SC2APIProtocol.Common.RectangleI.getDefaultInstance() : playableArea_;
    }
    /**
     * <pre>
     * The playable cells.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
     */
    public SC2APIProtocol.Common.RectangleIOrBuilder getPlayableAreaOrBuilder() {
      return playableArea_ == null ? SC2APIProtocol.Common.RectangleI.getDefaultInstance() : playableArea_;
    }

    public static final int START_LOCATIONS_FIELD_NUMBER = 6;
    private java.util.List<SC2APIProtocol.Common.Point2D> startLocations_;
    /**
     * <pre>
     * Possible start locations for players.
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
     */
    public java.util.List<SC2APIProtocol.Common.Point2D> getStartLocationsList() {
      return startLocations_;
    }
    /**
     * <pre>
     * Possible start locations for players.
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
     */
    public java.util.List<? extends SC2APIProtocol.Common.Point2DOrBuilder> 
        getStartLocationsOrBuilderList() {
      return startLocations_;
    }
    /**
     * <pre>
     * Possible start locations for players.
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
     */
    public int getStartLocationsCount() {
      return startLocations_.size();
    }
    /**
     * <pre>
     * Possible start locations for players.
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
     */
    public SC2APIProtocol.Common.Point2D getStartLocations(int index) {
      return startLocations_.get(index);
    }
    /**
     * <pre>
     * Possible start locations for players.
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
     */
    public SC2APIProtocol.Common.Point2DOrBuilder getStartLocationsOrBuilder(
        int index) {
      return startLocations_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getMapSize());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getPathingGrid());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getTerrainHeight());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, getPlacementGrid());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getPlayableArea());
      }
      for (int i = 0; i < startLocations_.size(); i++) {
        output.writeMessage(6, startLocations_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getMapSize());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getPathingGrid());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTerrainHeight());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getPlacementGrid());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getPlayableArea());
      }
      for (int i = 0; i < startLocations_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, startLocations_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.StartRaw)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.StartRaw other = (SC2APIProtocol.Raw.StartRaw) obj;

      boolean result = true;
      result = result && (hasMapSize() == other.hasMapSize());
      if (hasMapSize()) {
        result = result && getMapSize()
            .equals(other.getMapSize());
      }
      result = result && (hasPathingGrid() == other.hasPathingGrid());
      if (hasPathingGrid()) {
        result = result && getPathingGrid()
            .equals(other.getPathingGrid());
      }
      result = result && (hasTerrainHeight() == other.hasTerrainHeight());
      if (hasTerrainHeight()) {
        result = result && getTerrainHeight()
            .equals(other.getTerrainHeight());
      }
      result = result && (hasPlacementGrid() == other.hasPlacementGrid());
      if (hasPlacementGrid()) {
        result = result && getPlacementGrid()
            .equals(other.getPlacementGrid());
      }
      result = result && (hasPlayableArea() == other.hasPlayableArea());
      if (hasPlayableArea()) {
        result = result && getPlayableArea()
            .equals(other.getPlayableArea());
      }
      result = result && getStartLocationsList()
          .equals(other.getStartLocationsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMapSize()) {
        hash = (37 * hash) + MAP_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMapSize().hashCode();
      }
      if (hasPathingGrid()) {
        hash = (37 * hash) + PATHING_GRID_FIELD_NUMBER;
        hash = (53 * hash) + getPathingGrid().hashCode();
      }
      if (hasTerrainHeight()) {
        hash = (37 * hash) + TERRAIN_HEIGHT_FIELD_NUMBER;
        hash = (53 * hash) + getTerrainHeight().hashCode();
      }
      if (hasPlacementGrid()) {
        hash = (37 * hash) + PLACEMENT_GRID_FIELD_NUMBER;
        hash = (53 * hash) + getPlacementGrid().hashCode();
      }
      if (hasPlayableArea()) {
        hash = (37 * hash) + PLAYABLE_AREA_FIELD_NUMBER;
        hash = (53 * hash) + getPlayableArea().hashCode();
      }
      if (getStartLocationsCount() > 0) {
        hash = (37 * hash) + START_LOCATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getStartLocationsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.StartRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.StartRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.StartRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.StartRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.StartRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.StartRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.StartRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.StartRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.StartRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.StartRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.StartRaw prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.StartRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.StartRaw)
        SC2APIProtocol.Raw.StartRawOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_StartRaw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_StartRaw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.StartRaw.class, SC2APIProtocol.Raw.StartRaw.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.StartRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMapSizeFieldBuilder();
          getPathingGridFieldBuilder();
          getTerrainHeightFieldBuilder();
          getPlacementGridFieldBuilder();
          getPlayableAreaFieldBuilder();
          getStartLocationsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (mapSizeBuilder_ == null) {
          mapSize_ = null;
        } else {
          mapSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (pathingGridBuilder_ == null) {
          pathingGrid_ = null;
        } else {
          pathingGridBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (terrainHeightBuilder_ == null) {
          terrainHeight_ = null;
        } else {
          terrainHeightBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (placementGridBuilder_ == null) {
          placementGrid_ = null;
        } else {
          placementGridBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (playableAreaBuilder_ == null) {
          playableArea_ = null;
        } else {
          playableAreaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (startLocationsBuilder_ == null) {
          startLocations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          startLocationsBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_StartRaw_descriptor;
      }

      public SC2APIProtocol.Raw.StartRaw getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.StartRaw.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.StartRaw build() {
        SC2APIProtocol.Raw.StartRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.StartRaw buildPartial() {
        SC2APIProtocol.Raw.StartRaw result = new SC2APIProtocol.Raw.StartRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (mapSizeBuilder_ == null) {
          result.mapSize_ = mapSize_;
        } else {
          result.mapSize_ = mapSizeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (pathingGridBuilder_ == null) {
          result.pathingGrid_ = pathingGrid_;
        } else {
          result.pathingGrid_ = pathingGridBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (terrainHeightBuilder_ == null) {
          result.terrainHeight_ = terrainHeight_;
        } else {
          result.terrainHeight_ = terrainHeightBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (placementGridBuilder_ == null) {
          result.placementGrid_ = placementGrid_;
        } else {
          result.placementGrid_ = placementGridBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (playableAreaBuilder_ == null) {
          result.playableArea_ = playableArea_;
        } else {
          result.playableArea_ = playableAreaBuilder_.build();
        }
        if (startLocationsBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            startLocations_ = java.util.Collections.unmodifiableList(startLocations_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.startLocations_ = startLocations_;
        } else {
          result.startLocations_ = startLocationsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.StartRaw) {
          return mergeFrom((SC2APIProtocol.Raw.StartRaw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.StartRaw other) {
        if (other == SC2APIProtocol.Raw.StartRaw.getDefaultInstance()) return this;
        if (other.hasMapSize()) {
          mergeMapSize(other.getMapSize());
        }
        if (other.hasPathingGrid()) {
          mergePathingGrid(other.getPathingGrid());
        }
        if (other.hasTerrainHeight()) {
          mergeTerrainHeight(other.getTerrainHeight());
        }
        if (other.hasPlacementGrid()) {
          mergePlacementGrid(other.getPlacementGrid());
        }
        if (other.hasPlayableArea()) {
          mergePlayableArea(other.getPlayableArea());
        }
        if (startLocationsBuilder_ == null) {
          if (!other.startLocations_.isEmpty()) {
            if (startLocations_.isEmpty()) {
              startLocations_ = other.startLocations_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureStartLocationsIsMutable();
              startLocations_.addAll(other.startLocations_);
            }
            onChanged();
          }
        } else {
          if (!other.startLocations_.isEmpty()) {
            if (startLocationsBuilder_.isEmpty()) {
              startLocationsBuilder_.dispose();
              startLocationsBuilder_ = null;
              startLocations_ = other.startLocations_;
              bitField0_ = (bitField0_ & ~0x00000020);
              startLocationsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getStartLocationsFieldBuilder() : null;
            } else {
              startLocationsBuilder_.addAllMessages(other.startLocations_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.StartRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.StartRaw) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Common.Size2DI mapSize_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Size2DI, SC2APIProtocol.Common.Size2DI.Builder, SC2APIProtocol.Common.Size2DIOrBuilder> mapSizeBuilder_;
      /**
       * <pre>
       * Width and height of the map.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
       */
      public boolean hasMapSize() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Width and height of the map.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
       */
      public SC2APIProtocol.Common.Size2DI getMapSize() {
        if (mapSizeBuilder_ == null) {
          return mapSize_ == null ? SC2APIProtocol.Common.Size2DI.getDefaultInstance() : mapSize_;
        } else {
          return mapSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Width and height of the map.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
       */
      public Builder setMapSize(SC2APIProtocol.Common.Size2DI value) {
        if (mapSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mapSize_ = value;
          onChanged();
        } else {
          mapSizeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Width and height of the map.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
       */
      public Builder setMapSize(
          SC2APIProtocol.Common.Size2DI.Builder builderForValue) {
        if (mapSizeBuilder_ == null) {
          mapSize_ = builderForValue.build();
          onChanged();
        } else {
          mapSizeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Width and height of the map.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
       */
      public Builder mergeMapSize(SC2APIProtocol.Common.Size2DI value) {
        if (mapSizeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              mapSize_ != null &&
              mapSize_ != SC2APIProtocol.Common.Size2DI.getDefaultInstance()) {
            mapSize_ =
              SC2APIProtocol.Common.Size2DI.newBuilder(mapSize_).mergeFrom(value).buildPartial();
          } else {
            mapSize_ = value;
          }
          onChanged();
        } else {
          mapSizeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Width and height of the map.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
       */
      public Builder clearMapSize() {
        if (mapSizeBuilder_ == null) {
          mapSize_ = null;
          onChanged();
        } else {
          mapSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * Width and height of the map.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
       */
      public SC2APIProtocol.Common.Size2DI.Builder getMapSizeBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMapSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Width and height of the map.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
       */
      public SC2APIProtocol.Common.Size2DIOrBuilder getMapSizeOrBuilder() {
        if (mapSizeBuilder_ != null) {
          return mapSizeBuilder_.getMessageOrBuilder();
        } else {
          return mapSize_ == null ?
              SC2APIProtocol.Common.Size2DI.getDefaultInstance() : mapSize_;
        }
      }
      /**
       * <pre>
       * Width and height of the map.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.Size2DI map_size = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Size2DI, SC2APIProtocol.Common.Size2DI.Builder, SC2APIProtocol.Common.Size2DIOrBuilder> 
          getMapSizeFieldBuilder() {
        if (mapSizeBuilder_ == null) {
          mapSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.Size2DI, SC2APIProtocol.Common.Size2DI.Builder, SC2APIProtocol.Common.Size2DIOrBuilder>(
                  getMapSize(),
                  getParentForChildren(),
                  isClean());
          mapSize_ = null;
        }
        return mapSizeBuilder_;
      }

      private SC2APIProtocol.Common.ImageData pathingGrid_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> pathingGridBuilder_;
      /**
       * <pre>
       * 1 byte bitmap of the pathing grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
       */
      public boolean hasPathingGrid() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * 1 byte bitmap of the pathing grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
       */
      public SC2APIProtocol.Common.ImageData getPathingGrid() {
        if (pathingGridBuilder_ == null) {
          return pathingGrid_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : pathingGrid_;
        } else {
          return pathingGridBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1 byte bitmap of the pathing grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
       */
      public Builder setPathingGrid(SC2APIProtocol.Common.ImageData value) {
        if (pathingGridBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pathingGrid_ = value;
          onChanged();
        } else {
          pathingGridBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the pathing grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
       */
      public Builder setPathingGrid(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (pathingGridBuilder_ == null) {
          pathingGrid_ = builderForValue.build();
          onChanged();
        } else {
          pathingGridBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the pathing grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
       */
      public Builder mergePathingGrid(SC2APIProtocol.Common.ImageData value) {
        if (pathingGridBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              pathingGrid_ != null &&
              pathingGrid_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            pathingGrid_ =
              SC2APIProtocol.Common.ImageData.newBuilder(pathingGrid_).mergeFrom(value).buildPartial();
          } else {
            pathingGrid_ = value;
          }
          onChanged();
        } else {
          pathingGridBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the pathing grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
       */
      public Builder clearPathingGrid() {
        if (pathingGridBuilder_ == null) {
          pathingGrid_ = null;
          onChanged();
        } else {
          pathingGridBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the pathing grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getPathingGridBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getPathingGridFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1 byte bitmap of the pathing grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getPathingGridOrBuilder() {
        if (pathingGridBuilder_ != null) {
          return pathingGridBuilder_.getMessageOrBuilder();
        } else {
          return pathingGrid_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : pathingGrid_;
        }
      }
      /**
       * <pre>
       * 1 byte bitmap of the pathing grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData pathing_grid = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getPathingGridFieldBuilder() {
        if (pathingGridBuilder_ == null) {
          pathingGridBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getPathingGrid(),
                  getParentForChildren(),
                  isClean());
          pathingGrid_ = null;
        }
        return pathingGridBuilder_;
      }

      private SC2APIProtocol.Common.ImageData terrainHeight_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> terrainHeightBuilder_;
      /**
       * <pre>
       * 1 byte bitmap of the terrain height.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
       */
      public boolean hasTerrainHeight() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * 1 byte bitmap of the terrain height.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
       */
      public SC2APIProtocol.Common.ImageData getTerrainHeight() {
        if (terrainHeightBuilder_ == null) {
          return terrainHeight_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : terrainHeight_;
        } else {
          return terrainHeightBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1 byte bitmap of the terrain height.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
       */
      public Builder setTerrainHeight(SC2APIProtocol.Common.ImageData value) {
        if (terrainHeightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          terrainHeight_ = value;
          onChanged();
        } else {
          terrainHeightBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the terrain height.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
       */
      public Builder setTerrainHeight(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (terrainHeightBuilder_ == null) {
          terrainHeight_ = builderForValue.build();
          onChanged();
        } else {
          terrainHeightBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the terrain height.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
       */
      public Builder mergeTerrainHeight(SC2APIProtocol.Common.ImageData value) {
        if (terrainHeightBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              terrainHeight_ != null &&
              terrainHeight_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            terrainHeight_ =
              SC2APIProtocol.Common.ImageData.newBuilder(terrainHeight_).mergeFrom(value).buildPartial();
          } else {
            terrainHeight_ = value;
          }
          onChanged();
        } else {
          terrainHeightBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the terrain height.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
       */
      public Builder clearTerrainHeight() {
        if (terrainHeightBuilder_ == null) {
          terrainHeight_ = null;
          onChanged();
        } else {
          terrainHeightBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the terrain height.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getTerrainHeightBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTerrainHeightFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1 byte bitmap of the terrain height.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getTerrainHeightOrBuilder() {
        if (terrainHeightBuilder_ != null) {
          return terrainHeightBuilder_.getMessageOrBuilder();
        } else {
          return terrainHeight_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : terrainHeight_;
        }
      }
      /**
       * <pre>
       * 1 byte bitmap of the terrain height.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData terrain_height = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getTerrainHeightFieldBuilder() {
        if (terrainHeightBuilder_ == null) {
          terrainHeightBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getTerrainHeight(),
                  getParentForChildren(),
                  isClean());
          terrainHeight_ = null;
        }
        return terrainHeightBuilder_;
      }

      private SC2APIProtocol.Common.ImageData placementGrid_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> placementGridBuilder_;
      /**
       * <pre>
       * 1 byte bitmap of the building placement grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
       */
      public boolean hasPlacementGrid() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * 1 byte bitmap of the building placement grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
       */
      public SC2APIProtocol.Common.ImageData getPlacementGrid() {
        if (placementGridBuilder_ == null) {
          return placementGrid_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : placementGrid_;
        } else {
          return placementGridBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1 byte bitmap of the building placement grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
       */
      public Builder setPlacementGrid(SC2APIProtocol.Common.ImageData value) {
        if (placementGridBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          placementGrid_ = value;
          onChanged();
        } else {
          placementGridBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the building placement grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
       */
      public Builder setPlacementGrid(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (placementGridBuilder_ == null) {
          placementGrid_ = builderForValue.build();
          onChanged();
        } else {
          placementGridBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the building placement grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
       */
      public Builder mergePlacementGrid(SC2APIProtocol.Common.ImageData value) {
        if (placementGridBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              placementGrid_ != null &&
              placementGrid_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            placementGrid_ =
              SC2APIProtocol.Common.ImageData.newBuilder(placementGrid_).mergeFrom(value).buildPartial();
          } else {
            placementGrid_ = value;
          }
          onChanged();
        } else {
          placementGridBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the building placement grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
       */
      public Builder clearPlacementGrid() {
        if (placementGridBuilder_ == null) {
          placementGrid_ = null;
          onChanged();
        } else {
          placementGridBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       * 1 byte bitmap of the building placement grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getPlacementGridBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getPlacementGridFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1 byte bitmap of the building placement grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getPlacementGridOrBuilder() {
        if (placementGridBuilder_ != null) {
          return placementGridBuilder_.getMessageOrBuilder();
        } else {
          return placementGrid_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : placementGrid_;
        }
      }
      /**
       * <pre>
       * 1 byte bitmap of the building placement grid.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData placement_grid = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getPlacementGridFieldBuilder() {
        if (placementGridBuilder_ == null) {
          placementGridBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getPlacementGrid(),
                  getParentForChildren(),
                  isClean());
          placementGrid_ = null;
        }
        return placementGridBuilder_;
      }

      private SC2APIProtocol.Common.RectangleI playableArea_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.RectangleI, SC2APIProtocol.Common.RectangleI.Builder, SC2APIProtocol.Common.RectangleIOrBuilder> playableAreaBuilder_;
      /**
       * <pre>
       * The playable cells.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
       */
      public boolean hasPlayableArea() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * The playable cells.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
       */
      public SC2APIProtocol.Common.RectangleI getPlayableArea() {
        if (playableAreaBuilder_ == null) {
          return playableArea_ == null ? SC2APIProtocol.Common.RectangleI.getDefaultInstance() : playableArea_;
        } else {
          return playableAreaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The playable cells.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
       */
      public Builder setPlayableArea(SC2APIProtocol.Common.RectangleI value) {
        if (playableAreaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          playableArea_ = value;
          onChanged();
        } else {
          playableAreaBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * The playable cells.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
       */
      public Builder setPlayableArea(
          SC2APIProtocol.Common.RectangleI.Builder builderForValue) {
        if (playableAreaBuilder_ == null) {
          playableArea_ = builderForValue.build();
          onChanged();
        } else {
          playableAreaBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * The playable cells.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
       */
      public Builder mergePlayableArea(SC2APIProtocol.Common.RectangleI value) {
        if (playableAreaBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              playableArea_ != null &&
              playableArea_ != SC2APIProtocol.Common.RectangleI.getDefaultInstance()) {
            playableArea_ =
              SC2APIProtocol.Common.RectangleI.newBuilder(playableArea_).mergeFrom(value).buildPartial();
          } else {
            playableArea_ = value;
          }
          onChanged();
        } else {
          playableAreaBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * The playable cells.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
       */
      public Builder clearPlayableArea() {
        if (playableAreaBuilder_ == null) {
          playableArea_ = null;
          onChanged();
        } else {
          playableAreaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       * The playable cells.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
       */
      public SC2APIProtocol.Common.RectangleI.Builder getPlayableAreaBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getPlayableAreaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The playable cells.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
       */
      public SC2APIProtocol.Common.RectangleIOrBuilder getPlayableAreaOrBuilder() {
        if (playableAreaBuilder_ != null) {
          return playableAreaBuilder_.getMessageOrBuilder();
        } else {
          return playableArea_ == null ?
              SC2APIProtocol.Common.RectangleI.getDefaultInstance() : playableArea_;
        }
      }
      /**
       * <pre>
       * The playable cells.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.RectangleI playable_area = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.RectangleI, SC2APIProtocol.Common.RectangleI.Builder, SC2APIProtocol.Common.RectangleIOrBuilder> 
          getPlayableAreaFieldBuilder() {
        if (playableAreaBuilder_ == null) {
          playableAreaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.RectangleI, SC2APIProtocol.Common.RectangleI.Builder, SC2APIProtocol.Common.RectangleIOrBuilder>(
                  getPlayableArea(),
                  getParentForChildren(),
                  isClean());
          playableArea_ = null;
        }
        return playableAreaBuilder_;
      }

      private java.util.List<SC2APIProtocol.Common.Point2D> startLocations_ =
        java.util.Collections.emptyList();
      private void ensureStartLocationsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          startLocations_ = new java.util.ArrayList<SC2APIProtocol.Common.Point2D>(startLocations_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Common.Point2D, SC2APIProtocol.Common.Point2D.Builder, SC2APIProtocol.Common.Point2DOrBuilder> startLocationsBuilder_;

      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public java.util.List<SC2APIProtocol.Common.Point2D> getStartLocationsList() {
        if (startLocationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(startLocations_);
        } else {
          return startLocationsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public int getStartLocationsCount() {
        if (startLocationsBuilder_ == null) {
          return startLocations_.size();
        } else {
          return startLocationsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public SC2APIProtocol.Common.Point2D getStartLocations(int index) {
        if (startLocationsBuilder_ == null) {
          return startLocations_.get(index);
        } else {
          return startLocationsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public Builder setStartLocations(
          int index, SC2APIProtocol.Common.Point2D value) {
        if (startLocationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartLocationsIsMutable();
          startLocations_.set(index, value);
          onChanged();
        } else {
          startLocationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public Builder setStartLocations(
          int index, SC2APIProtocol.Common.Point2D.Builder builderForValue) {
        if (startLocationsBuilder_ == null) {
          ensureStartLocationsIsMutable();
          startLocations_.set(index, builderForValue.build());
          onChanged();
        } else {
          startLocationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public Builder addStartLocations(SC2APIProtocol.Common.Point2D value) {
        if (startLocationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartLocationsIsMutable();
          startLocations_.add(value);
          onChanged();
        } else {
          startLocationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public Builder addStartLocations(
          int index, SC2APIProtocol.Common.Point2D value) {
        if (startLocationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartLocationsIsMutable();
          startLocations_.add(index, value);
          onChanged();
        } else {
          startLocationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public Builder addStartLocations(
          SC2APIProtocol.Common.Point2D.Builder builderForValue) {
        if (startLocationsBuilder_ == null) {
          ensureStartLocationsIsMutable();
          startLocations_.add(builderForValue.build());
          onChanged();
        } else {
          startLocationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public Builder addStartLocations(
          int index, SC2APIProtocol.Common.Point2D.Builder builderForValue) {
        if (startLocationsBuilder_ == null) {
          ensureStartLocationsIsMutable();
          startLocations_.add(index, builderForValue.build());
          onChanged();
        } else {
          startLocationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public Builder addAllStartLocations(
          java.lang.Iterable<? extends SC2APIProtocol.Common.Point2D> values) {
        if (startLocationsBuilder_ == null) {
          ensureStartLocationsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, startLocations_);
          onChanged();
        } else {
          startLocationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public Builder clearStartLocations() {
        if (startLocationsBuilder_ == null) {
          startLocations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          startLocationsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public Builder removeStartLocations(int index) {
        if (startLocationsBuilder_ == null) {
          ensureStartLocationsIsMutable();
          startLocations_.remove(index);
          onChanged();
        } else {
          startLocationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public SC2APIProtocol.Common.Point2D.Builder getStartLocationsBuilder(
          int index) {
        return getStartLocationsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public SC2APIProtocol.Common.Point2DOrBuilder getStartLocationsOrBuilder(
          int index) {
        if (startLocationsBuilder_ == null) {
          return startLocations_.get(index);  } else {
          return startLocationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public java.util.List<? extends SC2APIProtocol.Common.Point2DOrBuilder> 
           getStartLocationsOrBuilderList() {
        if (startLocationsBuilder_ != null) {
          return startLocationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(startLocations_);
        }
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public SC2APIProtocol.Common.Point2D.Builder addStartLocationsBuilder() {
        return getStartLocationsFieldBuilder().addBuilder(
            SC2APIProtocol.Common.Point2D.getDefaultInstance());
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public SC2APIProtocol.Common.Point2D.Builder addStartLocationsBuilder(
          int index) {
        return getStartLocationsFieldBuilder().addBuilder(
            index, SC2APIProtocol.Common.Point2D.getDefaultInstance());
      }
      /**
       * <pre>
       * Possible start locations for players.
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.Point2D start_locations = 6;</code>
       */
      public java.util.List<SC2APIProtocol.Common.Point2D.Builder> 
           getStartLocationsBuilderList() {
        return getStartLocationsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Common.Point2D, SC2APIProtocol.Common.Point2D.Builder, SC2APIProtocol.Common.Point2DOrBuilder> 
          getStartLocationsFieldBuilder() {
        if (startLocationsBuilder_ == null) {
          startLocationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              SC2APIProtocol.Common.Point2D, SC2APIProtocol.Common.Point2D.Builder, SC2APIProtocol.Common.Point2DOrBuilder>(
                  startLocations_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          startLocations_ = null;
        }
        return startLocationsBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.StartRaw)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.StartRaw)
    private static final SC2APIProtocol.Raw.StartRaw DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.StartRaw();
    }

    public static SC2APIProtocol.Raw.StartRaw getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<StartRaw>
        PARSER = new com.google.protobuf.AbstractParser<StartRaw>() {
      public StartRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StartRaw(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StartRaw> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StartRaw> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.StartRaw getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ObservationRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ObservationRaw)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
     */
    boolean hasPlayer();
    /**
     * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
     */
    SC2APIProtocol.Raw.PlayerRaw getPlayer();
    /**
     * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
     */
    SC2APIProtocol.Raw.PlayerRawOrBuilder getPlayerOrBuilder();

    /**
     * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
     */
    java.util.List<SC2APIProtocol.Raw.Unit> 
        getUnitsList();
    /**
     * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
     */
    SC2APIProtocol.Raw.Unit getUnits(int index);
    /**
     * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
     */
    int getUnitsCount();
    /**
     * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
     */
    java.util.List<? extends SC2APIProtocol.Raw.UnitOrBuilder> 
        getUnitsOrBuilderList();
    /**
     * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
     */
    SC2APIProtocol.Raw.UnitOrBuilder getUnitsOrBuilder(
        int index);

    /**
     * <pre>
     * Fog of war, creep and so on. Board stuff that changes per frame.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
     */
    boolean hasMapState();
    /**
     * <pre>
     * Fog of war, creep and so on. Board stuff that changes per frame.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
     */
    SC2APIProtocol.Raw.MapState getMapState();
    /**
     * <pre>
     * Fog of war, creep and so on. Board stuff that changes per frame.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
     */
    SC2APIProtocol.Raw.MapStateOrBuilder getMapStateOrBuilder();

    /**
     * <code>optional .SC2APIProtocol.Event event = 4;</code>
     */
    boolean hasEvent();
    /**
     * <code>optional .SC2APIProtocol.Event event = 4;</code>
     */
    SC2APIProtocol.Raw.Event getEvent();
    /**
     * <code>optional .SC2APIProtocol.Event event = 4;</code>
     */
    SC2APIProtocol.Raw.EventOrBuilder getEventOrBuilder();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ObservationRaw}
   */
  public  static final class ObservationRaw extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ObservationRaw)
      ObservationRawOrBuilder {
    // Use ObservationRaw.newBuilder() to construct.
    private ObservationRaw(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ObservationRaw() {
      units_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ObservationRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Raw.PlayerRaw.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = player_.toBuilder();
              }
              player_ = input.readMessage(SC2APIProtocol.Raw.PlayerRaw.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(player_);
                player_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                units_ = new java.util.ArrayList<SC2APIProtocol.Raw.Unit>();
                mutable_bitField0_ |= 0x00000002;
              }
              units_.add(
                  input.readMessage(SC2APIProtocol.Raw.Unit.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              SC2APIProtocol.Raw.MapState.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mapState_.toBuilder();
              }
              mapState_ = input.readMessage(SC2APIProtocol.Raw.MapState.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mapState_);
                mapState_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 34: {
              SC2APIProtocol.Raw.Event.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(SC2APIProtocol.Raw.Event.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          units_ = java.util.Collections.unmodifiableList(units_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ObservationRaw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ObservationRaw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.ObservationRaw.class, SC2APIProtocol.Raw.ObservationRaw.Builder.class);
    }

    private int bitField0_;
    public static final int PLAYER_FIELD_NUMBER = 1;
    private SC2APIProtocol.Raw.PlayerRaw player_;
    /**
     * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
     */
    public boolean hasPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
     */
    public SC2APIProtocol.Raw.PlayerRaw getPlayer() {
      return player_ == null ? SC2APIProtocol.Raw.PlayerRaw.getDefaultInstance() : player_;
    }
    /**
     * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
     */
    public SC2APIProtocol.Raw.PlayerRawOrBuilder getPlayerOrBuilder() {
      return player_ == null ? SC2APIProtocol.Raw.PlayerRaw.getDefaultInstance() : player_;
    }

    public static final int UNITS_FIELD_NUMBER = 2;
    private java.util.List<SC2APIProtocol.Raw.Unit> units_;
    /**
     * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
     */
    public java.util.List<SC2APIProtocol.Raw.Unit> getUnitsList() {
      return units_;
    }
    /**
     * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
     */
    public java.util.List<? extends SC2APIProtocol.Raw.UnitOrBuilder> 
        getUnitsOrBuilderList() {
      return units_;
    }
    /**
     * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
     */
    public int getUnitsCount() {
      return units_.size();
    }
    /**
     * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
     */
    public SC2APIProtocol.Raw.Unit getUnits(int index) {
      return units_.get(index);
    }
    /**
     * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
     */
    public SC2APIProtocol.Raw.UnitOrBuilder getUnitsOrBuilder(
        int index) {
      return units_.get(index);
    }

    public static final int MAP_STATE_FIELD_NUMBER = 3;
    private SC2APIProtocol.Raw.MapState mapState_;
    /**
     * <pre>
     * Fog of war, creep and so on. Board stuff that changes per frame.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
     */
    public boolean hasMapState() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Fog of war, creep and so on. Board stuff that changes per frame.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
     */
    public SC2APIProtocol.Raw.MapState getMapState() {
      return mapState_ == null ? SC2APIProtocol.Raw.MapState.getDefaultInstance() : mapState_;
    }
    /**
     * <pre>
     * Fog of war, creep and so on. Board stuff that changes per frame.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
     */
    public SC2APIProtocol.Raw.MapStateOrBuilder getMapStateOrBuilder() {
      return mapState_ == null ? SC2APIProtocol.Raw.MapState.getDefaultInstance() : mapState_;
    }

    public static final int EVENT_FIELD_NUMBER = 4;
    private SC2APIProtocol.Raw.Event event_;
    /**
     * <code>optional .SC2APIProtocol.Event event = 4;</code>
     */
    public boolean hasEvent() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .SC2APIProtocol.Event event = 4;</code>
     */
    public SC2APIProtocol.Raw.Event getEvent() {
      return event_ == null ? SC2APIProtocol.Raw.Event.getDefaultInstance() : event_;
    }
    /**
     * <code>optional .SC2APIProtocol.Event event = 4;</code>
     */
    public SC2APIProtocol.Raw.EventOrBuilder getEventOrBuilder() {
      return event_ == null ? SC2APIProtocol.Raw.Event.getDefaultInstance() : event_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getPlayer());
      }
      for (int i = 0; i < units_.size(); i++) {
        output.writeMessage(2, units_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, getMapState());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, getEvent());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPlayer());
      }
      for (int i = 0; i < units_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, units_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getMapState());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getEvent());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.ObservationRaw)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.ObservationRaw other = (SC2APIProtocol.Raw.ObservationRaw) obj;

      boolean result = true;
      result = result && (hasPlayer() == other.hasPlayer());
      if (hasPlayer()) {
        result = result && getPlayer()
            .equals(other.getPlayer());
      }
      result = result && getUnitsList()
          .equals(other.getUnitsList());
      result = result && (hasMapState() == other.hasMapState());
      if (hasMapState()) {
        result = result && getMapState()
            .equals(other.getMapState());
      }
      result = result && (hasEvent() == other.hasEvent());
      if (hasEvent()) {
        result = result && getEvent()
            .equals(other.getEvent());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasPlayer()) {
        hash = (37 * hash) + PLAYER_FIELD_NUMBER;
        hash = (53 * hash) + getPlayer().hashCode();
      }
      if (getUnitsCount() > 0) {
        hash = (37 * hash) + UNITS_FIELD_NUMBER;
        hash = (53 * hash) + getUnitsList().hashCode();
      }
      if (hasMapState()) {
        hash = (37 * hash) + MAP_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getMapState().hashCode();
      }
      if (hasEvent()) {
        hash = (37 * hash) + EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getEvent().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.ObservationRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.ObservationRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ObservationRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.ObservationRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ObservationRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ObservationRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ObservationRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ObservationRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ObservationRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ObservationRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.ObservationRaw prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ObservationRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ObservationRaw)
        SC2APIProtocol.Raw.ObservationRawOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ObservationRaw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ObservationRaw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.ObservationRaw.class, SC2APIProtocol.Raw.ObservationRaw.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.ObservationRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPlayerFieldBuilder();
          getUnitsFieldBuilder();
          getMapStateFieldBuilder();
          getEventFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (playerBuilder_ == null) {
          player_ = null;
        } else {
          playerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (unitsBuilder_ == null) {
          units_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          unitsBuilder_.clear();
        }
        if (mapStateBuilder_ == null) {
          mapState_ = null;
        } else {
          mapStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (eventBuilder_ == null) {
          event_ = null;
        } else {
          eventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ObservationRaw_descriptor;
      }

      public SC2APIProtocol.Raw.ObservationRaw getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.ObservationRaw.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.ObservationRaw build() {
        SC2APIProtocol.Raw.ObservationRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.ObservationRaw buildPartial() {
        SC2APIProtocol.Raw.ObservationRaw result = new SC2APIProtocol.Raw.ObservationRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (playerBuilder_ == null) {
          result.player_ = player_;
        } else {
          result.player_ = playerBuilder_.build();
        }
        if (unitsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            units_ = java.util.Collections.unmodifiableList(units_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.units_ = units_;
        } else {
          result.units_ = unitsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        if (mapStateBuilder_ == null) {
          result.mapState_ = mapState_;
        } else {
          result.mapState_ = mapStateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.ObservationRaw) {
          return mergeFrom((SC2APIProtocol.Raw.ObservationRaw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.ObservationRaw other) {
        if (other == SC2APIProtocol.Raw.ObservationRaw.getDefaultInstance()) return this;
        if (other.hasPlayer()) {
          mergePlayer(other.getPlayer());
        }
        if (unitsBuilder_ == null) {
          if (!other.units_.isEmpty()) {
            if (units_.isEmpty()) {
              units_ = other.units_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureUnitsIsMutable();
              units_.addAll(other.units_);
            }
            onChanged();
          }
        } else {
          if (!other.units_.isEmpty()) {
            if (unitsBuilder_.isEmpty()) {
              unitsBuilder_.dispose();
              unitsBuilder_ = null;
              units_ = other.units_;
              bitField0_ = (bitField0_ & ~0x00000002);
              unitsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getUnitsFieldBuilder() : null;
            } else {
              unitsBuilder_.addAllMessages(other.units_);
            }
          }
        }
        if (other.hasMapState()) {
          mergeMapState(other.getMapState());
        }
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.ObservationRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.ObservationRaw) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Raw.PlayerRaw player_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.PlayerRaw, SC2APIProtocol.Raw.PlayerRaw.Builder, SC2APIProtocol.Raw.PlayerRawOrBuilder> playerBuilder_;
      /**
       * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
       */
      public boolean hasPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
       */
      public SC2APIProtocol.Raw.PlayerRaw getPlayer() {
        if (playerBuilder_ == null) {
          return player_ == null ? SC2APIProtocol.Raw.PlayerRaw.getDefaultInstance() : player_;
        } else {
          return playerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
       */
      public Builder setPlayer(SC2APIProtocol.Raw.PlayerRaw value) {
        if (playerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          player_ = value;
          onChanged();
        } else {
          playerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
       */
      public Builder setPlayer(
          SC2APIProtocol.Raw.PlayerRaw.Builder builderForValue) {
        if (playerBuilder_ == null) {
          player_ = builderForValue.build();
          onChanged();
        } else {
          playerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
       */
      public Builder mergePlayer(SC2APIProtocol.Raw.PlayerRaw value) {
        if (playerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              player_ != null &&
              player_ != SC2APIProtocol.Raw.PlayerRaw.getDefaultInstance()) {
            player_ =
              SC2APIProtocol.Raw.PlayerRaw.newBuilder(player_).mergeFrom(value).buildPartial();
          } else {
            player_ = value;
          }
          onChanged();
        } else {
          playerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
       */
      public Builder clearPlayer() {
        if (playerBuilder_ == null) {
          player_ = null;
          onChanged();
        } else {
          playerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
       */
      public SC2APIProtocol.Raw.PlayerRaw.Builder getPlayerBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getPlayerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
       */
      public SC2APIProtocol.Raw.PlayerRawOrBuilder getPlayerOrBuilder() {
        if (playerBuilder_ != null) {
          return playerBuilder_.getMessageOrBuilder();
        } else {
          return player_ == null ?
              SC2APIProtocol.Raw.PlayerRaw.getDefaultInstance() : player_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.PlayerRaw player = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.PlayerRaw, SC2APIProtocol.Raw.PlayerRaw.Builder, SC2APIProtocol.Raw.PlayerRawOrBuilder> 
          getPlayerFieldBuilder() {
        if (playerBuilder_ == null) {
          playerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Raw.PlayerRaw, SC2APIProtocol.Raw.PlayerRaw.Builder, SC2APIProtocol.Raw.PlayerRawOrBuilder>(
                  getPlayer(),
                  getParentForChildren(),
                  isClean());
          player_ = null;
        }
        return playerBuilder_;
      }

      private java.util.List<SC2APIProtocol.Raw.Unit> units_ =
        java.util.Collections.emptyList();
      private void ensureUnitsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          units_ = new java.util.ArrayList<SC2APIProtocol.Raw.Unit>(units_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Raw.Unit, SC2APIProtocol.Raw.Unit.Builder, SC2APIProtocol.Raw.UnitOrBuilder> unitsBuilder_;

      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public java.util.List<SC2APIProtocol.Raw.Unit> getUnitsList() {
        if (unitsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(units_);
        } else {
          return unitsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public int getUnitsCount() {
        if (unitsBuilder_ == null) {
          return units_.size();
        } else {
          return unitsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public SC2APIProtocol.Raw.Unit getUnits(int index) {
        if (unitsBuilder_ == null) {
          return units_.get(index);
        } else {
          return unitsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public Builder setUnits(
          int index, SC2APIProtocol.Raw.Unit value) {
        if (unitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnitsIsMutable();
          units_.set(index, value);
          onChanged();
        } else {
          unitsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public Builder setUnits(
          int index, SC2APIProtocol.Raw.Unit.Builder builderForValue) {
        if (unitsBuilder_ == null) {
          ensureUnitsIsMutable();
          units_.set(index, builderForValue.build());
          onChanged();
        } else {
          unitsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public Builder addUnits(SC2APIProtocol.Raw.Unit value) {
        if (unitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnitsIsMutable();
          units_.add(value);
          onChanged();
        } else {
          unitsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public Builder addUnits(
          int index, SC2APIProtocol.Raw.Unit value) {
        if (unitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnitsIsMutable();
          units_.add(index, value);
          onChanged();
        } else {
          unitsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public Builder addUnits(
          SC2APIProtocol.Raw.Unit.Builder builderForValue) {
        if (unitsBuilder_ == null) {
          ensureUnitsIsMutable();
          units_.add(builderForValue.build());
          onChanged();
        } else {
          unitsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public Builder addUnits(
          int index, SC2APIProtocol.Raw.Unit.Builder builderForValue) {
        if (unitsBuilder_ == null) {
          ensureUnitsIsMutable();
          units_.add(index, builderForValue.build());
          onChanged();
        } else {
          unitsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public Builder addAllUnits(
          java.lang.Iterable<? extends SC2APIProtocol.Raw.Unit> values) {
        if (unitsBuilder_ == null) {
          ensureUnitsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, units_);
          onChanged();
        } else {
          unitsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public Builder clearUnits() {
        if (unitsBuilder_ == null) {
          units_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          unitsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public Builder removeUnits(int index) {
        if (unitsBuilder_ == null) {
          ensureUnitsIsMutable();
          units_.remove(index);
          onChanged();
        } else {
          unitsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public SC2APIProtocol.Raw.Unit.Builder getUnitsBuilder(
          int index) {
        return getUnitsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public SC2APIProtocol.Raw.UnitOrBuilder getUnitsOrBuilder(
          int index) {
        if (unitsBuilder_ == null) {
          return units_.get(index);  } else {
          return unitsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public java.util.List<? extends SC2APIProtocol.Raw.UnitOrBuilder> 
           getUnitsOrBuilderList() {
        if (unitsBuilder_ != null) {
          return unitsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(units_);
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public SC2APIProtocol.Raw.Unit.Builder addUnitsBuilder() {
        return getUnitsFieldBuilder().addBuilder(
            SC2APIProtocol.Raw.Unit.getDefaultInstance());
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public SC2APIProtocol.Raw.Unit.Builder addUnitsBuilder(
          int index) {
        return getUnitsFieldBuilder().addBuilder(
            index, SC2APIProtocol.Raw.Unit.getDefaultInstance());
      }
      /**
       * <code>repeated .SC2APIProtocol.Unit units = 2;</code>
       */
      public java.util.List<SC2APIProtocol.Raw.Unit.Builder> 
           getUnitsBuilderList() {
        return getUnitsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Raw.Unit, SC2APIProtocol.Raw.Unit.Builder, SC2APIProtocol.Raw.UnitOrBuilder> 
          getUnitsFieldBuilder() {
        if (unitsBuilder_ == null) {
          unitsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              SC2APIProtocol.Raw.Unit, SC2APIProtocol.Raw.Unit.Builder, SC2APIProtocol.Raw.UnitOrBuilder>(
                  units_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          units_ = null;
        }
        return unitsBuilder_;
      }

      private SC2APIProtocol.Raw.MapState mapState_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.MapState, SC2APIProtocol.Raw.MapState.Builder, SC2APIProtocol.Raw.MapStateOrBuilder> mapStateBuilder_;
      /**
       * <pre>
       * Fog of war, creep and so on. Board stuff that changes per frame.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
       */
      public boolean hasMapState() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Fog of war, creep and so on. Board stuff that changes per frame.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
       */
      public SC2APIProtocol.Raw.MapState getMapState() {
        if (mapStateBuilder_ == null) {
          return mapState_ == null ? SC2APIProtocol.Raw.MapState.getDefaultInstance() : mapState_;
        } else {
          return mapStateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Fog of war, creep and so on. Board stuff that changes per frame.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
       */
      public Builder setMapState(SC2APIProtocol.Raw.MapState value) {
        if (mapStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mapState_ = value;
          onChanged();
        } else {
          mapStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * Fog of war, creep and so on. Board stuff that changes per frame.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
       */
      public Builder setMapState(
          SC2APIProtocol.Raw.MapState.Builder builderForValue) {
        if (mapStateBuilder_ == null) {
          mapState_ = builderForValue.build();
          onChanged();
        } else {
          mapStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * Fog of war, creep and so on. Board stuff that changes per frame.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
       */
      public Builder mergeMapState(SC2APIProtocol.Raw.MapState value) {
        if (mapStateBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              mapState_ != null &&
              mapState_ != SC2APIProtocol.Raw.MapState.getDefaultInstance()) {
            mapState_ =
              SC2APIProtocol.Raw.MapState.newBuilder(mapState_).mergeFrom(value).buildPartial();
          } else {
            mapState_ = value;
          }
          onChanged();
        } else {
          mapStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * Fog of war, creep and so on. Board stuff that changes per frame.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
       */
      public Builder clearMapState() {
        if (mapStateBuilder_ == null) {
          mapState_ = null;
          onChanged();
        } else {
          mapStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       * Fog of war, creep and so on. Board stuff that changes per frame.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
       */
      public SC2APIProtocol.Raw.MapState.Builder getMapStateBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMapStateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Fog of war, creep and so on. Board stuff that changes per frame.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
       */
      public SC2APIProtocol.Raw.MapStateOrBuilder getMapStateOrBuilder() {
        if (mapStateBuilder_ != null) {
          return mapStateBuilder_.getMessageOrBuilder();
        } else {
          return mapState_ == null ?
              SC2APIProtocol.Raw.MapState.getDefaultInstance() : mapState_;
        }
      }
      /**
       * <pre>
       * Fog of war, creep and so on. Board stuff that changes per frame.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.MapState map_state = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.MapState, SC2APIProtocol.Raw.MapState.Builder, SC2APIProtocol.Raw.MapStateOrBuilder> 
          getMapStateFieldBuilder() {
        if (mapStateBuilder_ == null) {
          mapStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Raw.MapState, SC2APIProtocol.Raw.MapState.Builder, SC2APIProtocol.Raw.MapStateOrBuilder>(
                  getMapState(),
                  getParentForChildren(),
                  isClean());
          mapState_ = null;
        }
        return mapStateBuilder_;
      }

      private SC2APIProtocol.Raw.Event event_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.Event, SC2APIProtocol.Raw.Event.Builder, SC2APIProtocol.Raw.EventOrBuilder> eventBuilder_;
      /**
       * <code>optional .SC2APIProtocol.Event event = 4;</code>
       */
      public boolean hasEvent() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .SC2APIProtocol.Event event = 4;</code>
       */
      public SC2APIProtocol.Raw.Event getEvent() {
        if (eventBuilder_ == null) {
          return event_ == null ? SC2APIProtocol.Raw.Event.getDefaultInstance() : event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Event event = 4;</code>
       */
      public Builder setEvent(SC2APIProtocol.Raw.Event value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Event event = 4;</code>
       */
      public Builder setEvent(
          SC2APIProtocol.Raw.Event.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Event event = 4;</code>
       */
      public Builder mergeEvent(SC2APIProtocol.Raw.Event value) {
        if (eventBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              event_ != null &&
              event_ != SC2APIProtocol.Raw.Event.getDefaultInstance()) {
            event_ =
              SC2APIProtocol.Raw.Event.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Event event = 4;</code>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = null;
          onChanged();
        } else {
          eventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Event event = 4;</code>
       */
      public SC2APIProtocol.Raw.Event.Builder getEventBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.Event event = 4;</code>
       */
      public SC2APIProtocol.Raw.EventOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_ == null ?
              SC2APIProtocol.Raw.Event.getDefaultInstance() : event_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Event event = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.Event, SC2APIProtocol.Raw.Event.Builder, SC2APIProtocol.Raw.EventOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Raw.Event, SC2APIProtocol.Raw.Event.Builder, SC2APIProtocol.Raw.EventOrBuilder>(
                  getEvent(),
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ObservationRaw)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ObservationRaw)
    private static final SC2APIProtocol.Raw.ObservationRaw DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.ObservationRaw();
    }

    public static SC2APIProtocol.Raw.ObservationRaw getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ObservationRaw>
        PARSER = new com.google.protobuf.AbstractParser<ObservationRaw>() {
      public ObservationRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ObservationRaw(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ObservationRaw> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ObservationRaw> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.ObservationRaw getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PowerSourceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.PowerSource)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .SC2APIProtocol.Point pos = 1;</code>
     */
    boolean hasPos();
    /**
     * <code>optional .SC2APIProtocol.Point pos = 1;</code>
     */
    SC2APIProtocol.Common.Point getPos();
    /**
     * <code>optional .SC2APIProtocol.Point pos = 1;</code>
     */
    SC2APIProtocol.Common.PointOrBuilder getPosOrBuilder();

    /**
     * <code>optional float radius = 2;</code>
     */
    boolean hasRadius();
    /**
     * <code>optional float radius = 2;</code>
     */
    float getRadius();

    /**
     * <code>optional uint64 tag = 3;</code>
     */
    boolean hasTag();
    /**
     * <code>optional uint64 tag = 3;</code>
     */
    long getTag();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.PowerSource}
   */
  public  static final class PowerSource extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.PowerSource)
      PowerSourceOrBuilder {
    // Use PowerSource.newBuilder() to construct.
    private PowerSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PowerSource() {
      radius_ = 0F;
      tag_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PowerSource(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Common.Point.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = pos_.toBuilder();
              }
              pos_ = input.readMessage(SC2APIProtocol.Common.Point.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pos_);
                pos_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              radius_ = input.readFloat();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              tag_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PowerSource_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PowerSource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.PowerSource.class, SC2APIProtocol.Raw.PowerSource.Builder.class);
    }

    private int bitField0_;
    public static final int POS_FIELD_NUMBER = 1;
    private SC2APIProtocol.Common.Point pos_;
    /**
     * <code>optional .SC2APIProtocol.Point pos = 1;</code>
     */
    public boolean hasPos() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SC2APIProtocol.Point pos = 1;</code>
     */
    public SC2APIProtocol.Common.Point getPos() {
      return pos_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : pos_;
    }
    /**
     * <code>optional .SC2APIProtocol.Point pos = 1;</code>
     */
    public SC2APIProtocol.Common.PointOrBuilder getPosOrBuilder() {
      return pos_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : pos_;
    }

    public static final int RADIUS_FIELD_NUMBER = 2;
    private float radius_;
    /**
     * <code>optional float radius = 2;</code>
     */
    public boolean hasRadius() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float radius = 2;</code>
     */
    public float getRadius() {
      return radius_;
    }

    public static final int TAG_FIELD_NUMBER = 3;
    private long tag_;
    /**
     * <code>optional uint64 tag = 3;</code>
     */
    public boolean hasTag() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint64 tag = 3;</code>
     */
    public long getTag() {
      return tag_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getPos());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, radius_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, tag_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPos());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, radius_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, tag_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.PowerSource)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.PowerSource other = (SC2APIProtocol.Raw.PowerSource) obj;

      boolean result = true;
      result = result && (hasPos() == other.hasPos());
      if (hasPos()) {
        result = result && getPos()
            .equals(other.getPos());
      }
      result = result && (hasRadius() == other.hasRadius());
      if (hasRadius()) {
        result = result && (
            java.lang.Float.floatToIntBits(getRadius())
            == java.lang.Float.floatToIntBits(
                other.getRadius()));
      }
      result = result && (hasTag() == other.hasTag());
      if (hasTag()) {
        result = result && (getTag()
            == other.getTag());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasPos()) {
        hash = (37 * hash) + POS_FIELD_NUMBER;
        hash = (53 * hash) + getPos().hashCode();
      }
      if (hasRadius()) {
        hash = (37 * hash) + RADIUS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRadius());
      }
      if (hasTag()) {
        hash = (37 * hash) + TAG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTag());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.PowerSource parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.PowerSource parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PowerSource parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.PowerSource parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PowerSource parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.PowerSource parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PowerSource parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.PowerSource parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PowerSource parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.PowerSource parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.PowerSource prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.PowerSource}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.PowerSource)
        SC2APIProtocol.Raw.PowerSourceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PowerSource_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PowerSource_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.PowerSource.class, SC2APIProtocol.Raw.PowerSource.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.PowerSource.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPosFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (posBuilder_ == null) {
          pos_ = null;
        } else {
          posBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        radius_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        tag_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PowerSource_descriptor;
      }

      public SC2APIProtocol.Raw.PowerSource getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.PowerSource.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.PowerSource build() {
        SC2APIProtocol.Raw.PowerSource result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.PowerSource buildPartial() {
        SC2APIProtocol.Raw.PowerSource result = new SC2APIProtocol.Raw.PowerSource(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (posBuilder_ == null) {
          result.pos_ = pos_;
        } else {
          result.pos_ = posBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.radius_ = radius_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.tag_ = tag_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.PowerSource) {
          return mergeFrom((SC2APIProtocol.Raw.PowerSource)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.PowerSource other) {
        if (other == SC2APIProtocol.Raw.PowerSource.getDefaultInstance()) return this;
        if (other.hasPos()) {
          mergePos(other.getPos());
        }
        if (other.hasRadius()) {
          setRadius(other.getRadius());
        }
        if (other.hasTag()) {
          setTag(other.getTag());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.PowerSource parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.PowerSource) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Common.Point pos_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder> posBuilder_;
      /**
       * <code>optional .SC2APIProtocol.Point pos = 1;</code>
       */
      public boolean hasPos() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 1;</code>
       */
      public SC2APIProtocol.Common.Point getPos() {
        if (posBuilder_ == null) {
          return pos_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : pos_;
        } else {
          return posBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 1;</code>
       */
      public Builder setPos(SC2APIProtocol.Common.Point value) {
        if (posBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pos_ = value;
          onChanged();
        } else {
          posBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 1;</code>
       */
      public Builder setPos(
          SC2APIProtocol.Common.Point.Builder builderForValue) {
        if (posBuilder_ == null) {
          pos_ = builderForValue.build();
          onChanged();
        } else {
          posBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 1;</code>
       */
      public Builder mergePos(SC2APIProtocol.Common.Point value) {
        if (posBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              pos_ != null &&
              pos_ != SC2APIProtocol.Common.Point.getDefaultInstance()) {
            pos_ =
              SC2APIProtocol.Common.Point.newBuilder(pos_).mergeFrom(value).buildPartial();
          } else {
            pos_ = value;
          }
          onChanged();
        } else {
          posBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 1;</code>
       */
      public Builder clearPos() {
        if (posBuilder_ == null) {
          pos_ = null;
          onChanged();
        } else {
          posBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 1;</code>
       */
      public SC2APIProtocol.Common.Point.Builder getPosBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getPosFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 1;</code>
       */
      public SC2APIProtocol.Common.PointOrBuilder getPosOrBuilder() {
        if (posBuilder_ != null) {
          return posBuilder_.getMessageOrBuilder();
        } else {
          return pos_ == null ?
              SC2APIProtocol.Common.Point.getDefaultInstance() : pos_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder> 
          getPosFieldBuilder() {
        if (posBuilder_ == null) {
          posBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder>(
                  getPos(),
                  getParentForChildren(),
                  isClean());
          pos_ = null;
        }
        return posBuilder_;
      }

      private float radius_ ;
      /**
       * <code>optional float radius = 2;</code>
       */
      public boolean hasRadius() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float radius = 2;</code>
       */
      public float getRadius() {
        return radius_;
      }
      /**
       * <code>optional float radius = 2;</code>
       */
      public Builder setRadius(float value) {
        bitField0_ |= 0x00000002;
        radius_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float radius = 2;</code>
       */
      public Builder clearRadius() {
        bitField0_ = (bitField0_ & ~0x00000002);
        radius_ = 0F;
        onChanged();
        return this;
      }

      private long tag_ ;
      /**
       * <code>optional uint64 tag = 3;</code>
       */
      public boolean hasTag() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint64 tag = 3;</code>
       */
      public long getTag() {
        return tag_;
      }
      /**
       * <code>optional uint64 tag = 3;</code>
       */
      public Builder setTag(long value) {
        bitField0_ |= 0x00000004;
        tag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 tag = 3;</code>
       */
      public Builder clearTag() {
        bitField0_ = (bitField0_ & ~0x00000004);
        tag_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.PowerSource)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.PowerSource)
    private static final SC2APIProtocol.Raw.PowerSource DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.PowerSource();
    }

    public static SC2APIProtocol.Raw.PowerSource getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<PowerSource>
        PARSER = new com.google.protobuf.AbstractParser<PowerSource>() {
      public PowerSource parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new PowerSource(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PowerSource> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PowerSource> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.PowerSource getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PlayerRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.PlayerRaw)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
     */
    java.util.List<SC2APIProtocol.Raw.PowerSource> 
        getPowerSourcesList();
    /**
     * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
     */
    SC2APIProtocol.Raw.PowerSource getPowerSources(int index);
    /**
     * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
     */
    int getPowerSourcesCount();
    /**
     * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
     */
    java.util.List<? extends SC2APIProtocol.Raw.PowerSourceOrBuilder> 
        getPowerSourcesOrBuilderList();
    /**
     * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
     */
    SC2APIProtocol.Raw.PowerSourceOrBuilder getPowerSourcesOrBuilder(
        int index);

    /**
     * <code>optional .SC2APIProtocol.Point camera = 2;</code>
     */
    boolean hasCamera();
    /**
     * <code>optional .SC2APIProtocol.Point camera = 2;</code>
     */
    SC2APIProtocol.Common.Point getCamera();
    /**
     * <code>optional .SC2APIProtocol.Point camera = 2;</code>
     */
    SC2APIProtocol.Common.PointOrBuilder getCameraOrBuilder();

    /**
     * <pre>
     * TODO: Add to UI observation?
     * </pre>
     *
     * <code>repeated uint32 upgrade_ids = 3;</code>
     */
    java.util.List<java.lang.Integer> getUpgradeIdsList();
    /**
     * <pre>
     * TODO: Add to UI observation?
     * </pre>
     *
     * <code>repeated uint32 upgrade_ids = 3;</code>
     */
    int getUpgradeIdsCount();
    /**
     * <pre>
     * TODO: Add to UI observation?
     * </pre>
     *
     * <code>repeated uint32 upgrade_ids = 3;</code>
     */
    int getUpgradeIds(int index);
  }
  /**
   * Protobuf type {@code SC2APIProtocol.PlayerRaw}
   */
  public  static final class PlayerRaw extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.PlayerRaw)
      PlayerRawOrBuilder {
    // Use PlayerRaw.newBuilder() to construct.
    private PlayerRaw(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PlayerRaw() {
      powerSources_ = java.util.Collections.emptyList();
      upgradeIds_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PlayerRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                powerSources_ = new java.util.ArrayList<SC2APIProtocol.Raw.PowerSource>();
                mutable_bitField0_ |= 0x00000001;
              }
              powerSources_.add(
                  input.readMessage(SC2APIProtocol.Raw.PowerSource.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              SC2APIProtocol.Common.Point.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = camera_.toBuilder();
              }
              camera_ = input.readMessage(SC2APIProtocol.Common.Point.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(camera_);
                camera_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                upgradeIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              upgradeIds_.add(input.readUInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                upgradeIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                upgradeIds_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          powerSources_ = java.util.Collections.unmodifiableList(powerSources_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          upgradeIds_ = java.util.Collections.unmodifiableList(upgradeIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PlayerRaw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PlayerRaw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.PlayerRaw.class, SC2APIProtocol.Raw.PlayerRaw.Builder.class);
    }

    private int bitField0_;
    public static final int POWER_SOURCES_FIELD_NUMBER = 1;
    private java.util.List<SC2APIProtocol.Raw.PowerSource> powerSources_;
    /**
     * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
     */
    public java.util.List<SC2APIProtocol.Raw.PowerSource> getPowerSourcesList() {
      return powerSources_;
    }
    /**
     * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
     */
    public java.util.List<? extends SC2APIProtocol.Raw.PowerSourceOrBuilder> 
        getPowerSourcesOrBuilderList() {
      return powerSources_;
    }
    /**
     * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
     */
    public int getPowerSourcesCount() {
      return powerSources_.size();
    }
    /**
     * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
     */
    public SC2APIProtocol.Raw.PowerSource getPowerSources(int index) {
      return powerSources_.get(index);
    }
    /**
     * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
     */
    public SC2APIProtocol.Raw.PowerSourceOrBuilder getPowerSourcesOrBuilder(
        int index) {
      return powerSources_.get(index);
    }

    public static final int CAMERA_FIELD_NUMBER = 2;
    private SC2APIProtocol.Common.Point camera_;
    /**
     * <code>optional .SC2APIProtocol.Point camera = 2;</code>
     */
    public boolean hasCamera() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SC2APIProtocol.Point camera = 2;</code>
     */
    public SC2APIProtocol.Common.Point getCamera() {
      return camera_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : camera_;
    }
    /**
     * <code>optional .SC2APIProtocol.Point camera = 2;</code>
     */
    public SC2APIProtocol.Common.PointOrBuilder getCameraOrBuilder() {
      return camera_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : camera_;
    }

    public static final int UPGRADE_IDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> upgradeIds_;
    /**
     * <pre>
     * TODO: Add to UI observation?
     * </pre>
     *
     * <code>repeated uint32 upgrade_ids = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getUpgradeIdsList() {
      return upgradeIds_;
    }
    /**
     * <pre>
     * TODO: Add to UI observation?
     * </pre>
     *
     * <code>repeated uint32 upgrade_ids = 3;</code>
     */
    public int getUpgradeIdsCount() {
      return upgradeIds_.size();
    }
    /**
     * <pre>
     * TODO: Add to UI observation?
     * </pre>
     *
     * <code>repeated uint32 upgrade_ids = 3;</code>
     */
    public int getUpgradeIds(int index) {
      return upgradeIds_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < powerSources_.size(); i++) {
        output.writeMessage(1, powerSources_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, getCamera());
      }
      for (int i = 0; i < upgradeIds_.size(); i++) {
        output.writeUInt32(3, upgradeIds_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < powerSources_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, powerSources_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCamera());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < upgradeIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(upgradeIds_.get(i));
        }
        size += dataSize;
        size += 1 * getUpgradeIdsList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.PlayerRaw)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.PlayerRaw other = (SC2APIProtocol.Raw.PlayerRaw) obj;

      boolean result = true;
      result = result && getPowerSourcesList()
          .equals(other.getPowerSourcesList());
      result = result && (hasCamera() == other.hasCamera());
      if (hasCamera()) {
        result = result && getCamera()
            .equals(other.getCamera());
      }
      result = result && getUpgradeIdsList()
          .equals(other.getUpgradeIdsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getPowerSourcesCount() > 0) {
        hash = (37 * hash) + POWER_SOURCES_FIELD_NUMBER;
        hash = (53 * hash) + getPowerSourcesList().hashCode();
      }
      if (hasCamera()) {
        hash = (37 * hash) + CAMERA_FIELD_NUMBER;
        hash = (53 * hash) + getCamera().hashCode();
      }
      if (getUpgradeIdsCount() > 0) {
        hash = (37 * hash) + UPGRADE_IDS_FIELD_NUMBER;
        hash = (53 * hash) + getUpgradeIdsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.PlayerRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.PlayerRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PlayerRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.PlayerRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PlayerRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.PlayerRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PlayerRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.PlayerRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PlayerRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.PlayerRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.PlayerRaw prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.PlayerRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.PlayerRaw)
        SC2APIProtocol.Raw.PlayerRawOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PlayerRaw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PlayerRaw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.PlayerRaw.class, SC2APIProtocol.Raw.PlayerRaw.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.PlayerRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPowerSourcesFieldBuilder();
          getCameraFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (powerSourcesBuilder_ == null) {
          powerSources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          powerSourcesBuilder_.clear();
        }
        if (cameraBuilder_ == null) {
          camera_ = null;
        } else {
          cameraBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        upgradeIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PlayerRaw_descriptor;
      }

      public SC2APIProtocol.Raw.PlayerRaw getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.PlayerRaw.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.PlayerRaw build() {
        SC2APIProtocol.Raw.PlayerRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.PlayerRaw buildPartial() {
        SC2APIProtocol.Raw.PlayerRaw result = new SC2APIProtocol.Raw.PlayerRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (powerSourcesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            powerSources_ = java.util.Collections.unmodifiableList(powerSources_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.powerSources_ = powerSources_;
        } else {
          result.powerSources_ = powerSourcesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        if (cameraBuilder_ == null) {
          result.camera_ = camera_;
        } else {
          result.camera_ = cameraBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          upgradeIds_ = java.util.Collections.unmodifiableList(upgradeIds_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.upgradeIds_ = upgradeIds_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.PlayerRaw) {
          return mergeFrom((SC2APIProtocol.Raw.PlayerRaw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.PlayerRaw other) {
        if (other == SC2APIProtocol.Raw.PlayerRaw.getDefaultInstance()) return this;
        if (powerSourcesBuilder_ == null) {
          if (!other.powerSources_.isEmpty()) {
            if (powerSources_.isEmpty()) {
              powerSources_ = other.powerSources_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePowerSourcesIsMutable();
              powerSources_.addAll(other.powerSources_);
            }
            onChanged();
          }
        } else {
          if (!other.powerSources_.isEmpty()) {
            if (powerSourcesBuilder_.isEmpty()) {
              powerSourcesBuilder_.dispose();
              powerSourcesBuilder_ = null;
              powerSources_ = other.powerSources_;
              bitField0_ = (bitField0_ & ~0x00000001);
              powerSourcesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPowerSourcesFieldBuilder() : null;
            } else {
              powerSourcesBuilder_.addAllMessages(other.powerSources_);
            }
          }
        }
        if (other.hasCamera()) {
          mergeCamera(other.getCamera());
        }
        if (!other.upgradeIds_.isEmpty()) {
          if (upgradeIds_.isEmpty()) {
            upgradeIds_ = other.upgradeIds_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureUpgradeIdsIsMutable();
            upgradeIds_.addAll(other.upgradeIds_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.PlayerRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.PlayerRaw) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<SC2APIProtocol.Raw.PowerSource> powerSources_ =
        java.util.Collections.emptyList();
      private void ensurePowerSourcesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          powerSources_ = new java.util.ArrayList<SC2APIProtocol.Raw.PowerSource>(powerSources_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Raw.PowerSource, SC2APIProtocol.Raw.PowerSource.Builder, SC2APIProtocol.Raw.PowerSourceOrBuilder> powerSourcesBuilder_;

      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public java.util.List<SC2APIProtocol.Raw.PowerSource> getPowerSourcesList() {
        if (powerSourcesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(powerSources_);
        } else {
          return powerSourcesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public int getPowerSourcesCount() {
        if (powerSourcesBuilder_ == null) {
          return powerSources_.size();
        } else {
          return powerSourcesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public SC2APIProtocol.Raw.PowerSource getPowerSources(int index) {
        if (powerSourcesBuilder_ == null) {
          return powerSources_.get(index);
        } else {
          return powerSourcesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public Builder setPowerSources(
          int index, SC2APIProtocol.Raw.PowerSource value) {
        if (powerSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePowerSourcesIsMutable();
          powerSources_.set(index, value);
          onChanged();
        } else {
          powerSourcesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public Builder setPowerSources(
          int index, SC2APIProtocol.Raw.PowerSource.Builder builderForValue) {
        if (powerSourcesBuilder_ == null) {
          ensurePowerSourcesIsMutable();
          powerSources_.set(index, builderForValue.build());
          onChanged();
        } else {
          powerSourcesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public Builder addPowerSources(SC2APIProtocol.Raw.PowerSource value) {
        if (powerSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePowerSourcesIsMutable();
          powerSources_.add(value);
          onChanged();
        } else {
          powerSourcesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public Builder addPowerSources(
          int index, SC2APIProtocol.Raw.PowerSource value) {
        if (powerSourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePowerSourcesIsMutable();
          powerSources_.add(index, value);
          onChanged();
        } else {
          powerSourcesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public Builder addPowerSources(
          SC2APIProtocol.Raw.PowerSource.Builder builderForValue) {
        if (powerSourcesBuilder_ == null) {
          ensurePowerSourcesIsMutable();
          powerSources_.add(builderForValue.build());
          onChanged();
        } else {
          powerSourcesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public Builder addPowerSources(
          int index, SC2APIProtocol.Raw.PowerSource.Builder builderForValue) {
        if (powerSourcesBuilder_ == null) {
          ensurePowerSourcesIsMutable();
          powerSources_.add(index, builderForValue.build());
          onChanged();
        } else {
          powerSourcesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public Builder addAllPowerSources(
          java.lang.Iterable<? extends SC2APIProtocol.Raw.PowerSource> values) {
        if (powerSourcesBuilder_ == null) {
          ensurePowerSourcesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, powerSources_);
          onChanged();
        } else {
          powerSourcesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public Builder clearPowerSources() {
        if (powerSourcesBuilder_ == null) {
          powerSources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          powerSourcesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public Builder removePowerSources(int index) {
        if (powerSourcesBuilder_ == null) {
          ensurePowerSourcesIsMutable();
          powerSources_.remove(index);
          onChanged();
        } else {
          powerSourcesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public SC2APIProtocol.Raw.PowerSource.Builder getPowerSourcesBuilder(
          int index) {
        return getPowerSourcesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public SC2APIProtocol.Raw.PowerSourceOrBuilder getPowerSourcesOrBuilder(
          int index) {
        if (powerSourcesBuilder_ == null) {
          return powerSources_.get(index);  } else {
          return powerSourcesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public java.util.List<? extends SC2APIProtocol.Raw.PowerSourceOrBuilder> 
           getPowerSourcesOrBuilderList() {
        if (powerSourcesBuilder_ != null) {
          return powerSourcesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(powerSources_);
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public SC2APIProtocol.Raw.PowerSource.Builder addPowerSourcesBuilder() {
        return getPowerSourcesFieldBuilder().addBuilder(
            SC2APIProtocol.Raw.PowerSource.getDefaultInstance());
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public SC2APIProtocol.Raw.PowerSource.Builder addPowerSourcesBuilder(
          int index) {
        return getPowerSourcesFieldBuilder().addBuilder(
            index, SC2APIProtocol.Raw.PowerSource.getDefaultInstance());
      }
      /**
       * <code>repeated .SC2APIProtocol.PowerSource power_sources = 1;</code>
       */
      public java.util.List<SC2APIProtocol.Raw.PowerSource.Builder> 
           getPowerSourcesBuilderList() {
        return getPowerSourcesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Raw.PowerSource, SC2APIProtocol.Raw.PowerSource.Builder, SC2APIProtocol.Raw.PowerSourceOrBuilder> 
          getPowerSourcesFieldBuilder() {
        if (powerSourcesBuilder_ == null) {
          powerSourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              SC2APIProtocol.Raw.PowerSource, SC2APIProtocol.Raw.PowerSource.Builder, SC2APIProtocol.Raw.PowerSourceOrBuilder>(
                  powerSources_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          powerSources_ = null;
        }
        return powerSourcesBuilder_;
      }

      private SC2APIProtocol.Common.Point camera_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder> cameraBuilder_;
      /**
       * <code>optional .SC2APIProtocol.Point camera = 2;</code>
       */
      public boolean hasCamera() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .SC2APIProtocol.Point camera = 2;</code>
       */
      public SC2APIProtocol.Common.Point getCamera() {
        if (cameraBuilder_ == null) {
          return camera_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : camera_;
        } else {
          return cameraBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point camera = 2;</code>
       */
      public Builder setCamera(SC2APIProtocol.Common.Point value) {
        if (cameraBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          camera_ = value;
          onChanged();
        } else {
          cameraBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point camera = 2;</code>
       */
      public Builder setCamera(
          SC2APIProtocol.Common.Point.Builder builderForValue) {
        if (cameraBuilder_ == null) {
          camera_ = builderForValue.build();
          onChanged();
        } else {
          cameraBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point camera = 2;</code>
       */
      public Builder mergeCamera(SC2APIProtocol.Common.Point value) {
        if (cameraBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              camera_ != null &&
              camera_ != SC2APIProtocol.Common.Point.getDefaultInstance()) {
            camera_ =
              SC2APIProtocol.Common.Point.newBuilder(camera_).mergeFrom(value).buildPartial();
          } else {
            camera_ = value;
          }
          onChanged();
        } else {
          cameraBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point camera = 2;</code>
       */
      public Builder clearCamera() {
        if (cameraBuilder_ == null) {
          camera_ = null;
          onChanged();
        } else {
          cameraBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point camera = 2;</code>
       */
      public SC2APIProtocol.Common.Point.Builder getCameraBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getCameraFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.Point camera = 2;</code>
       */
      public SC2APIProtocol.Common.PointOrBuilder getCameraOrBuilder() {
        if (cameraBuilder_ != null) {
          return cameraBuilder_.getMessageOrBuilder();
        } else {
          return camera_ == null ?
              SC2APIProtocol.Common.Point.getDefaultInstance() : camera_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point camera = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder> 
          getCameraFieldBuilder() {
        if (cameraBuilder_ == null) {
          cameraBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder>(
                  getCamera(),
                  getParentForChildren(),
                  isClean());
          camera_ = null;
        }
        return cameraBuilder_;
      }

      private java.util.List<java.lang.Integer> upgradeIds_ = java.util.Collections.emptyList();
      private void ensureUpgradeIdsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          upgradeIds_ = new java.util.ArrayList<java.lang.Integer>(upgradeIds_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * TODO: Add to UI observation?
       * </pre>
       *
       * <code>repeated uint32 upgrade_ids = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getUpgradeIdsList() {
        return java.util.Collections.unmodifiableList(upgradeIds_);
      }
      /**
       * <pre>
       * TODO: Add to UI observation?
       * </pre>
       *
       * <code>repeated uint32 upgrade_ids = 3;</code>
       */
      public int getUpgradeIdsCount() {
        return upgradeIds_.size();
      }
      /**
       * <pre>
       * TODO: Add to UI observation?
       * </pre>
       *
       * <code>repeated uint32 upgrade_ids = 3;</code>
       */
      public int getUpgradeIds(int index) {
        return upgradeIds_.get(index);
      }
      /**
       * <pre>
       * TODO: Add to UI observation?
       * </pre>
       *
       * <code>repeated uint32 upgrade_ids = 3;</code>
       */
      public Builder setUpgradeIds(
          int index, int value) {
        ensureUpgradeIdsIsMutable();
        upgradeIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: Add to UI observation?
       * </pre>
       *
       * <code>repeated uint32 upgrade_ids = 3;</code>
       */
      public Builder addUpgradeIds(int value) {
        ensureUpgradeIdsIsMutable();
        upgradeIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: Add to UI observation?
       * </pre>
       *
       * <code>repeated uint32 upgrade_ids = 3;</code>
       */
      public Builder addAllUpgradeIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUpgradeIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, upgradeIds_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: Add to UI observation?
       * </pre>
       *
       * <code>repeated uint32 upgrade_ids = 3;</code>
       */
      public Builder clearUpgradeIds() {
        upgradeIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.PlayerRaw)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.PlayerRaw)
    private static final SC2APIProtocol.Raw.PlayerRaw DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.PlayerRaw();
    }

    public static SC2APIProtocol.Raw.PlayerRaw getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<PlayerRaw>
        PARSER = new com.google.protobuf.AbstractParser<PlayerRaw>() {
      public PlayerRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new PlayerRaw(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PlayerRaw> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PlayerRaw> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.PlayerRaw getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnitOrderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.UnitOrder)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 ability_id = 1;</code>
     */
    boolean hasAbilityId();
    /**
     * <code>optional uint32 ability_id = 1;</code>
     */
    int getAbilityId();

    /**
     * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
     */
    boolean hasTargetWorldSpacePos();
    /**
     * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
     */
    SC2APIProtocol.Common.Point getTargetWorldSpacePos();
    /**
     * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
     */
    SC2APIProtocol.Common.PointOrBuilder getTargetWorldSpacePosOrBuilder();

    /**
     * <code>optional uint64 target_unit_tag = 3;</code>
     */
    boolean hasTargetUnitTag();
    /**
     * <code>optional uint64 target_unit_tag = 3;</code>
     */
    long getTargetUnitTag();

    /**
     * <pre>
     * Progress of train abilities. Range: [0.0, 1.0]
     * </pre>
     *
     * <code>optional float progress = 4;</code>
     */
    boolean hasProgress();
    /**
     * <pre>
     * Progress of train abilities. Range: [0.0, 1.0]
     * </pre>
     *
     * <code>optional float progress = 4;</code>
     */
    float getProgress();

    public SC2APIProtocol.Raw.UnitOrder.TargetCase getTargetCase();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.UnitOrder}
   */
  public  static final class UnitOrder extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.UnitOrder)
      UnitOrderOrBuilder {
    // Use UnitOrder.newBuilder() to construct.
    private UnitOrder(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UnitOrder() {
      abilityId_ = 0;
      progress_ = 0F;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UnitOrder(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              abilityId_ = input.readUInt32();
              break;
            }
            case 18: {
              SC2APIProtocol.Common.Point.Builder subBuilder = null;
              if (targetCase_ == 2) {
                subBuilder = ((SC2APIProtocol.Common.Point) target_).toBuilder();
              }
              target_ =
                  input.readMessage(SC2APIProtocol.Common.Point.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Common.Point) target_);
                target_ = subBuilder.buildPartial();
              }
              targetCase_ = 2;
              break;
            }
            case 24: {
              targetCase_ = 3;
              target_ = input.readUInt64();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              progress_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_UnitOrder_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_UnitOrder_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.UnitOrder.class, SC2APIProtocol.Raw.UnitOrder.Builder.class);
    }

    private int bitField0_;
    private int targetCase_ = 0;
    private java.lang.Object target_;
    public enum TargetCase
        implements com.google.protobuf.Internal.EnumLite {
      TARGET_WORLD_SPACE_POS(2),
      TARGET_UNIT_TAG(3),
      TARGET_NOT_SET(0);
      private final int value;
      private TargetCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TargetCase valueOf(int value) {
        return forNumber(value);
      }

      public static TargetCase forNumber(int value) {
        switch (value) {
          case 2: return TARGET_WORLD_SPACE_POS;
          case 3: return TARGET_UNIT_TAG;
          case 0: return TARGET_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TargetCase
    getTargetCase() {
      return TargetCase.forNumber(
          targetCase_);
    }

    public static final int ABILITY_ID_FIELD_NUMBER = 1;
    private int abilityId_;
    /**
     * <code>optional uint32 ability_id = 1;</code>
     */
    public boolean hasAbilityId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 ability_id = 1;</code>
     */
    public int getAbilityId() {
      return abilityId_;
    }

    public static final int TARGET_WORLD_SPACE_POS_FIELD_NUMBER = 2;
    /**
     * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
     */
    public boolean hasTargetWorldSpacePos() {
      return targetCase_ == 2;
    }
    /**
     * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
     */
    public SC2APIProtocol.Common.Point getTargetWorldSpacePos() {
      if (targetCase_ == 2) {
         return (SC2APIProtocol.Common.Point) target_;
      }
      return SC2APIProtocol.Common.Point.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
     */
    public SC2APIProtocol.Common.PointOrBuilder getTargetWorldSpacePosOrBuilder() {
      if (targetCase_ == 2) {
         return (SC2APIProtocol.Common.Point) target_;
      }
      return SC2APIProtocol.Common.Point.getDefaultInstance();
    }

    public static final int TARGET_UNIT_TAG_FIELD_NUMBER = 3;
    /**
     * <code>optional uint64 target_unit_tag = 3;</code>
     */
    public boolean hasTargetUnitTag() {
      return targetCase_ == 3;
    }
    /**
     * <code>optional uint64 target_unit_tag = 3;</code>
     */
    public long getTargetUnitTag() {
      if (targetCase_ == 3) {
        return (java.lang.Long) target_;
      }
      return 0L;
    }

    public static final int PROGRESS_FIELD_NUMBER = 4;
    private float progress_;
    /**
     * <pre>
     * Progress of train abilities. Range: [0.0, 1.0]
     * </pre>
     *
     * <code>optional float progress = 4;</code>
     */
    public boolean hasProgress() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Progress of train abilities. Range: [0.0, 1.0]
     * </pre>
     *
     * <code>optional float progress = 4;</code>
     */
    public float getProgress() {
      return progress_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, abilityId_);
      }
      if (targetCase_ == 2) {
        output.writeMessage(2, (SC2APIProtocol.Common.Point) target_);
      }
      if (targetCase_ == 3) {
        output.writeUInt64(
            3, (long)((java.lang.Long) target_));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, progress_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, abilityId_);
      }
      if (targetCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (SC2APIProtocol.Common.Point) target_);
      }
      if (targetCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              3, (long)((java.lang.Long) target_));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, progress_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.UnitOrder)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.UnitOrder other = (SC2APIProtocol.Raw.UnitOrder) obj;

      boolean result = true;
      result = result && (hasAbilityId() == other.hasAbilityId());
      if (hasAbilityId()) {
        result = result && (getAbilityId()
            == other.getAbilityId());
      }
      result = result && (hasProgress() == other.hasProgress());
      if (hasProgress()) {
        result = result && (
            java.lang.Float.floatToIntBits(getProgress())
            == java.lang.Float.floatToIntBits(
                other.getProgress()));
      }
      result = result && getTargetCase().equals(
          other.getTargetCase());
      if (!result) return false;
      switch (targetCase_) {
        case 2:
          result = result && getTargetWorldSpacePos()
              .equals(other.getTargetWorldSpacePos());
          break;
        case 3:
          result = result && (getTargetUnitTag()
              == other.getTargetUnitTag());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasAbilityId()) {
        hash = (37 * hash) + ABILITY_ID_FIELD_NUMBER;
        hash = (53 * hash) + getAbilityId();
      }
      if (hasProgress()) {
        hash = (37 * hash) + PROGRESS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getProgress());
      }
      switch (targetCase_) {
        case 2:
          hash = (37 * hash) + TARGET_WORLD_SPACE_POS_FIELD_NUMBER;
          hash = (53 * hash) + getTargetWorldSpacePos().hashCode();
          break;
        case 3:
          hash = (37 * hash) + TARGET_UNIT_TAG_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTargetUnitTag());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.UnitOrder parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.UnitOrder parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.UnitOrder parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.UnitOrder parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.UnitOrder parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.UnitOrder parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.UnitOrder parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.UnitOrder parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.UnitOrder parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.UnitOrder parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.UnitOrder prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.UnitOrder}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.UnitOrder)
        SC2APIProtocol.Raw.UnitOrderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_UnitOrder_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_UnitOrder_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.UnitOrder.class, SC2APIProtocol.Raw.UnitOrder.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.UnitOrder.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        abilityId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        progress_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        targetCase_ = 0;
        target_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_UnitOrder_descriptor;
      }

      public SC2APIProtocol.Raw.UnitOrder getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.UnitOrder.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.UnitOrder build() {
        SC2APIProtocol.Raw.UnitOrder result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.UnitOrder buildPartial() {
        SC2APIProtocol.Raw.UnitOrder result = new SC2APIProtocol.Raw.UnitOrder(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.abilityId_ = abilityId_;
        if (targetCase_ == 2) {
          if (targetWorldSpacePosBuilder_ == null) {
            result.target_ = target_;
          } else {
            result.target_ = targetWorldSpacePosBuilder_.build();
          }
        }
        if (targetCase_ == 3) {
          result.target_ = target_;
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.progress_ = progress_;
        result.bitField0_ = to_bitField0_;
        result.targetCase_ = targetCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.UnitOrder) {
          return mergeFrom((SC2APIProtocol.Raw.UnitOrder)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.UnitOrder other) {
        if (other == SC2APIProtocol.Raw.UnitOrder.getDefaultInstance()) return this;
        if (other.hasAbilityId()) {
          setAbilityId(other.getAbilityId());
        }
        if (other.hasProgress()) {
          setProgress(other.getProgress());
        }
        switch (other.getTargetCase()) {
          case TARGET_WORLD_SPACE_POS: {
            mergeTargetWorldSpacePos(other.getTargetWorldSpacePos());
            break;
          }
          case TARGET_UNIT_TAG: {
            setTargetUnitTag(other.getTargetUnitTag());
            break;
          }
          case TARGET_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.UnitOrder parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.UnitOrder) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int targetCase_ = 0;
      private java.lang.Object target_;
      public TargetCase
          getTargetCase() {
        return TargetCase.forNumber(
            targetCase_);
      }

      public Builder clearTarget() {
        targetCase_ = 0;
        target_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int abilityId_ ;
      /**
       * <code>optional uint32 ability_id = 1;</code>
       */
      public boolean hasAbilityId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 ability_id = 1;</code>
       */
      public int getAbilityId() {
        return abilityId_;
      }
      /**
       * <code>optional uint32 ability_id = 1;</code>
       */
      public Builder setAbilityId(int value) {
        bitField0_ |= 0x00000001;
        abilityId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ability_id = 1;</code>
       */
      public Builder clearAbilityId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        abilityId_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder> targetWorldSpacePosBuilder_;
      /**
       * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
       */
      public boolean hasTargetWorldSpacePos() {
        return targetCase_ == 2;
      }
      /**
       * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
       */
      public SC2APIProtocol.Common.Point getTargetWorldSpacePos() {
        if (targetWorldSpacePosBuilder_ == null) {
          if (targetCase_ == 2) {
            return (SC2APIProtocol.Common.Point) target_;
          }
          return SC2APIProtocol.Common.Point.getDefaultInstance();
        } else {
          if (targetCase_ == 2) {
            return targetWorldSpacePosBuilder_.getMessage();
          }
          return SC2APIProtocol.Common.Point.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
       */
      public Builder setTargetWorldSpacePos(SC2APIProtocol.Common.Point value) {
        if (targetWorldSpacePosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetWorldSpacePosBuilder_.setMessage(value);
        }
        targetCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
       */
      public Builder setTargetWorldSpacePos(
          SC2APIProtocol.Common.Point.Builder builderForValue) {
        if (targetWorldSpacePosBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetWorldSpacePosBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
       */
      public Builder mergeTargetWorldSpacePos(SC2APIProtocol.Common.Point value) {
        if (targetWorldSpacePosBuilder_ == null) {
          if (targetCase_ == 2 &&
              target_ != SC2APIProtocol.Common.Point.getDefaultInstance()) {
            target_ = SC2APIProtocol.Common.Point.newBuilder((SC2APIProtocol.Common.Point) target_)
                .mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 2) {
            targetWorldSpacePosBuilder_.mergeFrom(value);
          }
          targetWorldSpacePosBuilder_.setMessage(value);
        }
        targetCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
       */
      public Builder clearTargetWorldSpacePos() {
        if (targetWorldSpacePosBuilder_ == null) {
          if (targetCase_ == 2) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 2) {
            targetCase_ = 0;
            target_ = null;
          }
          targetWorldSpacePosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
       */
      public SC2APIProtocol.Common.Point.Builder getTargetWorldSpacePosBuilder() {
        return getTargetWorldSpacePosFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
       */
      public SC2APIProtocol.Common.PointOrBuilder getTargetWorldSpacePosOrBuilder() {
        if ((targetCase_ == 2) && (targetWorldSpacePosBuilder_ != null)) {
          return targetWorldSpacePosBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 2) {
            return (SC2APIProtocol.Common.Point) target_;
          }
          return SC2APIProtocol.Common.Point.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point target_world_space_pos = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder> 
          getTargetWorldSpacePosFieldBuilder() {
        if (targetWorldSpacePosBuilder_ == null) {
          if (!(targetCase_ == 2)) {
            target_ = SC2APIProtocol.Common.Point.getDefaultInstance();
          }
          targetWorldSpacePosBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder>(
                  (SC2APIProtocol.Common.Point) target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 2;
        onChanged();;
        return targetWorldSpacePosBuilder_;
      }

      /**
       * <code>optional uint64 target_unit_tag = 3;</code>
       */
      public boolean hasTargetUnitTag() {
        return targetCase_ == 3;
      }
      /**
       * <code>optional uint64 target_unit_tag = 3;</code>
       */
      public long getTargetUnitTag() {
        if (targetCase_ == 3) {
          return (java.lang.Long) target_;
        }
        return 0L;
      }
      /**
       * <code>optional uint64 target_unit_tag = 3;</code>
       */
      public Builder setTargetUnitTag(long value) {
        targetCase_ = 3;
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 target_unit_tag = 3;</code>
       */
      public Builder clearTargetUnitTag() {
        if (targetCase_ == 3) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
        return this;
      }

      private float progress_ ;
      /**
       * <pre>
       * Progress of train abilities. Range: [0.0, 1.0]
       * </pre>
       *
       * <code>optional float progress = 4;</code>
       */
      public boolean hasProgress() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Progress of train abilities. Range: [0.0, 1.0]
       * </pre>
       *
       * <code>optional float progress = 4;</code>
       */
      public float getProgress() {
        return progress_;
      }
      /**
       * <pre>
       * Progress of train abilities. Range: [0.0, 1.0]
       * </pre>
       *
       * <code>optional float progress = 4;</code>
       */
      public Builder setProgress(float value) {
        bitField0_ |= 0x00000008;
        progress_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Progress of train abilities. Range: [0.0, 1.0]
       * </pre>
       *
       * <code>optional float progress = 4;</code>
       */
      public Builder clearProgress() {
        bitField0_ = (bitField0_ & ~0x00000008);
        progress_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.UnitOrder)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.UnitOrder)
    private static final SC2APIProtocol.Raw.UnitOrder DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.UnitOrder();
    }

    public static SC2APIProtocol.Raw.UnitOrder getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<UnitOrder>
        PARSER = new com.google.protobuf.AbstractParser<UnitOrder>() {
      public UnitOrder parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new UnitOrder(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UnitOrder> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UnitOrder> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.UnitOrder getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PassengerUnitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.PassengerUnit)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint64 tag = 1;</code>
     */
    boolean hasTag();
    /**
     * <code>optional uint64 tag = 1;</code>
     */
    long getTag();

    /**
     * <code>optional float health = 2;</code>
     */
    boolean hasHealth();
    /**
     * <code>optional float health = 2;</code>
     */
    float getHealth();

    /**
     * <code>optional float health_max = 3;</code>
     */
    boolean hasHealthMax();
    /**
     * <code>optional float health_max = 3;</code>
     */
    float getHealthMax();

    /**
     * <code>optional float shield = 4;</code>
     */
    boolean hasShield();
    /**
     * <code>optional float shield = 4;</code>
     */
    float getShield();

    /**
     * <code>optional float energy = 5;</code>
     */
    boolean hasEnergy();
    /**
     * <code>optional float energy = 5;</code>
     */
    float getEnergy();

    /**
     * <code>optional uint32 unit_type = 6;</code>
     */
    boolean hasUnitType();
    /**
     * <code>optional uint32 unit_type = 6;</code>
     */
    int getUnitType();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.PassengerUnit}
   */
  public  static final class PassengerUnit extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.PassengerUnit)
      PassengerUnitOrBuilder {
    // Use PassengerUnit.newBuilder() to construct.
    private PassengerUnit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PassengerUnit() {
      tag_ = 0L;
      health_ = 0F;
      healthMax_ = 0F;
      shield_ = 0F;
      energy_ = 0F;
      unitType_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PassengerUnit(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              tag_ = input.readUInt64();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              health_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              healthMax_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              shield_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              energy_ = input.readFloat();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              unitType_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PassengerUnit_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PassengerUnit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.PassengerUnit.class, SC2APIProtocol.Raw.PassengerUnit.Builder.class);
    }

    private int bitField0_;
    public static final int TAG_FIELD_NUMBER = 1;
    private long tag_;
    /**
     * <code>optional uint64 tag = 1;</code>
     */
    public boolean hasTag() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 tag = 1;</code>
     */
    public long getTag() {
      return tag_;
    }

    public static final int HEALTH_FIELD_NUMBER = 2;
    private float health_;
    /**
     * <code>optional float health = 2;</code>
     */
    public boolean hasHealth() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float health = 2;</code>
     */
    public float getHealth() {
      return health_;
    }

    public static final int HEALTH_MAX_FIELD_NUMBER = 3;
    private float healthMax_;
    /**
     * <code>optional float health_max = 3;</code>
     */
    public boolean hasHealthMax() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float health_max = 3;</code>
     */
    public float getHealthMax() {
      return healthMax_;
    }

    public static final int SHIELD_FIELD_NUMBER = 4;
    private float shield_;
    /**
     * <code>optional float shield = 4;</code>
     */
    public boolean hasShield() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float shield = 4;</code>
     */
    public float getShield() {
      return shield_;
    }

    public static final int ENERGY_FIELD_NUMBER = 5;
    private float energy_;
    /**
     * <code>optional float energy = 5;</code>
     */
    public boolean hasEnergy() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float energy = 5;</code>
     */
    public float getEnergy() {
      return energy_;
    }

    public static final int UNIT_TYPE_FIELD_NUMBER = 6;
    private int unitType_;
    /**
     * <code>optional uint32 unit_type = 6;</code>
     */
    public boolean hasUnitType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 unit_type = 6;</code>
     */
    public int getUnitType() {
      return unitType_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, tag_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, health_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, healthMax_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, shield_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, energy_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, unitType_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, tag_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, health_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, healthMax_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, shield_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, energy_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, unitType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.PassengerUnit)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.PassengerUnit other = (SC2APIProtocol.Raw.PassengerUnit) obj;

      boolean result = true;
      result = result && (hasTag() == other.hasTag());
      if (hasTag()) {
        result = result && (getTag()
            == other.getTag());
      }
      result = result && (hasHealth() == other.hasHealth());
      if (hasHealth()) {
        result = result && (
            java.lang.Float.floatToIntBits(getHealth())
            == java.lang.Float.floatToIntBits(
                other.getHealth()));
      }
      result = result && (hasHealthMax() == other.hasHealthMax());
      if (hasHealthMax()) {
        result = result && (
            java.lang.Float.floatToIntBits(getHealthMax())
            == java.lang.Float.floatToIntBits(
                other.getHealthMax()));
      }
      result = result && (hasShield() == other.hasShield());
      if (hasShield()) {
        result = result && (
            java.lang.Float.floatToIntBits(getShield())
            == java.lang.Float.floatToIntBits(
                other.getShield()));
      }
      result = result && (hasEnergy() == other.hasEnergy());
      if (hasEnergy()) {
        result = result && (
            java.lang.Float.floatToIntBits(getEnergy())
            == java.lang.Float.floatToIntBits(
                other.getEnergy()));
      }
      result = result && (hasUnitType() == other.hasUnitType());
      if (hasUnitType()) {
        result = result && (getUnitType()
            == other.getUnitType());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasTag()) {
        hash = (37 * hash) + TAG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTag());
      }
      if (hasHealth()) {
        hash = (37 * hash) + HEALTH_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getHealth());
      }
      if (hasHealthMax()) {
        hash = (37 * hash) + HEALTH_MAX_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getHealthMax());
      }
      if (hasShield()) {
        hash = (37 * hash) + SHIELD_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getShield());
      }
      if (hasEnergy()) {
        hash = (37 * hash) + ENERGY_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getEnergy());
      }
      if (hasUnitType()) {
        hash = (37 * hash) + UNIT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getUnitType();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.PassengerUnit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.PassengerUnit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PassengerUnit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.PassengerUnit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PassengerUnit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.PassengerUnit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PassengerUnit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.PassengerUnit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.PassengerUnit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.PassengerUnit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.PassengerUnit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.PassengerUnit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.PassengerUnit)
        SC2APIProtocol.Raw.PassengerUnitOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PassengerUnit_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PassengerUnit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.PassengerUnit.class, SC2APIProtocol.Raw.PassengerUnit.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.PassengerUnit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        tag_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        health_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        healthMax_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        shield_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        energy_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        unitType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_PassengerUnit_descriptor;
      }

      public SC2APIProtocol.Raw.PassengerUnit getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.PassengerUnit.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.PassengerUnit build() {
        SC2APIProtocol.Raw.PassengerUnit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.PassengerUnit buildPartial() {
        SC2APIProtocol.Raw.PassengerUnit result = new SC2APIProtocol.Raw.PassengerUnit(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tag_ = tag_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.health_ = health_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.healthMax_ = healthMax_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.shield_ = shield_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.energy_ = energy_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.unitType_ = unitType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.PassengerUnit) {
          return mergeFrom((SC2APIProtocol.Raw.PassengerUnit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.PassengerUnit other) {
        if (other == SC2APIProtocol.Raw.PassengerUnit.getDefaultInstance()) return this;
        if (other.hasTag()) {
          setTag(other.getTag());
        }
        if (other.hasHealth()) {
          setHealth(other.getHealth());
        }
        if (other.hasHealthMax()) {
          setHealthMax(other.getHealthMax());
        }
        if (other.hasShield()) {
          setShield(other.getShield());
        }
        if (other.hasEnergy()) {
          setEnergy(other.getEnergy());
        }
        if (other.hasUnitType()) {
          setUnitType(other.getUnitType());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.PassengerUnit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.PassengerUnit) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long tag_ ;
      /**
       * <code>optional uint64 tag = 1;</code>
       */
      public boolean hasTag() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 tag = 1;</code>
       */
      public long getTag() {
        return tag_;
      }
      /**
       * <code>optional uint64 tag = 1;</code>
       */
      public Builder setTag(long value) {
        bitField0_ |= 0x00000001;
        tag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 tag = 1;</code>
       */
      public Builder clearTag() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tag_ = 0L;
        onChanged();
        return this;
      }

      private float health_ ;
      /**
       * <code>optional float health = 2;</code>
       */
      public boolean hasHealth() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float health = 2;</code>
       */
      public float getHealth() {
        return health_;
      }
      /**
       * <code>optional float health = 2;</code>
       */
      public Builder setHealth(float value) {
        bitField0_ |= 0x00000002;
        health_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float health = 2;</code>
       */
      public Builder clearHealth() {
        bitField0_ = (bitField0_ & ~0x00000002);
        health_ = 0F;
        onChanged();
        return this;
      }

      private float healthMax_ ;
      /**
       * <code>optional float health_max = 3;</code>
       */
      public boolean hasHealthMax() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float health_max = 3;</code>
       */
      public float getHealthMax() {
        return healthMax_;
      }
      /**
       * <code>optional float health_max = 3;</code>
       */
      public Builder setHealthMax(float value) {
        bitField0_ |= 0x00000004;
        healthMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float health_max = 3;</code>
       */
      public Builder clearHealthMax() {
        bitField0_ = (bitField0_ & ~0x00000004);
        healthMax_ = 0F;
        onChanged();
        return this;
      }

      private float shield_ ;
      /**
       * <code>optional float shield = 4;</code>
       */
      public boolean hasShield() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float shield = 4;</code>
       */
      public float getShield() {
        return shield_;
      }
      /**
       * <code>optional float shield = 4;</code>
       */
      public Builder setShield(float value) {
        bitField0_ |= 0x00000008;
        shield_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float shield = 4;</code>
       */
      public Builder clearShield() {
        bitField0_ = (bitField0_ & ~0x00000008);
        shield_ = 0F;
        onChanged();
        return this;
      }

      private float energy_ ;
      /**
       * <code>optional float energy = 5;</code>
       */
      public boolean hasEnergy() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float energy = 5;</code>
       */
      public float getEnergy() {
        return energy_;
      }
      /**
       * <code>optional float energy = 5;</code>
       */
      public Builder setEnergy(float value) {
        bitField0_ |= 0x00000010;
        energy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float energy = 5;</code>
       */
      public Builder clearEnergy() {
        bitField0_ = (bitField0_ & ~0x00000010);
        energy_ = 0F;
        onChanged();
        return this;
      }

      private int unitType_ ;
      /**
       * <code>optional uint32 unit_type = 6;</code>
       */
      public boolean hasUnitType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 unit_type = 6;</code>
       */
      public int getUnitType() {
        return unitType_;
      }
      /**
       * <code>optional uint32 unit_type = 6;</code>
       */
      public Builder setUnitType(int value) {
        bitField0_ |= 0x00000020;
        unitType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 unit_type = 6;</code>
       */
      public Builder clearUnitType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        unitType_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.PassengerUnit)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.PassengerUnit)
    private static final SC2APIProtocol.Raw.PassengerUnit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.PassengerUnit();
    }

    public static SC2APIProtocol.Raw.PassengerUnit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<PassengerUnit>
        PARSER = new com.google.protobuf.AbstractParser<PassengerUnit>() {
      public PassengerUnit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new PassengerUnit(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PassengerUnit> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PassengerUnit> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.PassengerUnit getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.Unit)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Fields are populated based on type/alliance
     * </pre>
     *
     * <code>optional .SC2APIProtocol.DisplayType display_type = 1;</code>
     */
    boolean hasDisplayType();
    /**
     * <pre>
     * Fields are populated based on type/alliance
     * </pre>
     *
     * <code>optional .SC2APIProtocol.DisplayType display_type = 1;</code>
     */
    SC2APIProtocol.Raw.DisplayType getDisplayType();

    /**
     * <code>optional .SC2APIProtocol.Alliance alliance = 2;</code>
     */
    boolean hasAlliance();
    /**
     * <code>optional .SC2APIProtocol.Alliance alliance = 2;</code>
     */
    SC2APIProtocol.Raw.Alliance getAlliance();

    /**
     * <pre>
     * Unique identifier for a unit
     * </pre>
     *
     * <code>optional uint64 tag = 3;</code>
     */
    boolean hasTag();
    /**
     * <pre>
     * Unique identifier for a unit
     * </pre>
     *
     * <code>optional uint64 tag = 3;</code>
     */
    long getTag();

    /**
     * <code>optional uint32 unit_type = 4;</code>
     */
    boolean hasUnitType();
    /**
     * <code>optional uint32 unit_type = 4;</code>
     */
    int getUnitType();

    /**
     * <code>optional int32 owner = 5;</code>
     */
    boolean hasOwner();
    /**
     * <code>optional int32 owner = 5;</code>
     */
    int getOwner();

    /**
     * <code>optional .SC2APIProtocol.Point pos = 6;</code>
     */
    boolean hasPos();
    /**
     * <code>optional .SC2APIProtocol.Point pos = 6;</code>
     */
    SC2APIProtocol.Common.Point getPos();
    /**
     * <code>optional .SC2APIProtocol.Point pos = 6;</code>
     */
    SC2APIProtocol.Common.PointOrBuilder getPosOrBuilder();

    /**
     * <code>optional float facing = 7;</code>
     */
    boolean hasFacing();
    /**
     * <code>optional float facing = 7;</code>
     */
    float getFacing();

    /**
     * <code>optional float radius = 8;</code>
     */
    boolean hasRadius();
    /**
     * <code>optional float radius = 8;</code>
     */
    float getRadius();

    /**
     * <pre>
     * Range: [0.0, 1.0]
     * </pre>
     *
     * <code>optional float build_progress = 9;</code>
     */
    boolean hasBuildProgress();
    /**
     * <pre>
     * Range: [0.0, 1.0]
     * </pre>
     *
     * <code>optional float build_progress = 9;</code>
     */
    float getBuildProgress();

    /**
     * <code>optional .SC2APIProtocol.CloakState cloak = 10;</code>
     */
    boolean hasCloak();
    /**
     * <code>optional .SC2APIProtocol.CloakState cloak = 10;</code>
     */
    SC2APIProtocol.Raw.CloakState getCloak();

    /**
     * <code>optional float detect_range = 31;</code>
     */
    boolean hasDetectRange();
    /**
     * <code>optional float detect_range = 31;</code>
     */
    float getDetectRange();

    /**
     * <code>optional float radar_range = 32;</code>
     */
    boolean hasRadarRange();
    /**
     * <code>optional float radar_range = 32;</code>
     */
    float getRadarRange();

    /**
     * <code>optional bool is_selected = 11;</code>
     */
    boolean hasIsSelected();
    /**
     * <code>optional bool is_selected = 11;</code>
     */
    boolean getIsSelected();

    /**
     * <pre>
     * Visible and within the camera frustrum.
     * </pre>
     *
     * <code>optional bool is_on_screen = 12;</code>
     */
    boolean hasIsOnScreen();
    /**
     * <pre>
     * Visible and within the camera frustrum.
     * </pre>
     *
     * <code>optional bool is_on_screen = 12;</code>
     */
    boolean getIsOnScreen();

    /**
     * <pre>
     * Detected by sensor tower
     * </pre>
     *
     * <code>optional bool is_blip = 13;</code>
     */
    boolean hasIsBlip();
    /**
     * <pre>
     * Detected by sensor tower
     * </pre>
     *
     * <code>optional bool is_blip = 13;</code>
     */
    boolean getIsBlip();

    /**
     * <pre>
     * Not populated for snapshots
     * </pre>
     *
     * <code>optional float health = 14;</code>
     */
    boolean hasHealth();
    /**
     * <pre>
     * Not populated for snapshots
     * </pre>
     *
     * <code>optional float health = 14;</code>
     */
    float getHealth();

    /**
     * <code>optional float health_max = 15;</code>
     */
    boolean hasHealthMax();
    /**
     * <code>optional float health_max = 15;</code>
     */
    float getHealthMax();

    /**
     * <code>optional float shield = 16;</code>
     */
    boolean hasShield();
    /**
     * <code>optional float shield = 16;</code>
     */
    float getShield();

    /**
     * <code>optional float energy = 17;</code>
     */
    boolean hasEnergy();
    /**
     * <code>optional float energy = 17;</code>
     */
    float getEnergy();

    /**
     * <code>optional int32 mineral_contents = 18;</code>
     */
    boolean hasMineralContents();
    /**
     * <code>optional int32 mineral_contents = 18;</code>
     */
    int getMineralContents();

    /**
     * <code>optional int32 vespene_contents = 19;</code>
     */
    boolean hasVespeneContents();
    /**
     * <code>optional int32 vespene_contents = 19;</code>
     */
    int getVespeneContents();

    /**
     * <code>optional bool is_flying = 20;</code>
     */
    boolean hasIsFlying();
    /**
     * <code>optional bool is_flying = 20;</code>
     */
    boolean getIsFlying();

    /**
     * <code>optional bool is_burrowed = 21;</code>
     */
    boolean hasIsBurrowed();
    /**
     * <code>optional bool is_burrowed = 21;</code>
     */
    boolean getIsBurrowed();

    /**
     * <pre>
     * Not populated for enemies
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
     */
    java.util.List<SC2APIProtocol.Raw.UnitOrder> 
        getOrdersList();
    /**
     * <pre>
     * Not populated for enemies
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
     */
    SC2APIProtocol.Raw.UnitOrder getOrders(int index);
    /**
     * <pre>
     * Not populated for enemies
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
     */
    int getOrdersCount();
    /**
     * <pre>
     * Not populated for enemies
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
     */
    java.util.List<? extends SC2APIProtocol.Raw.UnitOrderOrBuilder> 
        getOrdersOrBuilderList();
    /**
     * <pre>
     * Not populated for enemies
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
     */
    SC2APIProtocol.Raw.UnitOrderOrBuilder getOrdersOrBuilder(
        int index);

    /**
     * <code>optional uint64 add_on_tag = 23;</code>
     */
    boolean hasAddOnTag();
    /**
     * <code>optional uint64 add_on_tag = 23;</code>
     */
    long getAddOnTag();

    /**
     * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
     */
    java.util.List<SC2APIProtocol.Raw.PassengerUnit> 
        getPassengersList();
    /**
     * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
     */
    SC2APIProtocol.Raw.PassengerUnit getPassengers(int index);
    /**
     * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
     */
    int getPassengersCount();
    /**
     * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
     */
    java.util.List<? extends SC2APIProtocol.Raw.PassengerUnitOrBuilder> 
        getPassengersOrBuilderList();
    /**
     * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
     */
    SC2APIProtocol.Raw.PassengerUnitOrBuilder getPassengersOrBuilder(
        int index);

    /**
     * <code>optional int32 cargo_space_taken = 25;</code>
     */
    boolean hasCargoSpaceTaken();
    /**
     * <code>optional int32 cargo_space_taken = 25;</code>
     */
    int getCargoSpaceTaken();

    /**
     * <code>optional int32 cargo_space_max = 26;</code>
     */
    boolean hasCargoSpaceMax();
    /**
     * <code>optional int32 cargo_space_max = 26;</code>
     */
    int getCargoSpaceMax();

    /**
     * <pre>
     * TODO: Should this be populated for enemies?
     * </pre>
     *
     * <code>repeated uint32 buff_ids = 27;</code>
     */
    java.util.List<java.lang.Integer> getBuffIdsList();
    /**
     * <pre>
     * TODO: Should this be populated for enemies?
     * </pre>
     *
     * <code>repeated uint32 buff_ids = 27;</code>
     */
    int getBuffIdsCount();
    /**
     * <pre>
     * TODO: Should this be populated for enemies?
     * </pre>
     *
     * <code>repeated uint32 buff_ids = 27;</code>
     */
    int getBuffIds(int index);

    /**
     * <code>optional int32 assigned_harvesters = 28;</code>
     */
    boolean hasAssignedHarvesters();
    /**
     * <code>optional int32 assigned_harvesters = 28;</code>
     */
    int getAssignedHarvesters();

    /**
     * <code>optional int32 ideal_harvesters = 29;</code>
     */
    boolean hasIdealHarvesters();
    /**
     * <code>optional int32 ideal_harvesters = 29;</code>
     */
    int getIdealHarvesters();

    /**
     * <code>optional float weapon_cooldown = 30;</code>
     */
    boolean hasWeaponCooldown();
    /**
     * <code>optional float weapon_cooldown = 30;</code>
     */
    float getWeaponCooldown();

    /**
     * <code>optional uint64 engaged_target_tag = 34;</code>
     */
    boolean hasEngagedTargetTag();
    /**
     * <code>optional uint64 engaged_target_tag = 34;</code>
     */
    long getEngagedTargetTag();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.Unit}
   */
  public  static final class Unit extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.Unit)
      UnitOrBuilder {
    // Use Unit.newBuilder() to construct.
    private Unit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Unit() {
      displayType_ = 1;
      alliance_ = 1;
      tag_ = 0L;
      unitType_ = 0;
      owner_ = 0;
      facing_ = 0F;
      radius_ = 0F;
      buildProgress_ = 0F;
      cloak_ = 1;
      detectRange_ = 0F;
      radarRange_ = 0F;
      isSelected_ = false;
      isOnScreen_ = false;
      isBlip_ = false;
      health_ = 0F;
      healthMax_ = 0F;
      shield_ = 0F;
      energy_ = 0F;
      mineralContents_ = 0;
      vespeneContents_ = 0;
      isFlying_ = false;
      isBurrowed_ = false;
      orders_ = java.util.Collections.emptyList();
      addOnTag_ = 0L;
      passengers_ = java.util.Collections.emptyList();
      cargoSpaceTaken_ = 0;
      cargoSpaceMax_ = 0;
      buffIds_ = java.util.Collections.emptyList();
      assignedHarvesters_ = 0;
      idealHarvesters_ = 0;
      weaponCooldown_ = 0F;
      engagedTargetTag_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Unit(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              SC2APIProtocol.Raw.DisplayType value = SC2APIProtocol.Raw.DisplayType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                displayType_ = rawValue;
              }
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              SC2APIProtocol.Raw.Alliance value = SC2APIProtocol.Raw.Alliance.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                alliance_ = rawValue;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              tag_ = input.readUInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              unitType_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              owner_ = input.readInt32();
              break;
            }
            case 50: {
              SC2APIProtocol.Common.Point.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = pos_.toBuilder();
              }
              pos_ = input.readMessage(SC2APIProtocol.Common.Point.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pos_);
                pos_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              facing_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              radius_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              buildProgress_ = input.readFloat();
              break;
            }
            case 80: {
              int rawValue = input.readEnum();
              SC2APIProtocol.Raw.CloakState value = SC2APIProtocol.Raw.CloakState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(10, rawValue);
              } else {
                bitField0_ |= 0x00000200;
                cloak_ = rawValue;
              }
              break;
            }
            case 88: {
              bitField0_ |= 0x00001000;
              isSelected_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00002000;
              isOnScreen_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00004000;
              isBlip_ = input.readBool();
              break;
            }
            case 117: {
              bitField0_ |= 0x00008000;
              health_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00010000;
              healthMax_ = input.readFloat();
              break;
            }
            case 133: {
              bitField0_ |= 0x00020000;
              shield_ = input.readFloat();
              break;
            }
            case 141: {
              bitField0_ |= 0x00040000;
              energy_ = input.readFloat();
              break;
            }
            case 144: {
              bitField0_ |= 0x00080000;
              mineralContents_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00100000;
              vespeneContents_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00200000;
              isFlying_ = input.readBool();
              break;
            }
            case 168: {
              bitField0_ |= 0x00400000;
              isBurrowed_ = input.readBool();
              break;
            }
            case 178: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                orders_ = new java.util.ArrayList<SC2APIProtocol.Raw.UnitOrder>();
                mutable_bitField0_ |= 0x00800000;
              }
              orders_.add(
                  input.readMessage(SC2APIProtocol.Raw.UnitOrder.PARSER, extensionRegistry));
              break;
            }
            case 184: {
              bitField0_ |= 0x00800000;
              addOnTag_ = input.readUInt64();
              break;
            }
            case 194: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                passengers_ = new java.util.ArrayList<SC2APIProtocol.Raw.PassengerUnit>();
                mutable_bitField0_ |= 0x02000000;
              }
              passengers_.add(
                  input.readMessage(SC2APIProtocol.Raw.PassengerUnit.PARSER, extensionRegistry));
              break;
            }
            case 200: {
              bitField0_ |= 0x01000000;
              cargoSpaceTaken_ = input.readInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x02000000;
              cargoSpaceMax_ = input.readInt32();
              break;
            }
            case 216: {
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
                buffIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x10000000;
              }
              buffIds_.add(input.readUInt32());
              break;
            }
            case 218: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000) && input.getBytesUntilLimit() > 0) {
                buffIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x10000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                buffIds_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 224: {
              bitField0_ |= 0x04000000;
              assignedHarvesters_ = input.readInt32();
              break;
            }
            case 232: {
              bitField0_ |= 0x08000000;
              idealHarvesters_ = input.readInt32();
              break;
            }
            case 245: {
              bitField0_ |= 0x10000000;
              weaponCooldown_ = input.readFloat();
              break;
            }
            case 253: {
              bitField0_ |= 0x00000400;
              detectRange_ = input.readFloat();
              break;
            }
            case 261: {
              bitField0_ |= 0x00000800;
              radarRange_ = input.readFloat();
              break;
            }
            case 272: {
              bitField0_ |= 0x20000000;
              engagedTargetTag_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          orders_ = java.util.Collections.unmodifiableList(orders_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          passengers_ = java.util.Collections.unmodifiableList(passengers_);
        }
        if (((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
          buffIds_ = java.util.Collections.unmodifiableList(buffIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_Unit_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_Unit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.Unit.class, SC2APIProtocol.Raw.Unit.Builder.class);
    }

    private int bitField0_;
    public static final int DISPLAY_TYPE_FIELD_NUMBER = 1;
    private int displayType_;
    /**
     * <pre>
     * Fields are populated based on type/alliance
     * </pre>
     *
     * <code>optional .SC2APIProtocol.DisplayType display_type = 1;</code>
     */
    public boolean hasDisplayType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Fields are populated based on type/alliance
     * </pre>
     *
     * <code>optional .SC2APIProtocol.DisplayType display_type = 1;</code>
     */
    public SC2APIProtocol.Raw.DisplayType getDisplayType() {
      SC2APIProtocol.Raw.DisplayType result = SC2APIProtocol.Raw.DisplayType.valueOf(displayType_);
      return result == null ? SC2APIProtocol.Raw.DisplayType.Visible : result;
    }

    public static final int ALLIANCE_FIELD_NUMBER = 2;
    private int alliance_;
    /**
     * <code>optional .SC2APIProtocol.Alliance alliance = 2;</code>
     */
    public boolean hasAlliance() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .SC2APIProtocol.Alliance alliance = 2;</code>
     */
    public SC2APIProtocol.Raw.Alliance getAlliance() {
      SC2APIProtocol.Raw.Alliance result = SC2APIProtocol.Raw.Alliance.valueOf(alliance_);
      return result == null ? SC2APIProtocol.Raw.Alliance.Self : result;
    }

    public static final int TAG_FIELD_NUMBER = 3;
    private long tag_;
    /**
     * <pre>
     * Unique identifier for a unit
     * </pre>
     *
     * <code>optional uint64 tag = 3;</code>
     */
    public boolean hasTag() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Unique identifier for a unit
     * </pre>
     *
     * <code>optional uint64 tag = 3;</code>
     */
    public long getTag() {
      return tag_;
    }

    public static final int UNIT_TYPE_FIELD_NUMBER = 4;
    private int unitType_;
    /**
     * <code>optional uint32 unit_type = 4;</code>
     */
    public boolean hasUnitType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 unit_type = 4;</code>
     */
    public int getUnitType() {
      return unitType_;
    }

    public static final int OWNER_FIELD_NUMBER = 5;
    private int owner_;
    /**
     * <code>optional int32 owner = 5;</code>
     */
    public boolean hasOwner() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 owner = 5;</code>
     */
    public int getOwner() {
      return owner_;
    }

    public static final int POS_FIELD_NUMBER = 6;
    private SC2APIProtocol.Common.Point pos_;
    /**
     * <code>optional .SC2APIProtocol.Point pos = 6;</code>
     */
    public boolean hasPos() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .SC2APIProtocol.Point pos = 6;</code>
     */
    public SC2APIProtocol.Common.Point getPos() {
      return pos_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : pos_;
    }
    /**
     * <code>optional .SC2APIProtocol.Point pos = 6;</code>
     */
    public SC2APIProtocol.Common.PointOrBuilder getPosOrBuilder() {
      return pos_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : pos_;
    }

    public static final int FACING_FIELD_NUMBER = 7;
    private float facing_;
    /**
     * <code>optional float facing = 7;</code>
     */
    public boolean hasFacing() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float facing = 7;</code>
     */
    public float getFacing() {
      return facing_;
    }

    public static final int RADIUS_FIELD_NUMBER = 8;
    private float radius_;
    /**
     * <code>optional float radius = 8;</code>
     */
    public boolean hasRadius() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float radius = 8;</code>
     */
    public float getRadius() {
      return radius_;
    }

    public static final int BUILD_PROGRESS_FIELD_NUMBER = 9;
    private float buildProgress_;
    /**
     * <pre>
     * Range: [0.0, 1.0]
     * </pre>
     *
     * <code>optional float build_progress = 9;</code>
     */
    public boolean hasBuildProgress() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * Range: [0.0, 1.0]
     * </pre>
     *
     * <code>optional float build_progress = 9;</code>
     */
    public float getBuildProgress() {
      return buildProgress_;
    }

    public static final int CLOAK_FIELD_NUMBER = 10;
    private int cloak_;
    /**
     * <code>optional .SC2APIProtocol.CloakState cloak = 10;</code>
     */
    public boolean hasCloak() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .SC2APIProtocol.CloakState cloak = 10;</code>
     */
    public SC2APIProtocol.Raw.CloakState getCloak() {
      SC2APIProtocol.Raw.CloakState result = SC2APIProtocol.Raw.CloakState.valueOf(cloak_);
      return result == null ? SC2APIProtocol.Raw.CloakState.Cloaked : result;
    }

    public static final int DETECT_RANGE_FIELD_NUMBER = 31;
    private float detectRange_;
    /**
     * <code>optional float detect_range = 31;</code>
     */
    public boolean hasDetectRange() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float detect_range = 31;</code>
     */
    public float getDetectRange() {
      return detectRange_;
    }

    public static final int RADAR_RANGE_FIELD_NUMBER = 32;
    private float radarRange_;
    /**
     * <code>optional float radar_range = 32;</code>
     */
    public boolean hasRadarRange() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float radar_range = 32;</code>
     */
    public float getRadarRange() {
      return radarRange_;
    }

    public static final int IS_SELECTED_FIELD_NUMBER = 11;
    private boolean isSelected_;
    /**
     * <code>optional bool is_selected = 11;</code>
     */
    public boolean hasIsSelected() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool is_selected = 11;</code>
     */
    public boolean getIsSelected() {
      return isSelected_;
    }

    public static final int IS_ON_SCREEN_FIELD_NUMBER = 12;
    private boolean isOnScreen_;
    /**
     * <pre>
     * Visible and within the camera frustrum.
     * </pre>
     *
     * <code>optional bool is_on_screen = 12;</code>
     */
    public boolean hasIsOnScreen() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     * Visible and within the camera frustrum.
     * </pre>
     *
     * <code>optional bool is_on_screen = 12;</code>
     */
    public boolean getIsOnScreen() {
      return isOnScreen_;
    }

    public static final int IS_BLIP_FIELD_NUMBER = 13;
    private boolean isBlip_;
    /**
     * <pre>
     * Detected by sensor tower
     * </pre>
     *
     * <code>optional bool is_blip = 13;</code>
     */
    public boolean hasIsBlip() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <pre>
     * Detected by sensor tower
     * </pre>
     *
     * <code>optional bool is_blip = 13;</code>
     */
    public boolean getIsBlip() {
      return isBlip_;
    }

    public static final int HEALTH_FIELD_NUMBER = 14;
    private float health_;
    /**
     * <pre>
     * Not populated for snapshots
     * </pre>
     *
     * <code>optional float health = 14;</code>
     */
    public boolean hasHealth() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <pre>
     * Not populated for snapshots
     * </pre>
     *
     * <code>optional float health = 14;</code>
     */
    public float getHealth() {
      return health_;
    }

    public static final int HEALTH_MAX_FIELD_NUMBER = 15;
    private float healthMax_;
    /**
     * <code>optional float health_max = 15;</code>
     */
    public boolean hasHealthMax() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float health_max = 15;</code>
     */
    public float getHealthMax() {
      return healthMax_;
    }

    public static final int SHIELD_FIELD_NUMBER = 16;
    private float shield_;
    /**
     * <code>optional float shield = 16;</code>
     */
    public boolean hasShield() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float shield = 16;</code>
     */
    public float getShield() {
      return shield_;
    }

    public static final int ENERGY_FIELD_NUMBER = 17;
    private float energy_;
    /**
     * <code>optional float energy = 17;</code>
     */
    public boolean hasEnergy() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float energy = 17;</code>
     */
    public float getEnergy() {
      return energy_;
    }

    public static final int MINERAL_CONTENTS_FIELD_NUMBER = 18;
    private int mineralContents_;
    /**
     * <code>optional int32 mineral_contents = 18;</code>
     */
    public boolean hasMineralContents() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 mineral_contents = 18;</code>
     */
    public int getMineralContents() {
      return mineralContents_;
    }

    public static final int VESPENE_CONTENTS_FIELD_NUMBER = 19;
    private int vespeneContents_;
    /**
     * <code>optional int32 vespene_contents = 19;</code>
     */
    public boolean hasVespeneContents() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional int32 vespene_contents = 19;</code>
     */
    public int getVespeneContents() {
      return vespeneContents_;
    }

    public static final int IS_FLYING_FIELD_NUMBER = 20;
    private boolean isFlying_;
    /**
     * <code>optional bool is_flying = 20;</code>
     */
    public boolean hasIsFlying() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional bool is_flying = 20;</code>
     */
    public boolean getIsFlying() {
      return isFlying_;
    }

    public static final int IS_BURROWED_FIELD_NUMBER = 21;
    private boolean isBurrowed_;
    /**
     * <code>optional bool is_burrowed = 21;</code>
     */
    public boolean hasIsBurrowed() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional bool is_burrowed = 21;</code>
     */
    public boolean getIsBurrowed() {
      return isBurrowed_;
    }

    public static final int ORDERS_FIELD_NUMBER = 22;
    private java.util.List<SC2APIProtocol.Raw.UnitOrder> orders_;
    /**
     * <pre>
     * Not populated for enemies
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
     */
    public java.util.List<SC2APIProtocol.Raw.UnitOrder> getOrdersList() {
      return orders_;
    }
    /**
     * <pre>
     * Not populated for enemies
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
     */
    public java.util.List<? extends SC2APIProtocol.Raw.UnitOrderOrBuilder> 
        getOrdersOrBuilderList() {
      return orders_;
    }
    /**
     * <pre>
     * Not populated for enemies
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
     */
    public int getOrdersCount() {
      return orders_.size();
    }
    /**
     * <pre>
     * Not populated for enemies
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
     */
    public SC2APIProtocol.Raw.UnitOrder getOrders(int index) {
      return orders_.get(index);
    }
    /**
     * <pre>
     * Not populated for enemies
     * </pre>
     *
     * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
     */
    public SC2APIProtocol.Raw.UnitOrderOrBuilder getOrdersOrBuilder(
        int index) {
      return orders_.get(index);
    }

    public static final int ADD_ON_TAG_FIELD_NUMBER = 23;
    private long addOnTag_;
    /**
     * <code>optional uint64 add_on_tag = 23;</code>
     */
    public boolean hasAddOnTag() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint64 add_on_tag = 23;</code>
     */
    public long getAddOnTag() {
      return addOnTag_;
    }

    public static final int PASSENGERS_FIELD_NUMBER = 24;
    private java.util.List<SC2APIProtocol.Raw.PassengerUnit> passengers_;
    /**
     * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
     */
    public java.util.List<SC2APIProtocol.Raw.PassengerUnit> getPassengersList() {
      return passengers_;
    }
    /**
     * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
     */
    public java.util.List<? extends SC2APIProtocol.Raw.PassengerUnitOrBuilder> 
        getPassengersOrBuilderList() {
      return passengers_;
    }
    /**
     * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
     */
    public int getPassengersCount() {
      return passengers_.size();
    }
    /**
     * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
     */
    public SC2APIProtocol.Raw.PassengerUnit getPassengers(int index) {
      return passengers_.get(index);
    }
    /**
     * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
     */
    public SC2APIProtocol.Raw.PassengerUnitOrBuilder getPassengersOrBuilder(
        int index) {
      return passengers_.get(index);
    }

    public static final int CARGO_SPACE_TAKEN_FIELD_NUMBER = 25;
    private int cargoSpaceTaken_;
    /**
     * <code>optional int32 cargo_space_taken = 25;</code>
     */
    public boolean hasCargoSpaceTaken() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional int32 cargo_space_taken = 25;</code>
     */
    public int getCargoSpaceTaken() {
      return cargoSpaceTaken_;
    }

    public static final int CARGO_SPACE_MAX_FIELD_NUMBER = 26;
    private int cargoSpaceMax_;
    /**
     * <code>optional int32 cargo_space_max = 26;</code>
     */
    public boolean hasCargoSpaceMax() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional int32 cargo_space_max = 26;</code>
     */
    public int getCargoSpaceMax() {
      return cargoSpaceMax_;
    }

    public static final int BUFF_IDS_FIELD_NUMBER = 27;
    private java.util.List<java.lang.Integer> buffIds_;
    /**
     * <pre>
     * TODO: Should this be populated for enemies?
     * </pre>
     *
     * <code>repeated uint32 buff_ids = 27;</code>
     */
    public java.util.List<java.lang.Integer>
        getBuffIdsList() {
      return buffIds_;
    }
    /**
     * <pre>
     * TODO: Should this be populated for enemies?
     * </pre>
     *
     * <code>repeated uint32 buff_ids = 27;</code>
     */
    public int getBuffIdsCount() {
      return buffIds_.size();
    }
    /**
     * <pre>
     * TODO: Should this be populated for enemies?
     * </pre>
     *
     * <code>repeated uint32 buff_ids = 27;</code>
     */
    public int getBuffIds(int index) {
      return buffIds_.get(index);
    }

    public static final int ASSIGNED_HARVESTERS_FIELD_NUMBER = 28;
    private int assignedHarvesters_;
    /**
     * <code>optional int32 assigned_harvesters = 28;</code>
     */
    public boolean hasAssignedHarvesters() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional int32 assigned_harvesters = 28;</code>
     */
    public int getAssignedHarvesters() {
      return assignedHarvesters_;
    }

    public static final int IDEAL_HARVESTERS_FIELD_NUMBER = 29;
    private int idealHarvesters_;
    /**
     * <code>optional int32 ideal_harvesters = 29;</code>
     */
    public boolean hasIdealHarvesters() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional int32 ideal_harvesters = 29;</code>
     */
    public int getIdealHarvesters() {
      return idealHarvesters_;
    }

    public static final int WEAPON_COOLDOWN_FIELD_NUMBER = 30;
    private float weaponCooldown_;
    /**
     * <code>optional float weapon_cooldown = 30;</code>
     */
    public boolean hasWeaponCooldown() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional float weapon_cooldown = 30;</code>
     */
    public float getWeaponCooldown() {
      return weaponCooldown_;
    }

    public static final int ENGAGED_TARGET_TAG_FIELD_NUMBER = 34;
    private long engagedTargetTag_;
    /**
     * <code>optional uint64 engaged_target_tag = 34;</code>
     */
    public boolean hasEngagedTargetTag() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional uint64 engaged_target_tag = 34;</code>
     */
    public long getEngagedTargetTag() {
      return engagedTargetTag_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, displayType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, alliance_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, tag_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, unitType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, owner_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, getPos());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, facing_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, radius_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, buildProgress_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeEnum(10, cloak_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(11, isSelected_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBool(12, isOnScreen_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBool(13, isBlip_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(14, health_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(15, healthMax_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(16, shield_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(17, energy_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(18, mineralContents_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(19, vespeneContents_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeBool(20, isFlying_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeBool(21, isBurrowed_);
      }
      for (int i = 0; i < orders_.size(); i++) {
        output.writeMessage(22, orders_.get(i));
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeUInt64(23, addOnTag_);
      }
      for (int i = 0; i < passengers_.size(); i++) {
        output.writeMessage(24, passengers_.get(i));
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(25, cargoSpaceTaken_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(26, cargoSpaceMax_);
      }
      for (int i = 0; i < buffIds_.size(); i++) {
        output.writeUInt32(27, buffIds_.get(i));
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(28, assignedHarvesters_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(29, idealHarvesters_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeFloat(30, weaponCooldown_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(31, detectRange_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(32, radarRange_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeUInt64(34, engagedTargetTag_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, displayType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, alliance_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, tag_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, unitType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, owner_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getPos());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, facing_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, radius_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, buildProgress_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, cloak_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isSelected_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, isOnScreen_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, isBlip_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, health_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, healthMax_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(16, shield_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, energy_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, mineralContents_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, vespeneContents_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20, isFlying_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, isBurrowed_);
      }
      for (int i = 0; i < orders_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, orders_.get(i));
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(23, addOnTag_);
      }
      for (int i = 0; i < passengers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, passengers_.get(i));
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, cargoSpaceTaken_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(26, cargoSpaceMax_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < buffIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(buffIds_.get(i));
        }
        size += dataSize;
        size += 2 * getBuffIdsList().size();
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, assignedHarvesters_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(29, idealHarvesters_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(30, weaponCooldown_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(31, detectRange_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(32, radarRange_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(34, engagedTargetTag_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.Unit)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.Unit other = (SC2APIProtocol.Raw.Unit) obj;

      boolean result = true;
      result = result && (hasDisplayType() == other.hasDisplayType());
      if (hasDisplayType()) {
        result = result && displayType_ == other.displayType_;
      }
      result = result && (hasAlliance() == other.hasAlliance());
      if (hasAlliance()) {
        result = result && alliance_ == other.alliance_;
      }
      result = result && (hasTag() == other.hasTag());
      if (hasTag()) {
        result = result && (getTag()
            == other.getTag());
      }
      result = result && (hasUnitType() == other.hasUnitType());
      if (hasUnitType()) {
        result = result && (getUnitType()
            == other.getUnitType());
      }
      result = result && (hasOwner() == other.hasOwner());
      if (hasOwner()) {
        result = result && (getOwner()
            == other.getOwner());
      }
      result = result && (hasPos() == other.hasPos());
      if (hasPos()) {
        result = result && getPos()
            .equals(other.getPos());
      }
      result = result && (hasFacing() == other.hasFacing());
      if (hasFacing()) {
        result = result && (
            java.lang.Float.floatToIntBits(getFacing())
            == java.lang.Float.floatToIntBits(
                other.getFacing()));
      }
      result = result && (hasRadius() == other.hasRadius());
      if (hasRadius()) {
        result = result && (
            java.lang.Float.floatToIntBits(getRadius())
            == java.lang.Float.floatToIntBits(
                other.getRadius()));
      }
      result = result && (hasBuildProgress() == other.hasBuildProgress());
      if (hasBuildProgress()) {
        result = result && (
            java.lang.Float.floatToIntBits(getBuildProgress())
            == java.lang.Float.floatToIntBits(
                other.getBuildProgress()));
      }
      result = result && (hasCloak() == other.hasCloak());
      if (hasCloak()) {
        result = result && cloak_ == other.cloak_;
      }
      result = result && (hasDetectRange() == other.hasDetectRange());
      if (hasDetectRange()) {
        result = result && (
            java.lang.Float.floatToIntBits(getDetectRange())
            == java.lang.Float.floatToIntBits(
                other.getDetectRange()));
      }
      result = result && (hasRadarRange() == other.hasRadarRange());
      if (hasRadarRange()) {
        result = result && (
            java.lang.Float.floatToIntBits(getRadarRange())
            == java.lang.Float.floatToIntBits(
                other.getRadarRange()));
      }
      result = result && (hasIsSelected() == other.hasIsSelected());
      if (hasIsSelected()) {
        result = result && (getIsSelected()
            == other.getIsSelected());
      }
      result = result && (hasIsOnScreen() == other.hasIsOnScreen());
      if (hasIsOnScreen()) {
        result = result && (getIsOnScreen()
            == other.getIsOnScreen());
      }
      result = result && (hasIsBlip() == other.hasIsBlip());
      if (hasIsBlip()) {
        result = result && (getIsBlip()
            == other.getIsBlip());
      }
      result = result && (hasHealth() == other.hasHealth());
      if (hasHealth()) {
        result = result && (
            java.lang.Float.floatToIntBits(getHealth())
            == java.lang.Float.floatToIntBits(
                other.getHealth()));
      }
      result = result && (hasHealthMax() == other.hasHealthMax());
      if (hasHealthMax()) {
        result = result && (
            java.lang.Float.floatToIntBits(getHealthMax())
            == java.lang.Float.floatToIntBits(
                other.getHealthMax()));
      }
      result = result && (hasShield() == other.hasShield());
      if (hasShield()) {
        result = result && (
            java.lang.Float.floatToIntBits(getShield())
            == java.lang.Float.floatToIntBits(
                other.getShield()));
      }
      result = result && (hasEnergy() == other.hasEnergy());
      if (hasEnergy()) {
        result = result && (
            java.lang.Float.floatToIntBits(getEnergy())
            == java.lang.Float.floatToIntBits(
                other.getEnergy()));
      }
      result = result && (hasMineralContents() == other.hasMineralContents());
      if (hasMineralContents()) {
        result = result && (getMineralContents()
            == other.getMineralContents());
      }
      result = result && (hasVespeneContents() == other.hasVespeneContents());
      if (hasVespeneContents()) {
        result = result && (getVespeneContents()
            == other.getVespeneContents());
      }
      result = result && (hasIsFlying() == other.hasIsFlying());
      if (hasIsFlying()) {
        result = result && (getIsFlying()
            == other.getIsFlying());
      }
      result = result && (hasIsBurrowed() == other.hasIsBurrowed());
      if (hasIsBurrowed()) {
        result = result && (getIsBurrowed()
            == other.getIsBurrowed());
      }
      result = result && getOrdersList()
          .equals(other.getOrdersList());
      result = result && (hasAddOnTag() == other.hasAddOnTag());
      if (hasAddOnTag()) {
        result = result && (getAddOnTag()
            == other.getAddOnTag());
      }
      result = result && getPassengersList()
          .equals(other.getPassengersList());
      result = result && (hasCargoSpaceTaken() == other.hasCargoSpaceTaken());
      if (hasCargoSpaceTaken()) {
        result = result && (getCargoSpaceTaken()
            == other.getCargoSpaceTaken());
      }
      result = result && (hasCargoSpaceMax() == other.hasCargoSpaceMax());
      if (hasCargoSpaceMax()) {
        result = result && (getCargoSpaceMax()
            == other.getCargoSpaceMax());
      }
      result = result && getBuffIdsList()
          .equals(other.getBuffIdsList());
      result = result && (hasAssignedHarvesters() == other.hasAssignedHarvesters());
      if (hasAssignedHarvesters()) {
        result = result && (getAssignedHarvesters()
            == other.getAssignedHarvesters());
      }
      result = result && (hasIdealHarvesters() == other.hasIdealHarvesters());
      if (hasIdealHarvesters()) {
        result = result && (getIdealHarvesters()
            == other.getIdealHarvesters());
      }
      result = result && (hasWeaponCooldown() == other.hasWeaponCooldown());
      if (hasWeaponCooldown()) {
        result = result && (
            java.lang.Float.floatToIntBits(getWeaponCooldown())
            == java.lang.Float.floatToIntBits(
                other.getWeaponCooldown()));
      }
      result = result && (hasEngagedTargetTag() == other.hasEngagedTargetTag());
      if (hasEngagedTargetTag()) {
        result = result && (getEngagedTargetTag()
            == other.getEngagedTargetTag());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasDisplayType()) {
        hash = (37 * hash) + DISPLAY_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + displayType_;
      }
      if (hasAlliance()) {
        hash = (37 * hash) + ALLIANCE_FIELD_NUMBER;
        hash = (53 * hash) + alliance_;
      }
      if (hasTag()) {
        hash = (37 * hash) + TAG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTag());
      }
      if (hasUnitType()) {
        hash = (37 * hash) + UNIT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getUnitType();
      }
      if (hasOwner()) {
        hash = (37 * hash) + OWNER_FIELD_NUMBER;
        hash = (53 * hash) + getOwner();
      }
      if (hasPos()) {
        hash = (37 * hash) + POS_FIELD_NUMBER;
        hash = (53 * hash) + getPos().hashCode();
      }
      if (hasFacing()) {
        hash = (37 * hash) + FACING_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getFacing());
      }
      if (hasRadius()) {
        hash = (37 * hash) + RADIUS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRadius());
      }
      if (hasBuildProgress()) {
        hash = (37 * hash) + BUILD_PROGRESS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getBuildProgress());
      }
      if (hasCloak()) {
        hash = (37 * hash) + CLOAK_FIELD_NUMBER;
        hash = (53 * hash) + cloak_;
      }
      if (hasDetectRange()) {
        hash = (37 * hash) + DETECT_RANGE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getDetectRange());
      }
      if (hasRadarRange()) {
        hash = (37 * hash) + RADAR_RANGE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRadarRange());
      }
      if (hasIsSelected()) {
        hash = (37 * hash) + IS_SELECTED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsSelected());
      }
      if (hasIsOnScreen()) {
        hash = (37 * hash) + IS_ON_SCREEN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsOnScreen());
      }
      if (hasIsBlip()) {
        hash = (37 * hash) + IS_BLIP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsBlip());
      }
      if (hasHealth()) {
        hash = (37 * hash) + HEALTH_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getHealth());
      }
      if (hasHealthMax()) {
        hash = (37 * hash) + HEALTH_MAX_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getHealthMax());
      }
      if (hasShield()) {
        hash = (37 * hash) + SHIELD_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getShield());
      }
      if (hasEnergy()) {
        hash = (37 * hash) + ENERGY_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getEnergy());
      }
      if (hasMineralContents()) {
        hash = (37 * hash) + MINERAL_CONTENTS_FIELD_NUMBER;
        hash = (53 * hash) + getMineralContents();
      }
      if (hasVespeneContents()) {
        hash = (37 * hash) + VESPENE_CONTENTS_FIELD_NUMBER;
        hash = (53 * hash) + getVespeneContents();
      }
      if (hasIsFlying()) {
        hash = (37 * hash) + IS_FLYING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsFlying());
      }
      if (hasIsBurrowed()) {
        hash = (37 * hash) + IS_BURROWED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsBurrowed());
      }
      if (getOrdersCount() > 0) {
        hash = (37 * hash) + ORDERS_FIELD_NUMBER;
        hash = (53 * hash) + getOrdersList().hashCode();
      }
      if (hasAddOnTag()) {
        hash = (37 * hash) + ADD_ON_TAG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getAddOnTag());
      }
      if (getPassengersCount() > 0) {
        hash = (37 * hash) + PASSENGERS_FIELD_NUMBER;
        hash = (53 * hash) + getPassengersList().hashCode();
      }
      if (hasCargoSpaceTaken()) {
        hash = (37 * hash) + CARGO_SPACE_TAKEN_FIELD_NUMBER;
        hash = (53 * hash) + getCargoSpaceTaken();
      }
      if (hasCargoSpaceMax()) {
        hash = (37 * hash) + CARGO_SPACE_MAX_FIELD_NUMBER;
        hash = (53 * hash) + getCargoSpaceMax();
      }
      if (getBuffIdsCount() > 0) {
        hash = (37 * hash) + BUFF_IDS_FIELD_NUMBER;
        hash = (53 * hash) + getBuffIdsList().hashCode();
      }
      if (hasAssignedHarvesters()) {
        hash = (37 * hash) + ASSIGNED_HARVESTERS_FIELD_NUMBER;
        hash = (53 * hash) + getAssignedHarvesters();
      }
      if (hasIdealHarvesters()) {
        hash = (37 * hash) + IDEAL_HARVESTERS_FIELD_NUMBER;
        hash = (53 * hash) + getIdealHarvesters();
      }
      if (hasWeaponCooldown()) {
        hash = (37 * hash) + WEAPON_COOLDOWN_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getWeaponCooldown());
      }
      if (hasEngagedTargetTag()) {
        hash = (37 * hash) + ENGAGED_TARGET_TAG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getEngagedTargetTag());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.Unit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.Unit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.Unit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.Unit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.Unit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.Unit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.Unit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.Unit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.Unit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.Unit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.Unit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.Unit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.Unit)
        SC2APIProtocol.Raw.UnitOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_Unit_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_Unit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.Unit.class, SC2APIProtocol.Raw.Unit.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.Unit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPosFieldBuilder();
          getOrdersFieldBuilder();
          getPassengersFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        displayType_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        alliance_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        tag_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        unitType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        owner_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (posBuilder_ == null) {
          pos_ = null;
        } else {
          posBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        facing_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        radius_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        buildProgress_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        cloak_ = 1;
        bitField0_ = (bitField0_ & ~0x00000200);
        detectRange_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        radarRange_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        isSelected_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        isOnScreen_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        isBlip_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        health_ = 0F;
        bitField0_ = (bitField0_ & ~0x00008000);
        healthMax_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        shield_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        energy_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        mineralContents_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        vespeneContents_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        isFlying_ = false;
        bitField0_ = (bitField0_ & ~0x00200000);
        isBurrowed_ = false;
        bitField0_ = (bitField0_ & ~0x00400000);
        if (ordersBuilder_ == null) {
          orders_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00800000);
        } else {
          ordersBuilder_.clear();
        }
        addOnTag_ = 0L;
        bitField0_ = (bitField0_ & ~0x01000000);
        if (passengersBuilder_ == null) {
          passengers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x02000000);
        } else {
          passengersBuilder_.clear();
        }
        cargoSpaceTaken_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        cargoSpaceMax_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        buffIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        assignedHarvesters_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        idealHarvesters_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        weaponCooldown_ = 0F;
        bitField0_ = (bitField0_ & ~0x80000000);
        engagedTargetTag_ = 0L;
        bitField1_ = (bitField1_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_Unit_descriptor;
      }

      public SC2APIProtocol.Raw.Unit getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.Unit.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.Unit build() {
        SC2APIProtocol.Raw.Unit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.Unit buildPartial() {
        SC2APIProtocol.Raw.Unit result = new SC2APIProtocol.Raw.Unit(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.displayType_ = displayType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.alliance_ = alliance_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.tag_ = tag_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.unitType_ = unitType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.owner_ = owner_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (posBuilder_ == null) {
          result.pos_ = pos_;
        } else {
          result.pos_ = posBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.facing_ = facing_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.radius_ = radius_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.buildProgress_ = buildProgress_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.cloak_ = cloak_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.detectRange_ = detectRange_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.radarRange_ = radarRange_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.isSelected_ = isSelected_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.isOnScreen_ = isOnScreen_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.isBlip_ = isBlip_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.health_ = health_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.healthMax_ = healthMax_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.shield_ = shield_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.energy_ = energy_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.mineralContents_ = mineralContents_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.vespeneContents_ = vespeneContents_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.isFlying_ = isFlying_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.isBurrowed_ = isBurrowed_;
        if (ordersBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000)) {
            orders_ = java.util.Collections.unmodifiableList(orders_);
            bitField0_ = (bitField0_ & ~0x00800000);
          }
          result.orders_ = orders_;
        } else {
          result.orders_ = ordersBuilder_.build();
        }
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.addOnTag_ = addOnTag_;
        if (passengersBuilder_ == null) {
          if (((bitField0_ & 0x02000000) == 0x02000000)) {
            passengers_ = java.util.Collections.unmodifiableList(passengers_);
            bitField0_ = (bitField0_ & ~0x02000000);
          }
          result.passengers_ = passengers_;
        } else {
          result.passengers_ = passengersBuilder_.build();
        }
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.cargoSpaceTaken_ = cargoSpaceTaken_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.cargoSpaceMax_ = cargoSpaceMax_;
        if (((bitField0_ & 0x10000000) == 0x10000000)) {
          buffIds_ = java.util.Collections.unmodifiableList(buffIds_);
          bitField0_ = (bitField0_ & ~0x10000000);
        }
        result.buffIds_ = buffIds_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.assignedHarvesters_ = assignedHarvesters_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.idealHarvesters_ = idealHarvesters_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.weaponCooldown_ = weaponCooldown_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x20000000;
        }
        result.engagedTargetTag_ = engagedTargetTag_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.Unit) {
          return mergeFrom((SC2APIProtocol.Raw.Unit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.Unit other) {
        if (other == SC2APIProtocol.Raw.Unit.getDefaultInstance()) return this;
        if (other.hasDisplayType()) {
          setDisplayType(other.getDisplayType());
        }
        if (other.hasAlliance()) {
          setAlliance(other.getAlliance());
        }
        if (other.hasTag()) {
          setTag(other.getTag());
        }
        if (other.hasUnitType()) {
          setUnitType(other.getUnitType());
        }
        if (other.hasOwner()) {
          setOwner(other.getOwner());
        }
        if (other.hasPos()) {
          mergePos(other.getPos());
        }
        if (other.hasFacing()) {
          setFacing(other.getFacing());
        }
        if (other.hasRadius()) {
          setRadius(other.getRadius());
        }
        if (other.hasBuildProgress()) {
          setBuildProgress(other.getBuildProgress());
        }
        if (other.hasCloak()) {
          setCloak(other.getCloak());
        }
        if (other.hasDetectRange()) {
          setDetectRange(other.getDetectRange());
        }
        if (other.hasRadarRange()) {
          setRadarRange(other.getRadarRange());
        }
        if (other.hasIsSelected()) {
          setIsSelected(other.getIsSelected());
        }
        if (other.hasIsOnScreen()) {
          setIsOnScreen(other.getIsOnScreen());
        }
        if (other.hasIsBlip()) {
          setIsBlip(other.getIsBlip());
        }
        if (other.hasHealth()) {
          setHealth(other.getHealth());
        }
        if (other.hasHealthMax()) {
          setHealthMax(other.getHealthMax());
        }
        if (other.hasShield()) {
          setShield(other.getShield());
        }
        if (other.hasEnergy()) {
          setEnergy(other.getEnergy());
        }
        if (other.hasMineralContents()) {
          setMineralContents(other.getMineralContents());
        }
        if (other.hasVespeneContents()) {
          setVespeneContents(other.getVespeneContents());
        }
        if (other.hasIsFlying()) {
          setIsFlying(other.getIsFlying());
        }
        if (other.hasIsBurrowed()) {
          setIsBurrowed(other.getIsBurrowed());
        }
        if (ordersBuilder_ == null) {
          if (!other.orders_.isEmpty()) {
            if (orders_.isEmpty()) {
              orders_ = other.orders_;
              bitField0_ = (bitField0_ & ~0x00800000);
            } else {
              ensureOrdersIsMutable();
              orders_.addAll(other.orders_);
            }
            onChanged();
          }
        } else {
          if (!other.orders_.isEmpty()) {
            if (ordersBuilder_.isEmpty()) {
              ordersBuilder_.dispose();
              ordersBuilder_ = null;
              orders_ = other.orders_;
              bitField0_ = (bitField0_ & ~0x00800000);
              ordersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOrdersFieldBuilder() : null;
            } else {
              ordersBuilder_.addAllMessages(other.orders_);
            }
          }
        }
        if (other.hasAddOnTag()) {
          setAddOnTag(other.getAddOnTag());
        }
        if (passengersBuilder_ == null) {
          if (!other.passengers_.isEmpty()) {
            if (passengers_.isEmpty()) {
              passengers_ = other.passengers_;
              bitField0_ = (bitField0_ & ~0x02000000);
            } else {
              ensurePassengersIsMutable();
              passengers_.addAll(other.passengers_);
            }
            onChanged();
          }
        } else {
          if (!other.passengers_.isEmpty()) {
            if (passengersBuilder_.isEmpty()) {
              passengersBuilder_.dispose();
              passengersBuilder_ = null;
              passengers_ = other.passengers_;
              bitField0_ = (bitField0_ & ~0x02000000);
              passengersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPassengersFieldBuilder() : null;
            } else {
              passengersBuilder_.addAllMessages(other.passengers_);
            }
          }
        }
        if (other.hasCargoSpaceTaken()) {
          setCargoSpaceTaken(other.getCargoSpaceTaken());
        }
        if (other.hasCargoSpaceMax()) {
          setCargoSpaceMax(other.getCargoSpaceMax());
        }
        if (!other.buffIds_.isEmpty()) {
          if (buffIds_.isEmpty()) {
            buffIds_ = other.buffIds_;
            bitField0_ = (bitField0_ & ~0x10000000);
          } else {
            ensureBuffIdsIsMutable();
            buffIds_.addAll(other.buffIds_);
          }
          onChanged();
        }
        if (other.hasAssignedHarvesters()) {
          setAssignedHarvesters(other.getAssignedHarvesters());
        }
        if (other.hasIdealHarvesters()) {
          setIdealHarvesters(other.getIdealHarvesters());
        }
        if (other.hasWeaponCooldown()) {
          setWeaponCooldown(other.getWeaponCooldown());
        }
        if (other.hasEngagedTargetTag()) {
          setEngagedTargetTag(other.getEngagedTargetTag());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.Unit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.Unit) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private int displayType_ = 1;
      /**
       * <pre>
       * Fields are populated based on type/alliance
       * </pre>
       *
       * <code>optional .SC2APIProtocol.DisplayType display_type = 1;</code>
       */
      public boolean hasDisplayType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Fields are populated based on type/alliance
       * </pre>
       *
       * <code>optional .SC2APIProtocol.DisplayType display_type = 1;</code>
       */
      public SC2APIProtocol.Raw.DisplayType getDisplayType() {
        SC2APIProtocol.Raw.DisplayType result = SC2APIProtocol.Raw.DisplayType.valueOf(displayType_);
        return result == null ? SC2APIProtocol.Raw.DisplayType.Visible : result;
      }
      /**
       * <pre>
       * Fields are populated based on type/alliance
       * </pre>
       *
       * <code>optional .SC2APIProtocol.DisplayType display_type = 1;</code>
       */
      public Builder setDisplayType(SC2APIProtocol.Raw.DisplayType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        displayType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fields are populated based on type/alliance
       * </pre>
       *
       * <code>optional .SC2APIProtocol.DisplayType display_type = 1;</code>
       */
      public Builder clearDisplayType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        displayType_ = 1;
        onChanged();
        return this;
      }

      private int alliance_ = 1;
      /**
       * <code>optional .SC2APIProtocol.Alliance alliance = 2;</code>
       */
      public boolean hasAlliance() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .SC2APIProtocol.Alliance alliance = 2;</code>
       */
      public SC2APIProtocol.Raw.Alliance getAlliance() {
        SC2APIProtocol.Raw.Alliance result = SC2APIProtocol.Raw.Alliance.valueOf(alliance_);
        return result == null ? SC2APIProtocol.Raw.Alliance.Self : result;
      }
      /**
       * <code>optional .SC2APIProtocol.Alliance alliance = 2;</code>
       */
      public Builder setAlliance(SC2APIProtocol.Raw.Alliance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        alliance_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Alliance alliance = 2;</code>
       */
      public Builder clearAlliance() {
        bitField0_ = (bitField0_ & ~0x00000002);
        alliance_ = 1;
        onChanged();
        return this;
      }

      private long tag_ ;
      /**
       * <pre>
       * Unique identifier for a unit
       * </pre>
       *
       * <code>optional uint64 tag = 3;</code>
       */
      public boolean hasTag() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Unique identifier for a unit
       * </pre>
       *
       * <code>optional uint64 tag = 3;</code>
       */
      public long getTag() {
        return tag_;
      }
      /**
       * <pre>
       * Unique identifier for a unit
       * </pre>
       *
       * <code>optional uint64 tag = 3;</code>
       */
      public Builder setTag(long value) {
        bitField0_ |= 0x00000004;
        tag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique identifier for a unit
       * </pre>
       *
       * <code>optional uint64 tag = 3;</code>
       */
      public Builder clearTag() {
        bitField0_ = (bitField0_ & ~0x00000004);
        tag_ = 0L;
        onChanged();
        return this;
      }

      private int unitType_ ;
      /**
       * <code>optional uint32 unit_type = 4;</code>
       */
      public boolean hasUnitType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 unit_type = 4;</code>
       */
      public int getUnitType() {
        return unitType_;
      }
      /**
       * <code>optional uint32 unit_type = 4;</code>
       */
      public Builder setUnitType(int value) {
        bitField0_ |= 0x00000008;
        unitType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 unit_type = 4;</code>
       */
      public Builder clearUnitType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        unitType_ = 0;
        onChanged();
        return this;
      }

      private int owner_ ;
      /**
       * <code>optional int32 owner = 5;</code>
       */
      public boolean hasOwner() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 owner = 5;</code>
       */
      public int getOwner() {
        return owner_;
      }
      /**
       * <code>optional int32 owner = 5;</code>
       */
      public Builder setOwner(int value) {
        bitField0_ |= 0x00000010;
        owner_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 owner = 5;</code>
       */
      public Builder clearOwner() {
        bitField0_ = (bitField0_ & ~0x00000010);
        owner_ = 0;
        onChanged();
        return this;
      }

      private SC2APIProtocol.Common.Point pos_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder> posBuilder_;
      /**
       * <code>optional .SC2APIProtocol.Point pos = 6;</code>
       */
      public boolean hasPos() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 6;</code>
       */
      public SC2APIProtocol.Common.Point getPos() {
        if (posBuilder_ == null) {
          return pos_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : pos_;
        } else {
          return posBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 6;</code>
       */
      public Builder setPos(SC2APIProtocol.Common.Point value) {
        if (posBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pos_ = value;
          onChanged();
        } else {
          posBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 6;</code>
       */
      public Builder setPos(
          SC2APIProtocol.Common.Point.Builder builderForValue) {
        if (posBuilder_ == null) {
          pos_ = builderForValue.build();
          onChanged();
        } else {
          posBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 6;</code>
       */
      public Builder mergePos(SC2APIProtocol.Common.Point value) {
        if (posBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              pos_ != null &&
              pos_ != SC2APIProtocol.Common.Point.getDefaultInstance()) {
            pos_ =
              SC2APIProtocol.Common.Point.newBuilder(pos_).mergeFrom(value).buildPartial();
          } else {
            pos_ = value;
          }
          onChanged();
        } else {
          posBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 6;</code>
       */
      public Builder clearPos() {
        if (posBuilder_ == null) {
          pos_ = null;
          onChanged();
        } else {
          posBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 6;</code>
       */
      public SC2APIProtocol.Common.Point.Builder getPosBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getPosFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 6;</code>
       */
      public SC2APIProtocol.Common.PointOrBuilder getPosOrBuilder() {
        if (posBuilder_ != null) {
          return posBuilder_.getMessageOrBuilder();
        } else {
          return pos_ == null ?
              SC2APIProtocol.Common.Point.getDefaultInstance() : pos_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point pos = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder> 
          getPosFieldBuilder() {
        if (posBuilder_ == null) {
          posBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder>(
                  getPos(),
                  getParentForChildren(),
                  isClean());
          pos_ = null;
        }
        return posBuilder_;
      }

      private float facing_ ;
      /**
       * <code>optional float facing = 7;</code>
       */
      public boolean hasFacing() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float facing = 7;</code>
       */
      public float getFacing() {
        return facing_;
      }
      /**
       * <code>optional float facing = 7;</code>
       */
      public Builder setFacing(float value) {
        bitField0_ |= 0x00000040;
        facing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float facing = 7;</code>
       */
      public Builder clearFacing() {
        bitField0_ = (bitField0_ & ~0x00000040);
        facing_ = 0F;
        onChanged();
        return this;
      }

      private float radius_ ;
      /**
       * <code>optional float radius = 8;</code>
       */
      public boolean hasRadius() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float radius = 8;</code>
       */
      public float getRadius() {
        return radius_;
      }
      /**
       * <code>optional float radius = 8;</code>
       */
      public Builder setRadius(float value) {
        bitField0_ |= 0x00000080;
        radius_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float radius = 8;</code>
       */
      public Builder clearRadius() {
        bitField0_ = (bitField0_ & ~0x00000080);
        radius_ = 0F;
        onChanged();
        return this;
      }

      private float buildProgress_ ;
      /**
       * <pre>
       * Range: [0.0, 1.0]
       * </pre>
       *
       * <code>optional float build_progress = 9;</code>
       */
      public boolean hasBuildProgress() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * Range: [0.0, 1.0]
       * </pre>
       *
       * <code>optional float build_progress = 9;</code>
       */
      public float getBuildProgress() {
        return buildProgress_;
      }
      /**
       * <pre>
       * Range: [0.0, 1.0]
       * </pre>
       *
       * <code>optional float build_progress = 9;</code>
       */
      public Builder setBuildProgress(float value) {
        bitField0_ |= 0x00000100;
        buildProgress_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Range: [0.0, 1.0]
       * </pre>
       *
       * <code>optional float build_progress = 9;</code>
       */
      public Builder clearBuildProgress() {
        bitField0_ = (bitField0_ & ~0x00000100);
        buildProgress_ = 0F;
        onChanged();
        return this;
      }

      private int cloak_ = 1;
      /**
       * <code>optional .SC2APIProtocol.CloakState cloak = 10;</code>
       */
      public boolean hasCloak() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .SC2APIProtocol.CloakState cloak = 10;</code>
       */
      public SC2APIProtocol.Raw.CloakState getCloak() {
        SC2APIProtocol.Raw.CloakState result = SC2APIProtocol.Raw.CloakState.valueOf(cloak_);
        return result == null ? SC2APIProtocol.Raw.CloakState.Cloaked : result;
      }
      /**
       * <code>optional .SC2APIProtocol.CloakState cloak = 10;</code>
       */
      public Builder setCloak(SC2APIProtocol.Raw.CloakState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        cloak_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.CloakState cloak = 10;</code>
       */
      public Builder clearCloak() {
        bitField0_ = (bitField0_ & ~0x00000200);
        cloak_ = 1;
        onChanged();
        return this;
      }

      private float detectRange_ ;
      /**
       * <code>optional float detect_range = 31;</code>
       */
      public boolean hasDetectRange() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float detect_range = 31;</code>
       */
      public float getDetectRange() {
        return detectRange_;
      }
      /**
       * <code>optional float detect_range = 31;</code>
       */
      public Builder setDetectRange(float value) {
        bitField0_ |= 0x00000400;
        detectRange_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float detect_range = 31;</code>
       */
      public Builder clearDetectRange() {
        bitField0_ = (bitField0_ & ~0x00000400);
        detectRange_ = 0F;
        onChanged();
        return this;
      }

      private float radarRange_ ;
      /**
       * <code>optional float radar_range = 32;</code>
       */
      public boolean hasRadarRange() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float radar_range = 32;</code>
       */
      public float getRadarRange() {
        return radarRange_;
      }
      /**
       * <code>optional float radar_range = 32;</code>
       */
      public Builder setRadarRange(float value) {
        bitField0_ |= 0x00000800;
        radarRange_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float radar_range = 32;</code>
       */
      public Builder clearRadarRange() {
        bitField0_ = (bitField0_ & ~0x00000800);
        radarRange_ = 0F;
        onChanged();
        return this;
      }

      private boolean isSelected_ ;
      /**
       * <code>optional bool is_selected = 11;</code>
       */
      public boolean hasIsSelected() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional bool is_selected = 11;</code>
       */
      public boolean getIsSelected() {
        return isSelected_;
      }
      /**
       * <code>optional bool is_selected = 11;</code>
       */
      public Builder setIsSelected(boolean value) {
        bitField0_ |= 0x00001000;
        isSelected_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_selected = 11;</code>
       */
      public Builder clearIsSelected() {
        bitField0_ = (bitField0_ & ~0x00001000);
        isSelected_ = false;
        onChanged();
        return this;
      }

      private boolean isOnScreen_ ;
      /**
       * <pre>
       * Visible and within the camera frustrum.
       * </pre>
       *
       * <code>optional bool is_on_screen = 12;</code>
       */
      public boolean hasIsOnScreen() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       * Visible and within the camera frustrum.
       * </pre>
       *
       * <code>optional bool is_on_screen = 12;</code>
       */
      public boolean getIsOnScreen() {
        return isOnScreen_;
      }
      /**
       * <pre>
       * Visible and within the camera frustrum.
       * </pre>
       *
       * <code>optional bool is_on_screen = 12;</code>
       */
      public Builder setIsOnScreen(boolean value) {
        bitField0_ |= 0x00002000;
        isOnScreen_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Visible and within the camera frustrum.
       * </pre>
       *
       * <code>optional bool is_on_screen = 12;</code>
       */
      public Builder clearIsOnScreen() {
        bitField0_ = (bitField0_ & ~0x00002000);
        isOnScreen_ = false;
        onChanged();
        return this;
      }

      private boolean isBlip_ ;
      /**
       * <pre>
       * Detected by sensor tower
       * </pre>
       *
       * <code>optional bool is_blip = 13;</code>
       */
      public boolean hasIsBlip() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <pre>
       * Detected by sensor tower
       * </pre>
       *
       * <code>optional bool is_blip = 13;</code>
       */
      public boolean getIsBlip() {
        return isBlip_;
      }
      /**
       * <pre>
       * Detected by sensor tower
       * </pre>
       *
       * <code>optional bool is_blip = 13;</code>
       */
      public Builder setIsBlip(boolean value) {
        bitField0_ |= 0x00004000;
        isBlip_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Detected by sensor tower
       * </pre>
       *
       * <code>optional bool is_blip = 13;</code>
       */
      public Builder clearIsBlip() {
        bitField0_ = (bitField0_ & ~0x00004000);
        isBlip_ = false;
        onChanged();
        return this;
      }

      private float health_ ;
      /**
       * <pre>
       * Not populated for snapshots
       * </pre>
       *
       * <code>optional float health = 14;</code>
       */
      public boolean hasHealth() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <pre>
       * Not populated for snapshots
       * </pre>
       *
       * <code>optional float health = 14;</code>
       */
      public float getHealth() {
        return health_;
      }
      /**
       * <pre>
       * Not populated for snapshots
       * </pre>
       *
       * <code>optional float health = 14;</code>
       */
      public Builder setHealth(float value) {
        bitField0_ |= 0x00008000;
        health_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Not populated for snapshots
       * </pre>
       *
       * <code>optional float health = 14;</code>
       */
      public Builder clearHealth() {
        bitField0_ = (bitField0_ & ~0x00008000);
        health_ = 0F;
        onChanged();
        return this;
      }

      private float healthMax_ ;
      /**
       * <code>optional float health_max = 15;</code>
       */
      public boolean hasHealthMax() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float health_max = 15;</code>
       */
      public float getHealthMax() {
        return healthMax_;
      }
      /**
       * <code>optional float health_max = 15;</code>
       */
      public Builder setHealthMax(float value) {
        bitField0_ |= 0x00010000;
        healthMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float health_max = 15;</code>
       */
      public Builder clearHealthMax() {
        bitField0_ = (bitField0_ & ~0x00010000);
        healthMax_ = 0F;
        onChanged();
        return this;
      }

      private float shield_ ;
      /**
       * <code>optional float shield = 16;</code>
       */
      public boolean hasShield() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float shield = 16;</code>
       */
      public float getShield() {
        return shield_;
      }
      /**
       * <code>optional float shield = 16;</code>
       */
      public Builder setShield(float value) {
        bitField0_ |= 0x00020000;
        shield_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float shield = 16;</code>
       */
      public Builder clearShield() {
        bitField0_ = (bitField0_ & ~0x00020000);
        shield_ = 0F;
        onChanged();
        return this;
      }

      private float energy_ ;
      /**
       * <code>optional float energy = 17;</code>
       */
      public boolean hasEnergy() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float energy = 17;</code>
       */
      public float getEnergy() {
        return energy_;
      }
      /**
       * <code>optional float energy = 17;</code>
       */
      public Builder setEnergy(float value) {
        bitField0_ |= 0x00040000;
        energy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float energy = 17;</code>
       */
      public Builder clearEnergy() {
        bitField0_ = (bitField0_ & ~0x00040000);
        energy_ = 0F;
        onChanged();
        return this;
      }

      private int mineralContents_ ;
      /**
       * <code>optional int32 mineral_contents = 18;</code>
       */
      public boolean hasMineralContents() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 mineral_contents = 18;</code>
       */
      public int getMineralContents() {
        return mineralContents_;
      }
      /**
       * <code>optional int32 mineral_contents = 18;</code>
       */
      public Builder setMineralContents(int value) {
        bitField0_ |= 0x00080000;
        mineralContents_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mineral_contents = 18;</code>
       */
      public Builder clearMineralContents() {
        bitField0_ = (bitField0_ & ~0x00080000);
        mineralContents_ = 0;
        onChanged();
        return this;
      }

      private int vespeneContents_ ;
      /**
       * <code>optional int32 vespene_contents = 19;</code>
       */
      public boolean hasVespeneContents() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 vespene_contents = 19;</code>
       */
      public int getVespeneContents() {
        return vespeneContents_;
      }
      /**
       * <code>optional int32 vespene_contents = 19;</code>
       */
      public Builder setVespeneContents(int value) {
        bitField0_ |= 0x00100000;
        vespeneContents_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 vespene_contents = 19;</code>
       */
      public Builder clearVespeneContents() {
        bitField0_ = (bitField0_ & ~0x00100000);
        vespeneContents_ = 0;
        onChanged();
        return this;
      }

      private boolean isFlying_ ;
      /**
       * <code>optional bool is_flying = 20;</code>
       */
      public boolean hasIsFlying() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional bool is_flying = 20;</code>
       */
      public boolean getIsFlying() {
        return isFlying_;
      }
      /**
       * <code>optional bool is_flying = 20;</code>
       */
      public Builder setIsFlying(boolean value) {
        bitField0_ |= 0x00200000;
        isFlying_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_flying = 20;</code>
       */
      public Builder clearIsFlying() {
        bitField0_ = (bitField0_ & ~0x00200000);
        isFlying_ = false;
        onChanged();
        return this;
      }

      private boolean isBurrowed_ ;
      /**
       * <code>optional bool is_burrowed = 21;</code>
       */
      public boolean hasIsBurrowed() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional bool is_burrowed = 21;</code>
       */
      public boolean getIsBurrowed() {
        return isBurrowed_;
      }
      /**
       * <code>optional bool is_burrowed = 21;</code>
       */
      public Builder setIsBurrowed(boolean value) {
        bitField0_ |= 0x00400000;
        isBurrowed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_burrowed = 21;</code>
       */
      public Builder clearIsBurrowed() {
        bitField0_ = (bitField0_ & ~0x00400000);
        isBurrowed_ = false;
        onChanged();
        return this;
      }

      private java.util.List<SC2APIProtocol.Raw.UnitOrder> orders_ =
        java.util.Collections.emptyList();
      private void ensureOrdersIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          orders_ = new java.util.ArrayList<SC2APIProtocol.Raw.UnitOrder>(orders_);
          bitField0_ |= 0x00800000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Raw.UnitOrder, SC2APIProtocol.Raw.UnitOrder.Builder, SC2APIProtocol.Raw.UnitOrderOrBuilder> ordersBuilder_;

      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public java.util.List<SC2APIProtocol.Raw.UnitOrder> getOrdersList() {
        if (ordersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(orders_);
        } else {
          return ordersBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public int getOrdersCount() {
        if (ordersBuilder_ == null) {
          return orders_.size();
        } else {
          return ordersBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public SC2APIProtocol.Raw.UnitOrder getOrders(int index) {
        if (ordersBuilder_ == null) {
          return orders_.get(index);
        } else {
          return ordersBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public Builder setOrders(
          int index, SC2APIProtocol.Raw.UnitOrder value) {
        if (ordersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrdersIsMutable();
          orders_.set(index, value);
          onChanged();
        } else {
          ordersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public Builder setOrders(
          int index, SC2APIProtocol.Raw.UnitOrder.Builder builderForValue) {
        if (ordersBuilder_ == null) {
          ensureOrdersIsMutable();
          orders_.set(index, builderForValue.build());
          onChanged();
        } else {
          ordersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public Builder addOrders(SC2APIProtocol.Raw.UnitOrder value) {
        if (ordersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrdersIsMutable();
          orders_.add(value);
          onChanged();
        } else {
          ordersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public Builder addOrders(
          int index, SC2APIProtocol.Raw.UnitOrder value) {
        if (ordersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOrdersIsMutable();
          orders_.add(index, value);
          onChanged();
        } else {
          ordersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public Builder addOrders(
          SC2APIProtocol.Raw.UnitOrder.Builder builderForValue) {
        if (ordersBuilder_ == null) {
          ensureOrdersIsMutable();
          orders_.add(builderForValue.build());
          onChanged();
        } else {
          ordersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public Builder addOrders(
          int index, SC2APIProtocol.Raw.UnitOrder.Builder builderForValue) {
        if (ordersBuilder_ == null) {
          ensureOrdersIsMutable();
          orders_.add(index, builderForValue.build());
          onChanged();
        } else {
          ordersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public Builder addAllOrders(
          java.lang.Iterable<? extends SC2APIProtocol.Raw.UnitOrder> values) {
        if (ordersBuilder_ == null) {
          ensureOrdersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, orders_);
          onChanged();
        } else {
          ordersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public Builder clearOrders() {
        if (ordersBuilder_ == null) {
          orders_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00800000);
          onChanged();
        } else {
          ordersBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public Builder removeOrders(int index) {
        if (ordersBuilder_ == null) {
          ensureOrdersIsMutable();
          orders_.remove(index);
          onChanged();
        } else {
          ordersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public SC2APIProtocol.Raw.UnitOrder.Builder getOrdersBuilder(
          int index) {
        return getOrdersFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public SC2APIProtocol.Raw.UnitOrderOrBuilder getOrdersOrBuilder(
          int index) {
        if (ordersBuilder_ == null) {
          return orders_.get(index);  } else {
          return ordersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public java.util.List<? extends SC2APIProtocol.Raw.UnitOrderOrBuilder> 
           getOrdersOrBuilderList() {
        if (ordersBuilder_ != null) {
          return ordersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(orders_);
        }
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public SC2APIProtocol.Raw.UnitOrder.Builder addOrdersBuilder() {
        return getOrdersFieldBuilder().addBuilder(
            SC2APIProtocol.Raw.UnitOrder.getDefaultInstance());
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public SC2APIProtocol.Raw.UnitOrder.Builder addOrdersBuilder(
          int index) {
        return getOrdersFieldBuilder().addBuilder(
            index, SC2APIProtocol.Raw.UnitOrder.getDefaultInstance());
      }
      /**
       * <pre>
       * Not populated for enemies
       * </pre>
       *
       * <code>repeated .SC2APIProtocol.UnitOrder orders = 22;</code>
       */
      public java.util.List<SC2APIProtocol.Raw.UnitOrder.Builder> 
           getOrdersBuilderList() {
        return getOrdersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Raw.UnitOrder, SC2APIProtocol.Raw.UnitOrder.Builder, SC2APIProtocol.Raw.UnitOrderOrBuilder> 
          getOrdersFieldBuilder() {
        if (ordersBuilder_ == null) {
          ordersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              SC2APIProtocol.Raw.UnitOrder, SC2APIProtocol.Raw.UnitOrder.Builder, SC2APIProtocol.Raw.UnitOrderOrBuilder>(
                  orders_,
                  ((bitField0_ & 0x00800000) == 0x00800000),
                  getParentForChildren(),
                  isClean());
          orders_ = null;
        }
        return ordersBuilder_;
      }

      private long addOnTag_ ;
      /**
       * <code>optional uint64 add_on_tag = 23;</code>
       */
      public boolean hasAddOnTag() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint64 add_on_tag = 23;</code>
       */
      public long getAddOnTag() {
        return addOnTag_;
      }
      /**
       * <code>optional uint64 add_on_tag = 23;</code>
       */
      public Builder setAddOnTag(long value) {
        bitField0_ |= 0x01000000;
        addOnTag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 add_on_tag = 23;</code>
       */
      public Builder clearAddOnTag() {
        bitField0_ = (bitField0_ & ~0x01000000);
        addOnTag_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<SC2APIProtocol.Raw.PassengerUnit> passengers_ =
        java.util.Collections.emptyList();
      private void ensurePassengersIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          passengers_ = new java.util.ArrayList<SC2APIProtocol.Raw.PassengerUnit>(passengers_);
          bitField0_ |= 0x02000000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Raw.PassengerUnit, SC2APIProtocol.Raw.PassengerUnit.Builder, SC2APIProtocol.Raw.PassengerUnitOrBuilder> passengersBuilder_;

      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public java.util.List<SC2APIProtocol.Raw.PassengerUnit> getPassengersList() {
        if (passengersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(passengers_);
        } else {
          return passengersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public int getPassengersCount() {
        if (passengersBuilder_ == null) {
          return passengers_.size();
        } else {
          return passengersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public SC2APIProtocol.Raw.PassengerUnit getPassengers(int index) {
        if (passengersBuilder_ == null) {
          return passengers_.get(index);
        } else {
          return passengersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public Builder setPassengers(
          int index, SC2APIProtocol.Raw.PassengerUnit value) {
        if (passengersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePassengersIsMutable();
          passengers_.set(index, value);
          onChanged();
        } else {
          passengersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public Builder setPassengers(
          int index, SC2APIProtocol.Raw.PassengerUnit.Builder builderForValue) {
        if (passengersBuilder_ == null) {
          ensurePassengersIsMutable();
          passengers_.set(index, builderForValue.build());
          onChanged();
        } else {
          passengersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public Builder addPassengers(SC2APIProtocol.Raw.PassengerUnit value) {
        if (passengersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePassengersIsMutable();
          passengers_.add(value);
          onChanged();
        } else {
          passengersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public Builder addPassengers(
          int index, SC2APIProtocol.Raw.PassengerUnit value) {
        if (passengersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePassengersIsMutable();
          passengers_.add(index, value);
          onChanged();
        } else {
          passengersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public Builder addPassengers(
          SC2APIProtocol.Raw.PassengerUnit.Builder builderForValue) {
        if (passengersBuilder_ == null) {
          ensurePassengersIsMutable();
          passengers_.add(builderForValue.build());
          onChanged();
        } else {
          passengersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public Builder addPassengers(
          int index, SC2APIProtocol.Raw.PassengerUnit.Builder builderForValue) {
        if (passengersBuilder_ == null) {
          ensurePassengersIsMutable();
          passengers_.add(index, builderForValue.build());
          onChanged();
        } else {
          passengersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public Builder addAllPassengers(
          java.lang.Iterable<? extends SC2APIProtocol.Raw.PassengerUnit> values) {
        if (passengersBuilder_ == null) {
          ensurePassengersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, passengers_);
          onChanged();
        } else {
          passengersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public Builder clearPassengers() {
        if (passengersBuilder_ == null) {
          passengers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x02000000);
          onChanged();
        } else {
          passengersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public Builder removePassengers(int index) {
        if (passengersBuilder_ == null) {
          ensurePassengersIsMutable();
          passengers_.remove(index);
          onChanged();
        } else {
          passengersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public SC2APIProtocol.Raw.PassengerUnit.Builder getPassengersBuilder(
          int index) {
        return getPassengersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public SC2APIProtocol.Raw.PassengerUnitOrBuilder getPassengersOrBuilder(
          int index) {
        if (passengersBuilder_ == null) {
          return passengers_.get(index);  } else {
          return passengersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public java.util.List<? extends SC2APIProtocol.Raw.PassengerUnitOrBuilder> 
           getPassengersOrBuilderList() {
        if (passengersBuilder_ != null) {
          return passengersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(passengers_);
        }
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public SC2APIProtocol.Raw.PassengerUnit.Builder addPassengersBuilder() {
        return getPassengersFieldBuilder().addBuilder(
            SC2APIProtocol.Raw.PassengerUnit.getDefaultInstance());
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public SC2APIProtocol.Raw.PassengerUnit.Builder addPassengersBuilder(
          int index) {
        return getPassengersFieldBuilder().addBuilder(
            index, SC2APIProtocol.Raw.PassengerUnit.getDefaultInstance());
      }
      /**
       * <code>repeated .SC2APIProtocol.PassengerUnit passengers = 24;</code>
       */
      public java.util.List<SC2APIProtocol.Raw.PassengerUnit.Builder> 
           getPassengersBuilderList() {
        return getPassengersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          SC2APIProtocol.Raw.PassengerUnit, SC2APIProtocol.Raw.PassengerUnit.Builder, SC2APIProtocol.Raw.PassengerUnitOrBuilder> 
          getPassengersFieldBuilder() {
        if (passengersBuilder_ == null) {
          passengersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              SC2APIProtocol.Raw.PassengerUnit, SC2APIProtocol.Raw.PassengerUnit.Builder, SC2APIProtocol.Raw.PassengerUnitOrBuilder>(
                  passengers_,
                  ((bitField0_ & 0x02000000) == 0x02000000),
                  getParentForChildren(),
                  isClean());
          passengers_ = null;
        }
        return passengersBuilder_;
      }

      private int cargoSpaceTaken_ ;
      /**
       * <code>optional int32 cargo_space_taken = 25;</code>
       */
      public boolean hasCargoSpaceTaken() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 cargo_space_taken = 25;</code>
       */
      public int getCargoSpaceTaken() {
        return cargoSpaceTaken_;
      }
      /**
       * <code>optional int32 cargo_space_taken = 25;</code>
       */
      public Builder setCargoSpaceTaken(int value) {
        bitField0_ |= 0x04000000;
        cargoSpaceTaken_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cargo_space_taken = 25;</code>
       */
      public Builder clearCargoSpaceTaken() {
        bitField0_ = (bitField0_ & ~0x04000000);
        cargoSpaceTaken_ = 0;
        onChanged();
        return this;
      }

      private int cargoSpaceMax_ ;
      /**
       * <code>optional int32 cargo_space_max = 26;</code>
       */
      public boolean hasCargoSpaceMax() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 cargo_space_max = 26;</code>
       */
      public int getCargoSpaceMax() {
        return cargoSpaceMax_;
      }
      /**
       * <code>optional int32 cargo_space_max = 26;</code>
       */
      public Builder setCargoSpaceMax(int value) {
        bitField0_ |= 0x08000000;
        cargoSpaceMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cargo_space_max = 26;</code>
       */
      public Builder clearCargoSpaceMax() {
        bitField0_ = (bitField0_ & ~0x08000000);
        cargoSpaceMax_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> buffIds_ = java.util.Collections.emptyList();
      private void ensureBuffIdsIsMutable() {
        if (!((bitField0_ & 0x10000000) == 0x10000000)) {
          buffIds_ = new java.util.ArrayList<java.lang.Integer>(buffIds_);
          bitField0_ |= 0x10000000;
         }
      }
      /**
       * <pre>
       * TODO: Should this be populated for enemies?
       * </pre>
       *
       * <code>repeated uint32 buff_ids = 27;</code>
       */
      public java.util.List<java.lang.Integer>
          getBuffIdsList() {
        return java.util.Collections.unmodifiableList(buffIds_);
      }
      /**
       * <pre>
       * TODO: Should this be populated for enemies?
       * </pre>
       *
       * <code>repeated uint32 buff_ids = 27;</code>
       */
      public int getBuffIdsCount() {
        return buffIds_.size();
      }
      /**
       * <pre>
       * TODO: Should this be populated for enemies?
       * </pre>
       *
       * <code>repeated uint32 buff_ids = 27;</code>
       */
      public int getBuffIds(int index) {
        return buffIds_.get(index);
      }
      /**
       * <pre>
       * TODO: Should this be populated for enemies?
       * </pre>
       *
       * <code>repeated uint32 buff_ids = 27;</code>
       */
      public Builder setBuffIds(
          int index, int value) {
        ensureBuffIdsIsMutable();
        buffIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: Should this be populated for enemies?
       * </pre>
       *
       * <code>repeated uint32 buff_ids = 27;</code>
       */
      public Builder addBuffIds(int value) {
        ensureBuffIdsIsMutable();
        buffIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: Should this be populated for enemies?
       * </pre>
       *
       * <code>repeated uint32 buff_ids = 27;</code>
       */
      public Builder addAllBuffIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBuffIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, buffIds_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: Should this be populated for enemies?
       * </pre>
       *
       * <code>repeated uint32 buff_ids = 27;</code>
       */
      public Builder clearBuffIds() {
        buffIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        onChanged();
        return this;
      }

      private int assignedHarvesters_ ;
      /**
       * <code>optional int32 assigned_harvesters = 28;</code>
       */
      public boolean hasAssignedHarvesters() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional int32 assigned_harvesters = 28;</code>
       */
      public int getAssignedHarvesters() {
        return assignedHarvesters_;
      }
      /**
       * <code>optional int32 assigned_harvesters = 28;</code>
       */
      public Builder setAssignedHarvesters(int value) {
        bitField0_ |= 0x20000000;
        assignedHarvesters_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 assigned_harvesters = 28;</code>
       */
      public Builder clearAssignedHarvesters() {
        bitField0_ = (bitField0_ & ~0x20000000);
        assignedHarvesters_ = 0;
        onChanged();
        return this;
      }

      private int idealHarvesters_ ;
      /**
       * <code>optional int32 ideal_harvesters = 29;</code>
       */
      public boolean hasIdealHarvesters() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional int32 ideal_harvesters = 29;</code>
       */
      public int getIdealHarvesters() {
        return idealHarvesters_;
      }
      /**
       * <code>optional int32 ideal_harvesters = 29;</code>
       */
      public Builder setIdealHarvesters(int value) {
        bitField0_ |= 0x40000000;
        idealHarvesters_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ideal_harvesters = 29;</code>
       */
      public Builder clearIdealHarvesters() {
        bitField0_ = (bitField0_ & ~0x40000000);
        idealHarvesters_ = 0;
        onChanged();
        return this;
      }

      private float weaponCooldown_ ;
      /**
       * <code>optional float weapon_cooldown = 30;</code>
       */
      public boolean hasWeaponCooldown() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional float weapon_cooldown = 30;</code>
       */
      public float getWeaponCooldown() {
        return weaponCooldown_;
      }
      /**
       * <code>optional float weapon_cooldown = 30;</code>
       */
      public Builder setWeaponCooldown(float value) {
        bitField0_ |= 0x80000000;
        weaponCooldown_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weapon_cooldown = 30;</code>
       */
      public Builder clearWeaponCooldown() {
        bitField0_ = (bitField0_ & ~0x80000000);
        weaponCooldown_ = 0F;
        onChanged();
        return this;
      }

      private long engagedTargetTag_ ;
      /**
       * <code>optional uint64 engaged_target_tag = 34;</code>
       */
      public boolean hasEngagedTargetTag() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 engaged_target_tag = 34;</code>
       */
      public long getEngagedTargetTag() {
        return engagedTargetTag_;
      }
      /**
       * <code>optional uint64 engaged_target_tag = 34;</code>
       */
      public Builder setEngagedTargetTag(long value) {
        bitField1_ |= 0x00000001;
        engagedTargetTag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 engaged_target_tag = 34;</code>
       */
      public Builder clearEngagedTargetTag() {
        bitField1_ = (bitField1_ & ~0x00000001);
        engagedTargetTag_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.Unit)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.Unit)
    private static final SC2APIProtocol.Raw.Unit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.Unit();
    }

    public static SC2APIProtocol.Raw.Unit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Unit>
        PARSER = new com.google.protobuf.AbstractParser<Unit>() {
      public Unit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Unit(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Unit> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Unit> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.Unit getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MapStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.MapState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 1 byte visibility layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
     */
    boolean hasVisibility();
    /**
     * <pre>
     * 1 byte visibility layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
     */
    SC2APIProtocol.Common.ImageData getVisibility();
    /**
     * <pre>
     * 1 byte visibility layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getVisibilityOrBuilder();

    /**
     * <pre>
     * 1 byte creep layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
     */
    boolean hasCreep();
    /**
     * <pre>
     * 1 byte creep layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
     */
    SC2APIProtocol.Common.ImageData getCreep();
    /**
     * <pre>
     * 1 byte creep layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
     */
    SC2APIProtocol.Common.ImageDataOrBuilder getCreepOrBuilder();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.MapState}
   */
  public  static final class MapState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.MapState)
      MapStateOrBuilder {
    // Use MapState.newBuilder() to construct.
    private MapState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MapState() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MapState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = visibility_.toBuilder();
              }
              visibility_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(visibility_);
                visibility_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              SC2APIProtocol.Common.ImageData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = creep_.toBuilder();
              }
              creep_ = input.readMessage(SC2APIProtocol.Common.ImageData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(creep_);
                creep_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_MapState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_MapState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.MapState.class, SC2APIProtocol.Raw.MapState.Builder.class);
    }

    private int bitField0_;
    public static final int VISIBILITY_FIELD_NUMBER = 1;
    private SC2APIProtocol.Common.ImageData visibility_;
    /**
     * <pre>
     * 1 byte visibility layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
     */
    public boolean hasVisibility() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * 1 byte visibility layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
     */
    public SC2APIProtocol.Common.ImageData getVisibility() {
      return visibility_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibility_;
    }
    /**
     * <pre>
     * 1 byte visibility layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getVisibilityOrBuilder() {
      return visibility_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibility_;
    }

    public static final int CREEP_FIELD_NUMBER = 2;
    private SC2APIProtocol.Common.ImageData creep_;
    /**
     * <pre>
     * 1 byte creep layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
     */
    public boolean hasCreep() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 1 byte creep layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
     */
    public SC2APIProtocol.Common.ImageData getCreep() {
      return creep_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
    }
    /**
     * <pre>
     * 1 byte creep layer.
     * </pre>
     *
     * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
     */
    public SC2APIProtocol.Common.ImageDataOrBuilder getCreepOrBuilder() {
      return creep_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getVisibility());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getCreep());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getVisibility());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCreep());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.MapState)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.MapState other = (SC2APIProtocol.Raw.MapState) obj;

      boolean result = true;
      result = result && (hasVisibility() == other.hasVisibility());
      if (hasVisibility()) {
        result = result && getVisibility()
            .equals(other.getVisibility());
      }
      result = result && (hasCreep() == other.hasCreep());
      if (hasCreep()) {
        result = result && getCreep()
            .equals(other.getCreep());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasVisibility()) {
        hash = (37 * hash) + VISIBILITY_FIELD_NUMBER;
        hash = (53 * hash) + getVisibility().hashCode();
      }
      if (hasCreep()) {
        hash = (37 * hash) + CREEP_FIELD_NUMBER;
        hash = (53 * hash) + getCreep().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.MapState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.MapState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.MapState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.MapState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.MapState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.MapState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.MapState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.MapState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.MapState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.MapState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.MapState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.MapState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.MapState)
        SC2APIProtocol.Raw.MapStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_MapState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_MapState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.MapState.class, SC2APIProtocol.Raw.MapState.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.MapState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getVisibilityFieldBuilder();
          getCreepFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (visibilityBuilder_ == null) {
          visibility_ = null;
        } else {
          visibilityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (creepBuilder_ == null) {
          creep_ = null;
        } else {
          creepBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_MapState_descriptor;
      }

      public SC2APIProtocol.Raw.MapState getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.MapState.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.MapState build() {
        SC2APIProtocol.Raw.MapState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.MapState buildPartial() {
        SC2APIProtocol.Raw.MapState result = new SC2APIProtocol.Raw.MapState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (visibilityBuilder_ == null) {
          result.visibility_ = visibility_;
        } else {
          result.visibility_ = visibilityBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (creepBuilder_ == null) {
          result.creep_ = creep_;
        } else {
          result.creep_ = creepBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.MapState) {
          return mergeFrom((SC2APIProtocol.Raw.MapState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.MapState other) {
        if (other == SC2APIProtocol.Raw.MapState.getDefaultInstance()) return this;
        if (other.hasVisibility()) {
          mergeVisibility(other.getVisibility());
        }
        if (other.hasCreep()) {
          mergeCreep(other.getCreep());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.MapState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.MapState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Common.ImageData visibility_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> visibilityBuilder_;
      /**
       * <pre>
       * 1 byte visibility layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
       */
      public boolean hasVisibility() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * 1 byte visibility layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
       */
      public SC2APIProtocol.Common.ImageData getVisibility() {
        if (visibilityBuilder_ == null) {
          return visibility_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibility_;
        } else {
          return visibilityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1 byte visibility layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
       */
      public Builder setVisibility(SC2APIProtocol.Common.ImageData value) {
        if (visibilityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          visibility_ = value;
          onChanged();
        } else {
          visibilityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * 1 byte visibility layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
       */
      public Builder setVisibility(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (visibilityBuilder_ == null) {
          visibility_ = builderForValue.build();
          onChanged();
        } else {
          visibilityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * 1 byte visibility layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
       */
      public Builder mergeVisibility(SC2APIProtocol.Common.ImageData value) {
        if (visibilityBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              visibility_ != null &&
              visibility_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            visibility_ =
              SC2APIProtocol.Common.ImageData.newBuilder(visibility_).mergeFrom(value).buildPartial();
          } else {
            visibility_ = value;
          }
          onChanged();
        } else {
          visibilityBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * 1 byte visibility layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
       */
      public Builder clearVisibility() {
        if (visibilityBuilder_ == null) {
          visibility_ = null;
          onChanged();
        } else {
          visibilityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * 1 byte visibility layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getVisibilityBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getVisibilityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1 byte visibility layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getVisibilityOrBuilder() {
        if (visibilityBuilder_ != null) {
          return visibilityBuilder_.getMessageOrBuilder();
        } else {
          return visibility_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : visibility_;
        }
      }
      /**
       * <pre>
       * 1 byte visibility layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData visibility = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getVisibilityFieldBuilder() {
        if (visibilityBuilder_ == null) {
          visibilityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getVisibility(),
                  getParentForChildren(),
                  isClean());
          visibility_ = null;
        }
        return visibilityBuilder_;
      }

      private SC2APIProtocol.Common.ImageData creep_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> creepBuilder_;
      /**
       * <pre>
       * 1 byte creep layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
       */
      public boolean hasCreep() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * 1 byte creep layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
       */
      public SC2APIProtocol.Common.ImageData getCreep() {
        if (creepBuilder_ == null) {
          return creep_ == null ? SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
        } else {
          return creepBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 1 byte creep layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
       */
      public Builder setCreep(SC2APIProtocol.Common.ImageData value) {
        if (creepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          creep_ = value;
          onChanged();
        } else {
          creepBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * 1 byte creep layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
       */
      public Builder setCreep(
          SC2APIProtocol.Common.ImageData.Builder builderForValue) {
        if (creepBuilder_ == null) {
          creep_ = builderForValue.build();
          onChanged();
        } else {
          creepBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * 1 byte creep layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
       */
      public Builder mergeCreep(SC2APIProtocol.Common.ImageData value) {
        if (creepBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              creep_ != null &&
              creep_ != SC2APIProtocol.Common.ImageData.getDefaultInstance()) {
            creep_ =
              SC2APIProtocol.Common.ImageData.newBuilder(creep_).mergeFrom(value).buildPartial();
          } else {
            creep_ = value;
          }
          onChanged();
        } else {
          creepBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * 1 byte creep layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
       */
      public Builder clearCreep() {
        if (creepBuilder_ == null) {
          creep_ = null;
          onChanged();
        } else {
          creepBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * 1 byte creep layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
       */
      public SC2APIProtocol.Common.ImageData.Builder getCreepBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getCreepFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 1 byte creep layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
       */
      public SC2APIProtocol.Common.ImageDataOrBuilder getCreepOrBuilder() {
        if (creepBuilder_ != null) {
          return creepBuilder_.getMessageOrBuilder();
        } else {
          return creep_ == null ?
              SC2APIProtocol.Common.ImageData.getDefaultInstance() : creep_;
        }
      }
      /**
       * <pre>
       * 1 byte creep layer.
       * </pre>
       *
       * <code>optional .SC2APIProtocol.ImageData creep = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder> 
          getCreepFieldBuilder() {
        if (creepBuilder_ == null) {
          creepBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.ImageData, SC2APIProtocol.Common.ImageData.Builder, SC2APIProtocol.Common.ImageDataOrBuilder>(
                  getCreep(),
                  getParentForChildren(),
                  isClean());
          creep_ = null;
        }
        return creepBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.MapState)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.MapState)
    private static final SC2APIProtocol.Raw.MapState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.MapState();
    }

    public static SC2APIProtocol.Raw.MapState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<MapState>
        PARSER = new com.google.protobuf.AbstractParser<MapState>() {
      public MapState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new MapState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MapState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MapState> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.MapState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActionRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ActionRaw)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
     */
    boolean hasUnitCommand();
    /**
     * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
     */
    SC2APIProtocol.Raw.ActionRawUnitCommand getUnitCommand();
    /**
     * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
     */
    SC2APIProtocol.Raw.ActionRawUnitCommandOrBuilder getUnitCommandOrBuilder();

    /**
     * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
     */
    boolean hasCameraMove();
    /**
     * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
     */
    SC2APIProtocol.Raw.ActionRawCameraMove getCameraMove();
    /**
     * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
     */
    SC2APIProtocol.Raw.ActionRawCameraMoveOrBuilder getCameraMoveOrBuilder();

    /**
     * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
     */
    boolean hasToggleAutocast();
    /**
     * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
     */
    SC2APIProtocol.Raw.ActionRawToggleAutocast getToggleAutocast();
    /**
     * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
     */
    SC2APIProtocol.Raw.ActionRawToggleAutocastOrBuilder getToggleAutocastOrBuilder();

    public SC2APIProtocol.Raw.ActionRaw.ActionCase getActionCase();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ActionRaw}
   */
  public  static final class ActionRaw extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ActionRaw)
      ActionRawOrBuilder {
    // Use ActionRaw.newBuilder() to construct.
    private ActionRaw(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ActionRaw() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ActionRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Raw.ActionRawUnitCommand.Builder subBuilder = null;
              if (actionCase_ == 1) {
                subBuilder = ((SC2APIProtocol.Raw.ActionRawUnitCommand) action_).toBuilder();
              }
              action_ =
                  input.readMessage(SC2APIProtocol.Raw.ActionRawUnitCommand.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Raw.ActionRawUnitCommand) action_);
                action_ = subBuilder.buildPartial();
              }
              actionCase_ = 1;
              break;
            }
            case 18: {
              SC2APIProtocol.Raw.ActionRawCameraMove.Builder subBuilder = null;
              if (actionCase_ == 2) {
                subBuilder = ((SC2APIProtocol.Raw.ActionRawCameraMove) action_).toBuilder();
              }
              action_ =
                  input.readMessage(SC2APIProtocol.Raw.ActionRawCameraMove.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Raw.ActionRawCameraMove) action_);
                action_ = subBuilder.buildPartial();
              }
              actionCase_ = 2;
              break;
            }
            case 26: {
              SC2APIProtocol.Raw.ActionRawToggleAutocast.Builder subBuilder = null;
              if (actionCase_ == 3) {
                subBuilder = ((SC2APIProtocol.Raw.ActionRawToggleAutocast) action_).toBuilder();
              }
              action_ =
                  input.readMessage(SC2APIProtocol.Raw.ActionRawToggleAutocast.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Raw.ActionRawToggleAutocast) action_);
                action_ = subBuilder.buildPartial();
              }
              actionCase_ = 3;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRaw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRaw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.ActionRaw.class, SC2APIProtocol.Raw.ActionRaw.Builder.class);
    }

    private int bitField0_;
    private int actionCase_ = 0;
    private java.lang.Object action_;
    public enum ActionCase
        implements com.google.protobuf.Internal.EnumLite {
      UNIT_COMMAND(1),
      CAMERA_MOVE(2),
      TOGGLE_AUTOCAST(3),
      ACTION_NOT_SET(0);
      private final int value;
      private ActionCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ActionCase valueOf(int value) {
        return forNumber(value);
      }

      public static ActionCase forNumber(int value) {
        switch (value) {
          case 1: return UNIT_COMMAND;
          case 2: return CAMERA_MOVE;
          case 3: return TOGGLE_AUTOCAST;
          case 0: return ACTION_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ActionCase
    getActionCase() {
      return ActionCase.forNumber(
          actionCase_);
    }

    public static final int UNIT_COMMAND_FIELD_NUMBER = 1;
    /**
     * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
     */
    public boolean hasUnitCommand() {
      return actionCase_ == 1;
    }
    /**
     * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
     */
    public SC2APIProtocol.Raw.ActionRawUnitCommand getUnitCommand() {
      if (actionCase_ == 1) {
         return (SC2APIProtocol.Raw.ActionRawUnitCommand) action_;
      }
      return SC2APIProtocol.Raw.ActionRawUnitCommand.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
     */
    public SC2APIProtocol.Raw.ActionRawUnitCommandOrBuilder getUnitCommandOrBuilder() {
      if (actionCase_ == 1) {
         return (SC2APIProtocol.Raw.ActionRawUnitCommand) action_;
      }
      return SC2APIProtocol.Raw.ActionRawUnitCommand.getDefaultInstance();
    }

    public static final int CAMERA_MOVE_FIELD_NUMBER = 2;
    /**
     * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
     */
    public boolean hasCameraMove() {
      return actionCase_ == 2;
    }
    /**
     * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
     */
    public SC2APIProtocol.Raw.ActionRawCameraMove getCameraMove() {
      if (actionCase_ == 2) {
         return (SC2APIProtocol.Raw.ActionRawCameraMove) action_;
      }
      return SC2APIProtocol.Raw.ActionRawCameraMove.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
     */
    public SC2APIProtocol.Raw.ActionRawCameraMoveOrBuilder getCameraMoveOrBuilder() {
      if (actionCase_ == 2) {
         return (SC2APIProtocol.Raw.ActionRawCameraMove) action_;
      }
      return SC2APIProtocol.Raw.ActionRawCameraMove.getDefaultInstance();
    }

    public static final int TOGGLE_AUTOCAST_FIELD_NUMBER = 3;
    /**
     * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
     */
    public boolean hasToggleAutocast() {
      return actionCase_ == 3;
    }
    /**
     * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
     */
    public SC2APIProtocol.Raw.ActionRawToggleAutocast getToggleAutocast() {
      if (actionCase_ == 3) {
         return (SC2APIProtocol.Raw.ActionRawToggleAutocast) action_;
      }
      return SC2APIProtocol.Raw.ActionRawToggleAutocast.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
     */
    public SC2APIProtocol.Raw.ActionRawToggleAutocastOrBuilder getToggleAutocastOrBuilder() {
      if (actionCase_ == 3) {
         return (SC2APIProtocol.Raw.ActionRawToggleAutocast) action_;
      }
      return SC2APIProtocol.Raw.ActionRawToggleAutocast.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (actionCase_ == 1) {
        output.writeMessage(1, (SC2APIProtocol.Raw.ActionRawUnitCommand) action_);
      }
      if (actionCase_ == 2) {
        output.writeMessage(2, (SC2APIProtocol.Raw.ActionRawCameraMove) action_);
      }
      if (actionCase_ == 3) {
        output.writeMessage(3, (SC2APIProtocol.Raw.ActionRawToggleAutocast) action_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (actionCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (SC2APIProtocol.Raw.ActionRawUnitCommand) action_);
      }
      if (actionCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (SC2APIProtocol.Raw.ActionRawCameraMove) action_);
      }
      if (actionCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (SC2APIProtocol.Raw.ActionRawToggleAutocast) action_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.ActionRaw)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.ActionRaw other = (SC2APIProtocol.Raw.ActionRaw) obj;

      boolean result = true;
      result = result && getActionCase().equals(
          other.getActionCase());
      if (!result) return false;
      switch (actionCase_) {
        case 1:
          result = result && getUnitCommand()
              .equals(other.getUnitCommand());
          break;
        case 2:
          result = result && getCameraMove()
              .equals(other.getCameraMove());
          break;
        case 3:
          result = result && getToggleAutocast()
              .equals(other.getToggleAutocast());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      switch (actionCase_) {
        case 1:
          hash = (37 * hash) + UNIT_COMMAND_FIELD_NUMBER;
          hash = (53 * hash) + getUnitCommand().hashCode();
          break;
        case 2:
          hash = (37 * hash) + CAMERA_MOVE_FIELD_NUMBER;
          hash = (53 * hash) + getCameraMove().hashCode();
          break;
        case 3:
          hash = (37 * hash) + TOGGLE_AUTOCAST_FIELD_NUMBER;
          hash = (53 * hash) + getToggleAutocast().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.ActionRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.ActionRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.ActionRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.ActionRaw prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ActionRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ActionRaw)
        SC2APIProtocol.Raw.ActionRawOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRaw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRaw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.ActionRaw.class, SC2APIProtocol.Raw.ActionRaw.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.ActionRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        actionCase_ = 0;
        action_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRaw_descriptor;
      }

      public SC2APIProtocol.Raw.ActionRaw getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.ActionRaw.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.ActionRaw build() {
        SC2APIProtocol.Raw.ActionRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.ActionRaw buildPartial() {
        SC2APIProtocol.Raw.ActionRaw result = new SC2APIProtocol.Raw.ActionRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (actionCase_ == 1) {
          if (unitCommandBuilder_ == null) {
            result.action_ = action_;
          } else {
            result.action_ = unitCommandBuilder_.build();
          }
        }
        if (actionCase_ == 2) {
          if (cameraMoveBuilder_ == null) {
            result.action_ = action_;
          } else {
            result.action_ = cameraMoveBuilder_.build();
          }
        }
        if (actionCase_ == 3) {
          if (toggleAutocastBuilder_ == null) {
            result.action_ = action_;
          } else {
            result.action_ = toggleAutocastBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.actionCase_ = actionCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.ActionRaw) {
          return mergeFrom((SC2APIProtocol.Raw.ActionRaw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.ActionRaw other) {
        if (other == SC2APIProtocol.Raw.ActionRaw.getDefaultInstance()) return this;
        switch (other.getActionCase()) {
          case UNIT_COMMAND: {
            mergeUnitCommand(other.getUnitCommand());
            break;
          }
          case CAMERA_MOVE: {
            mergeCameraMove(other.getCameraMove());
            break;
          }
          case TOGGLE_AUTOCAST: {
            mergeToggleAutocast(other.getToggleAutocast());
            break;
          }
          case ACTION_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.ActionRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.ActionRaw) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int actionCase_ = 0;
      private java.lang.Object action_;
      public ActionCase
          getActionCase() {
        return ActionCase.forNumber(
            actionCase_);
      }

      public Builder clearAction() {
        actionCase_ = 0;
        action_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.ActionRawUnitCommand, SC2APIProtocol.Raw.ActionRawUnitCommand.Builder, SC2APIProtocol.Raw.ActionRawUnitCommandOrBuilder> unitCommandBuilder_;
      /**
       * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
       */
      public boolean hasUnitCommand() {
        return actionCase_ == 1;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
       */
      public SC2APIProtocol.Raw.ActionRawUnitCommand getUnitCommand() {
        if (unitCommandBuilder_ == null) {
          if (actionCase_ == 1) {
            return (SC2APIProtocol.Raw.ActionRawUnitCommand) action_;
          }
          return SC2APIProtocol.Raw.ActionRawUnitCommand.getDefaultInstance();
        } else {
          if (actionCase_ == 1) {
            return unitCommandBuilder_.getMessage();
          }
          return SC2APIProtocol.Raw.ActionRawUnitCommand.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
       */
      public Builder setUnitCommand(SC2APIProtocol.Raw.ActionRawUnitCommand value) {
        if (unitCommandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          action_ = value;
          onChanged();
        } else {
          unitCommandBuilder_.setMessage(value);
        }
        actionCase_ = 1;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
       */
      public Builder setUnitCommand(
          SC2APIProtocol.Raw.ActionRawUnitCommand.Builder builderForValue) {
        if (unitCommandBuilder_ == null) {
          action_ = builderForValue.build();
          onChanged();
        } else {
          unitCommandBuilder_.setMessage(builderForValue.build());
        }
        actionCase_ = 1;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
       */
      public Builder mergeUnitCommand(SC2APIProtocol.Raw.ActionRawUnitCommand value) {
        if (unitCommandBuilder_ == null) {
          if (actionCase_ == 1 &&
              action_ != SC2APIProtocol.Raw.ActionRawUnitCommand.getDefaultInstance()) {
            action_ = SC2APIProtocol.Raw.ActionRawUnitCommand.newBuilder((SC2APIProtocol.Raw.ActionRawUnitCommand) action_)
                .mergeFrom(value).buildPartial();
          } else {
            action_ = value;
          }
          onChanged();
        } else {
          if (actionCase_ == 1) {
            unitCommandBuilder_.mergeFrom(value);
          }
          unitCommandBuilder_.setMessage(value);
        }
        actionCase_ = 1;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
       */
      public Builder clearUnitCommand() {
        if (unitCommandBuilder_ == null) {
          if (actionCase_ == 1) {
            actionCase_ = 0;
            action_ = null;
            onChanged();
          }
        } else {
          if (actionCase_ == 1) {
            actionCase_ = 0;
            action_ = null;
          }
          unitCommandBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
       */
      public SC2APIProtocol.Raw.ActionRawUnitCommand.Builder getUnitCommandBuilder() {
        return getUnitCommandFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
       */
      public SC2APIProtocol.Raw.ActionRawUnitCommandOrBuilder getUnitCommandOrBuilder() {
        if ((actionCase_ == 1) && (unitCommandBuilder_ != null)) {
          return unitCommandBuilder_.getMessageOrBuilder();
        } else {
          if (actionCase_ == 1) {
            return (SC2APIProtocol.Raw.ActionRawUnitCommand) action_;
          }
          return SC2APIProtocol.Raw.ActionRawUnitCommand.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.ActionRawUnitCommand, SC2APIProtocol.Raw.ActionRawUnitCommand.Builder, SC2APIProtocol.Raw.ActionRawUnitCommandOrBuilder> 
          getUnitCommandFieldBuilder() {
        if (unitCommandBuilder_ == null) {
          if (!(actionCase_ == 1)) {
            action_ = SC2APIProtocol.Raw.ActionRawUnitCommand.getDefaultInstance();
          }
          unitCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Raw.ActionRawUnitCommand, SC2APIProtocol.Raw.ActionRawUnitCommand.Builder, SC2APIProtocol.Raw.ActionRawUnitCommandOrBuilder>(
                  (SC2APIProtocol.Raw.ActionRawUnitCommand) action_,
                  getParentForChildren(),
                  isClean());
          action_ = null;
        }
        actionCase_ = 1;
        onChanged();;
        return unitCommandBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.ActionRawCameraMove, SC2APIProtocol.Raw.ActionRawCameraMove.Builder, SC2APIProtocol.Raw.ActionRawCameraMoveOrBuilder> cameraMoveBuilder_;
      /**
       * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
       */
      public boolean hasCameraMove() {
        return actionCase_ == 2;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
       */
      public SC2APIProtocol.Raw.ActionRawCameraMove getCameraMove() {
        if (cameraMoveBuilder_ == null) {
          if (actionCase_ == 2) {
            return (SC2APIProtocol.Raw.ActionRawCameraMove) action_;
          }
          return SC2APIProtocol.Raw.ActionRawCameraMove.getDefaultInstance();
        } else {
          if (actionCase_ == 2) {
            return cameraMoveBuilder_.getMessage();
          }
          return SC2APIProtocol.Raw.ActionRawCameraMove.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
       */
      public Builder setCameraMove(SC2APIProtocol.Raw.ActionRawCameraMove value) {
        if (cameraMoveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          action_ = value;
          onChanged();
        } else {
          cameraMoveBuilder_.setMessage(value);
        }
        actionCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
       */
      public Builder setCameraMove(
          SC2APIProtocol.Raw.ActionRawCameraMove.Builder builderForValue) {
        if (cameraMoveBuilder_ == null) {
          action_ = builderForValue.build();
          onChanged();
        } else {
          cameraMoveBuilder_.setMessage(builderForValue.build());
        }
        actionCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
       */
      public Builder mergeCameraMove(SC2APIProtocol.Raw.ActionRawCameraMove value) {
        if (cameraMoveBuilder_ == null) {
          if (actionCase_ == 2 &&
              action_ != SC2APIProtocol.Raw.ActionRawCameraMove.getDefaultInstance()) {
            action_ = SC2APIProtocol.Raw.ActionRawCameraMove.newBuilder((SC2APIProtocol.Raw.ActionRawCameraMove) action_)
                .mergeFrom(value).buildPartial();
          } else {
            action_ = value;
          }
          onChanged();
        } else {
          if (actionCase_ == 2) {
            cameraMoveBuilder_.mergeFrom(value);
          }
          cameraMoveBuilder_.setMessage(value);
        }
        actionCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
       */
      public Builder clearCameraMove() {
        if (cameraMoveBuilder_ == null) {
          if (actionCase_ == 2) {
            actionCase_ = 0;
            action_ = null;
            onChanged();
          }
        } else {
          if (actionCase_ == 2) {
            actionCase_ = 0;
            action_ = null;
          }
          cameraMoveBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
       */
      public SC2APIProtocol.Raw.ActionRawCameraMove.Builder getCameraMoveBuilder() {
        return getCameraMoveFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
       */
      public SC2APIProtocol.Raw.ActionRawCameraMoveOrBuilder getCameraMoveOrBuilder() {
        if ((actionCase_ == 2) && (cameraMoveBuilder_ != null)) {
          return cameraMoveBuilder_.getMessageOrBuilder();
        } else {
          if (actionCase_ == 2) {
            return (SC2APIProtocol.Raw.ActionRawCameraMove) action_;
          }
          return SC2APIProtocol.Raw.ActionRawCameraMove.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.ActionRawCameraMove, SC2APIProtocol.Raw.ActionRawCameraMove.Builder, SC2APIProtocol.Raw.ActionRawCameraMoveOrBuilder> 
          getCameraMoveFieldBuilder() {
        if (cameraMoveBuilder_ == null) {
          if (!(actionCase_ == 2)) {
            action_ = SC2APIProtocol.Raw.ActionRawCameraMove.getDefaultInstance();
          }
          cameraMoveBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Raw.ActionRawCameraMove, SC2APIProtocol.Raw.ActionRawCameraMove.Builder, SC2APIProtocol.Raw.ActionRawCameraMoveOrBuilder>(
                  (SC2APIProtocol.Raw.ActionRawCameraMove) action_,
                  getParentForChildren(),
                  isClean());
          action_ = null;
        }
        actionCase_ = 2;
        onChanged();;
        return cameraMoveBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.ActionRawToggleAutocast, SC2APIProtocol.Raw.ActionRawToggleAutocast.Builder, SC2APIProtocol.Raw.ActionRawToggleAutocastOrBuilder> toggleAutocastBuilder_;
      /**
       * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
       */
      public boolean hasToggleAutocast() {
        return actionCase_ == 3;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
       */
      public SC2APIProtocol.Raw.ActionRawToggleAutocast getToggleAutocast() {
        if (toggleAutocastBuilder_ == null) {
          if (actionCase_ == 3) {
            return (SC2APIProtocol.Raw.ActionRawToggleAutocast) action_;
          }
          return SC2APIProtocol.Raw.ActionRawToggleAutocast.getDefaultInstance();
        } else {
          if (actionCase_ == 3) {
            return toggleAutocastBuilder_.getMessage();
          }
          return SC2APIProtocol.Raw.ActionRawToggleAutocast.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
       */
      public Builder setToggleAutocast(SC2APIProtocol.Raw.ActionRawToggleAutocast value) {
        if (toggleAutocastBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          action_ = value;
          onChanged();
        } else {
          toggleAutocastBuilder_.setMessage(value);
        }
        actionCase_ = 3;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
       */
      public Builder setToggleAutocast(
          SC2APIProtocol.Raw.ActionRawToggleAutocast.Builder builderForValue) {
        if (toggleAutocastBuilder_ == null) {
          action_ = builderForValue.build();
          onChanged();
        } else {
          toggleAutocastBuilder_.setMessage(builderForValue.build());
        }
        actionCase_ = 3;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
       */
      public Builder mergeToggleAutocast(SC2APIProtocol.Raw.ActionRawToggleAutocast value) {
        if (toggleAutocastBuilder_ == null) {
          if (actionCase_ == 3 &&
              action_ != SC2APIProtocol.Raw.ActionRawToggleAutocast.getDefaultInstance()) {
            action_ = SC2APIProtocol.Raw.ActionRawToggleAutocast.newBuilder((SC2APIProtocol.Raw.ActionRawToggleAutocast) action_)
                .mergeFrom(value).buildPartial();
          } else {
            action_ = value;
          }
          onChanged();
        } else {
          if (actionCase_ == 3) {
            toggleAutocastBuilder_.mergeFrom(value);
          }
          toggleAutocastBuilder_.setMessage(value);
        }
        actionCase_ = 3;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
       */
      public Builder clearToggleAutocast() {
        if (toggleAutocastBuilder_ == null) {
          if (actionCase_ == 3) {
            actionCase_ = 0;
            action_ = null;
            onChanged();
          }
        } else {
          if (actionCase_ == 3) {
            actionCase_ = 0;
            action_ = null;
          }
          toggleAutocastBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
       */
      public SC2APIProtocol.Raw.ActionRawToggleAutocast.Builder getToggleAutocastBuilder() {
        return getToggleAutocastFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
       */
      public SC2APIProtocol.Raw.ActionRawToggleAutocastOrBuilder getToggleAutocastOrBuilder() {
        if ((actionCase_ == 3) && (toggleAutocastBuilder_ != null)) {
          return toggleAutocastBuilder_.getMessageOrBuilder();
        } else {
          if (actionCase_ == 3) {
            return (SC2APIProtocol.Raw.ActionRawToggleAutocast) action_;
          }
          return SC2APIProtocol.Raw.ActionRawToggleAutocast.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Raw.ActionRawToggleAutocast, SC2APIProtocol.Raw.ActionRawToggleAutocast.Builder, SC2APIProtocol.Raw.ActionRawToggleAutocastOrBuilder> 
          getToggleAutocastFieldBuilder() {
        if (toggleAutocastBuilder_ == null) {
          if (!(actionCase_ == 3)) {
            action_ = SC2APIProtocol.Raw.ActionRawToggleAutocast.getDefaultInstance();
          }
          toggleAutocastBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Raw.ActionRawToggleAutocast, SC2APIProtocol.Raw.ActionRawToggleAutocast.Builder, SC2APIProtocol.Raw.ActionRawToggleAutocastOrBuilder>(
                  (SC2APIProtocol.Raw.ActionRawToggleAutocast) action_,
                  getParentForChildren(),
                  isClean());
          action_ = null;
        }
        actionCase_ = 3;
        onChanged();;
        return toggleAutocastBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ActionRaw)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionRaw)
    private static final SC2APIProtocol.Raw.ActionRaw DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.ActionRaw();
    }

    public static SC2APIProtocol.Raw.ActionRaw getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ActionRaw>
        PARSER = new com.google.protobuf.AbstractParser<ActionRaw>() {
      public ActionRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ActionRaw(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ActionRaw> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ActionRaw> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.ActionRaw getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActionRawUnitCommandOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ActionRawUnitCommand)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    boolean hasAbilityId();
    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    int getAbilityId();

    /**
     * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
     */
    boolean hasTargetWorldSpacePos();
    /**
     * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
     */
    SC2APIProtocol.Common.Point2D getTargetWorldSpacePos();
    /**
     * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
     */
    SC2APIProtocol.Common.Point2DOrBuilder getTargetWorldSpacePosOrBuilder();

    /**
     * <code>optional uint64 target_unit_tag = 3;</code>
     */
    boolean hasTargetUnitTag();
    /**
     * <code>optional uint64 target_unit_tag = 3;</code>
     */
    long getTargetUnitTag();

    /**
     * <code>repeated uint64 unit_tags = 4;</code>
     */
    java.util.List<java.lang.Long> getUnitTagsList();
    /**
     * <code>repeated uint64 unit_tags = 4;</code>
     */
    int getUnitTagsCount();
    /**
     * <code>repeated uint64 unit_tags = 4;</code>
     */
    long getUnitTags(int index);

    /**
     * <code>optional bool queue_command = 5;</code>
     */
    boolean hasQueueCommand();
    /**
     * <code>optional bool queue_command = 5;</code>
     */
    boolean getQueueCommand();

    public SC2APIProtocol.Raw.ActionRawUnitCommand.TargetCase getTargetCase();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ActionRawUnitCommand}
   */
  public  static final class ActionRawUnitCommand extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ActionRawUnitCommand)
      ActionRawUnitCommandOrBuilder {
    // Use ActionRawUnitCommand.newBuilder() to construct.
    private ActionRawUnitCommand(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ActionRawUnitCommand() {
      abilityId_ = 0;
      unitTags_ = java.util.Collections.emptyList();
      queueCommand_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ActionRawUnitCommand(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              abilityId_ = input.readInt32();
              break;
            }
            case 18: {
              SC2APIProtocol.Common.Point2D.Builder subBuilder = null;
              if (targetCase_ == 2) {
                subBuilder = ((SC2APIProtocol.Common.Point2D) target_).toBuilder();
              }
              target_ =
                  input.readMessage(SC2APIProtocol.Common.Point2D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SC2APIProtocol.Common.Point2D) target_);
                target_ = subBuilder.buildPartial();
              }
              targetCase_ = 2;
              break;
            }
            case 24: {
              targetCase_ = 3;
              target_ = input.readUInt64();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                unitTags_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000008;
              }
              unitTags_.add(input.readUInt64());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                unitTags_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                unitTags_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              queueCommand_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          unitTags_ = java.util.Collections.unmodifiableList(unitTags_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawUnitCommand_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawUnitCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.ActionRawUnitCommand.class, SC2APIProtocol.Raw.ActionRawUnitCommand.Builder.class);
    }

    private int bitField0_;
    private int targetCase_ = 0;
    private java.lang.Object target_;
    public enum TargetCase
        implements com.google.protobuf.Internal.EnumLite {
      TARGET_WORLD_SPACE_POS(2),
      TARGET_UNIT_TAG(3),
      TARGET_NOT_SET(0);
      private final int value;
      private TargetCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TargetCase valueOf(int value) {
        return forNumber(value);
      }

      public static TargetCase forNumber(int value) {
        switch (value) {
          case 2: return TARGET_WORLD_SPACE_POS;
          case 3: return TARGET_UNIT_TAG;
          case 0: return TARGET_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TargetCase
    getTargetCase() {
      return TargetCase.forNumber(
          targetCase_);
    }

    public static final int ABILITY_ID_FIELD_NUMBER = 1;
    private int abilityId_;
    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    public boolean hasAbilityId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    public int getAbilityId() {
      return abilityId_;
    }

    public static final int TARGET_WORLD_SPACE_POS_FIELD_NUMBER = 2;
    /**
     * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
     */
    public boolean hasTargetWorldSpacePos() {
      return targetCase_ == 2;
    }
    /**
     * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
     */
    public SC2APIProtocol.Common.Point2D getTargetWorldSpacePos() {
      if (targetCase_ == 2) {
         return (SC2APIProtocol.Common.Point2D) target_;
      }
      return SC2APIProtocol.Common.Point2D.getDefaultInstance();
    }
    /**
     * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
     */
    public SC2APIProtocol.Common.Point2DOrBuilder getTargetWorldSpacePosOrBuilder() {
      if (targetCase_ == 2) {
         return (SC2APIProtocol.Common.Point2D) target_;
      }
      return SC2APIProtocol.Common.Point2D.getDefaultInstance();
    }

    public static final int TARGET_UNIT_TAG_FIELD_NUMBER = 3;
    /**
     * <code>optional uint64 target_unit_tag = 3;</code>
     */
    public boolean hasTargetUnitTag() {
      return targetCase_ == 3;
    }
    /**
     * <code>optional uint64 target_unit_tag = 3;</code>
     */
    public long getTargetUnitTag() {
      if (targetCase_ == 3) {
        return (java.lang.Long) target_;
      }
      return 0L;
    }

    public static final int UNIT_TAGS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Long> unitTags_;
    /**
     * <code>repeated uint64 unit_tags = 4;</code>
     */
    public java.util.List<java.lang.Long>
        getUnitTagsList() {
      return unitTags_;
    }
    /**
     * <code>repeated uint64 unit_tags = 4;</code>
     */
    public int getUnitTagsCount() {
      return unitTags_.size();
    }
    /**
     * <code>repeated uint64 unit_tags = 4;</code>
     */
    public long getUnitTags(int index) {
      return unitTags_.get(index);
    }

    public static final int QUEUE_COMMAND_FIELD_NUMBER = 5;
    private boolean queueCommand_;
    /**
     * <code>optional bool queue_command = 5;</code>
     */
    public boolean hasQueueCommand() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool queue_command = 5;</code>
     */
    public boolean getQueueCommand() {
      return queueCommand_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, abilityId_);
      }
      if (targetCase_ == 2) {
        output.writeMessage(2, (SC2APIProtocol.Common.Point2D) target_);
      }
      if (targetCase_ == 3) {
        output.writeUInt64(
            3, (long)((java.lang.Long) target_));
      }
      for (int i = 0; i < unitTags_.size(); i++) {
        output.writeUInt64(4, unitTags_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(5, queueCommand_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, abilityId_);
      }
      if (targetCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (SC2APIProtocol.Common.Point2D) target_);
      }
      if (targetCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              3, (long)((java.lang.Long) target_));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < unitTags_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(unitTags_.get(i));
        }
        size += dataSize;
        size += 1 * getUnitTagsList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, queueCommand_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.ActionRawUnitCommand)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.ActionRawUnitCommand other = (SC2APIProtocol.Raw.ActionRawUnitCommand) obj;

      boolean result = true;
      result = result && (hasAbilityId() == other.hasAbilityId());
      if (hasAbilityId()) {
        result = result && (getAbilityId()
            == other.getAbilityId());
      }
      result = result && getUnitTagsList()
          .equals(other.getUnitTagsList());
      result = result && (hasQueueCommand() == other.hasQueueCommand());
      if (hasQueueCommand()) {
        result = result && (getQueueCommand()
            == other.getQueueCommand());
      }
      result = result && getTargetCase().equals(
          other.getTargetCase());
      if (!result) return false;
      switch (targetCase_) {
        case 2:
          result = result && getTargetWorldSpacePos()
              .equals(other.getTargetWorldSpacePos());
          break;
        case 3:
          result = result && (getTargetUnitTag()
              == other.getTargetUnitTag());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasAbilityId()) {
        hash = (37 * hash) + ABILITY_ID_FIELD_NUMBER;
        hash = (53 * hash) + getAbilityId();
      }
      if (getUnitTagsCount() > 0) {
        hash = (37 * hash) + UNIT_TAGS_FIELD_NUMBER;
        hash = (53 * hash) + getUnitTagsList().hashCode();
      }
      if (hasQueueCommand()) {
        hash = (37 * hash) + QUEUE_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getQueueCommand());
      }
      switch (targetCase_) {
        case 2:
          hash = (37 * hash) + TARGET_WORLD_SPACE_POS_FIELD_NUMBER;
          hash = (53 * hash) + getTargetWorldSpacePos().hashCode();
          break;
        case 3:
          hash = (37 * hash) + TARGET_UNIT_TAG_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTargetUnitTag());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.ActionRawUnitCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.ActionRawUnitCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawUnitCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.ActionRawUnitCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawUnitCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRawUnitCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawUnitCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRawUnitCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawUnitCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRawUnitCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.ActionRawUnitCommand prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ActionRawUnitCommand}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ActionRawUnitCommand)
        SC2APIProtocol.Raw.ActionRawUnitCommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawUnitCommand_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawUnitCommand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.ActionRawUnitCommand.class, SC2APIProtocol.Raw.ActionRawUnitCommand.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.ActionRawUnitCommand.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        abilityId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        unitTags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        queueCommand_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        targetCase_ = 0;
        target_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawUnitCommand_descriptor;
      }

      public SC2APIProtocol.Raw.ActionRawUnitCommand getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.ActionRawUnitCommand.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.ActionRawUnitCommand build() {
        SC2APIProtocol.Raw.ActionRawUnitCommand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.ActionRawUnitCommand buildPartial() {
        SC2APIProtocol.Raw.ActionRawUnitCommand result = new SC2APIProtocol.Raw.ActionRawUnitCommand(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.abilityId_ = abilityId_;
        if (targetCase_ == 2) {
          if (targetWorldSpacePosBuilder_ == null) {
            result.target_ = target_;
          } else {
            result.target_ = targetWorldSpacePosBuilder_.build();
          }
        }
        if (targetCase_ == 3) {
          result.target_ = target_;
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          unitTags_ = java.util.Collections.unmodifiableList(unitTags_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.unitTags_ = unitTags_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.queueCommand_ = queueCommand_;
        result.bitField0_ = to_bitField0_;
        result.targetCase_ = targetCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.ActionRawUnitCommand) {
          return mergeFrom((SC2APIProtocol.Raw.ActionRawUnitCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.ActionRawUnitCommand other) {
        if (other == SC2APIProtocol.Raw.ActionRawUnitCommand.getDefaultInstance()) return this;
        if (other.hasAbilityId()) {
          setAbilityId(other.getAbilityId());
        }
        if (!other.unitTags_.isEmpty()) {
          if (unitTags_.isEmpty()) {
            unitTags_ = other.unitTags_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureUnitTagsIsMutable();
            unitTags_.addAll(other.unitTags_);
          }
          onChanged();
        }
        if (other.hasQueueCommand()) {
          setQueueCommand(other.getQueueCommand());
        }
        switch (other.getTargetCase()) {
          case TARGET_WORLD_SPACE_POS: {
            mergeTargetWorldSpacePos(other.getTargetWorldSpacePos());
            break;
          }
          case TARGET_UNIT_TAG: {
            setTargetUnitTag(other.getTargetUnitTag());
            break;
          }
          case TARGET_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.ActionRawUnitCommand parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.ActionRawUnitCommand) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int targetCase_ = 0;
      private java.lang.Object target_;
      public TargetCase
          getTargetCase() {
        return TargetCase.forNumber(
            targetCase_);
      }

      public Builder clearTarget() {
        targetCase_ = 0;
        target_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int abilityId_ ;
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public boolean hasAbilityId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public int getAbilityId() {
        return abilityId_;
      }
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public Builder setAbilityId(int value) {
        bitField0_ |= 0x00000001;
        abilityId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public Builder clearAbilityId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        abilityId_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point2D, SC2APIProtocol.Common.Point2D.Builder, SC2APIProtocol.Common.Point2DOrBuilder> targetWorldSpacePosBuilder_;
      /**
       * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
       */
      public boolean hasTargetWorldSpacePos() {
        return targetCase_ == 2;
      }
      /**
       * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
       */
      public SC2APIProtocol.Common.Point2D getTargetWorldSpacePos() {
        if (targetWorldSpacePosBuilder_ == null) {
          if (targetCase_ == 2) {
            return (SC2APIProtocol.Common.Point2D) target_;
          }
          return SC2APIProtocol.Common.Point2D.getDefaultInstance();
        } else {
          if (targetCase_ == 2) {
            return targetWorldSpacePosBuilder_.getMessage();
          }
          return SC2APIProtocol.Common.Point2D.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
       */
      public Builder setTargetWorldSpacePos(SC2APIProtocol.Common.Point2D value) {
        if (targetWorldSpacePosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetWorldSpacePosBuilder_.setMessage(value);
        }
        targetCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
       */
      public Builder setTargetWorldSpacePos(
          SC2APIProtocol.Common.Point2D.Builder builderForValue) {
        if (targetWorldSpacePosBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetWorldSpacePosBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
       */
      public Builder mergeTargetWorldSpacePos(SC2APIProtocol.Common.Point2D value) {
        if (targetWorldSpacePosBuilder_ == null) {
          if (targetCase_ == 2 &&
              target_ != SC2APIProtocol.Common.Point2D.getDefaultInstance()) {
            target_ = SC2APIProtocol.Common.Point2D.newBuilder((SC2APIProtocol.Common.Point2D) target_)
                .mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 2) {
            targetWorldSpacePosBuilder_.mergeFrom(value);
          }
          targetWorldSpacePosBuilder_.setMessage(value);
        }
        targetCase_ = 2;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
       */
      public Builder clearTargetWorldSpacePos() {
        if (targetWorldSpacePosBuilder_ == null) {
          if (targetCase_ == 2) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 2) {
            targetCase_ = 0;
            target_ = null;
          }
          targetWorldSpacePosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
       */
      public SC2APIProtocol.Common.Point2D.Builder getTargetWorldSpacePosBuilder() {
        return getTargetWorldSpacePosFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
       */
      public SC2APIProtocol.Common.Point2DOrBuilder getTargetWorldSpacePosOrBuilder() {
        if ((targetCase_ == 2) && (targetWorldSpacePosBuilder_ != null)) {
          return targetWorldSpacePosBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 2) {
            return (SC2APIProtocol.Common.Point2D) target_;
          }
          return SC2APIProtocol.Common.Point2D.getDefaultInstance();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point2D target_world_space_pos = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point2D, SC2APIProtocol.Common.Point2D.Builder, SC2APIProtocol.Common.Point2DOrBuilder> 
          getTargetWorldSpacePosFieldBuilder() {
        if (targetWorldSpacePosBuilder_ == null) {
          if (!(targetCase_ == 2)) {
            target_ = SC2APIProtocol.Common.Point2D.getDefaultInstance();
          }
          targetWorldSpacePosBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.Point2D, SC2APIProtocol.Common.Point2D.Builder, SC2APIProtocol.Common.Point2DOrBuilder>(
                  (SC2APIProtocol.Common.Point2D) target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 2;
        onChanged();;
        return targetWorldSpacePosBuilder_;
      }

      /**
       * <code>optional uint64 target_unit_tag = 3;</code>
       */
      public boolean hasTargetUnitTag() {
        return targetCase_ == 3;
      }
      /**
       * <code>optional uint64 target_unit_tag = 3;</code>
       */
      public long getTargetUnitTag() {
        if (targetCase_ == 3) {
          return (java.lang.Long) target_;
        }
        return 0L;
      }
      /**
       * <code>optional uint64 target_unit_tag = 3;</code>
       */
      public Builder setTargetUnitTag(long value) {
        targetCase_ = 3;
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 target_unit_tag = 3;</code>
       */
      public Builder clearTargetUnitTag() {
        if (targetCase_ == 3) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
        return this;
      }

      private java.util.List<java.lang.Long> unitTags_ = java.util.Collections.emptyList();
      private void ensureUnitTagsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          unitTags_ = new java.util.ArrayList<java.lang.Long>(unitTags_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated uint64 unit_tags = 4;</code>
       */
      public java.util.List<java.lang.Long>
          getUnitTagsList() {
        return java.util.Collections.unmodifiableList(unitTags_);
      }
      /**
       * <code>repeated uint64 unit_tags = 4;</code>
       */
      public int getUnitTagsCount() {
        return unitTags_.size();
      }
      /**
       * <code>repeated uint64 unit_tags = 4;</code>
       */
      public long getUnitTags(int index) {
        return unitTags_.get(index);
      }
      /**
       * <code>repeated uint64 unit_tags = 4;</code>
       */
      public Builder setUnitTags(
          int index, long value) {
        ensureUnitTagsIsMutable();
        unitTags_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 unit_tags = 4;</code>
       */
      public Builder addUnitTags(long value) {
        ensureUnitTagsIsMutable();
        unitTags_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 unit_tags = 4;</code>
       */
      public Builder addAllUnitTags(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureUnitTagsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, unitTags_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 unit_tags = 4;</code>
       */
      public Builder clearUnitTags() {
        unitTags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private boolean queueCommand_ ;
      /**
       * <code>optional bool queue_command = 5;</code>
       */
      public boolean hasQueueCommand() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool queue_command = 5;</code>
       */
      public boolean getQueueCommand() {
        return queueCommand_;
      }
      /**
       * <code>optional bool queue_command = 5;</code>
       */
      public Builder setQueueCommand(boolean value) {
        bitField0_ |= 0x00000010;
        queueCommand_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool queue_command = 5;</code>
       */
      public Builder clearQueueCommand() {
        bitField0_ = (bitField0_ & ~0x00000010);
        queueCommand_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ActionRawUnitCommand)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionRawUnitCommand)
    private static final SC2APIProtocol.Raw.ActionRawUnitCommand DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.ActionRawUnitCommand();
    }

    public static SC2APIProtocol.Raw.ActionRawUnitCommand getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ActionRawUnitCommand>
        PARSER = new com.google.protobuf.AbstractParser<ActionRawUnitCommand>() {
      public ActionRawUnitCommand parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ActionRawUnitCommand(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ActionRawUnitCommand> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ActionRawUnitCommand> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.ActionRawUnitCommand getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActionRawCameraMoveOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ActionRawCameraMove)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
     */
    boolean hasCenterWorldSpace();
    /**
     * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
     */
    SC2APIProtocol.Common.Point getCenterWorldSpace();
    /**
     * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
     */
    SC2APIProtocol.Common.PointOrBuilder getCenterWorldSpaceOrBuilder();
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ActionRawCameraMove}
   */
  public  static final class ActionRawCameraMove extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ActionRawCameraMove)
      ActionRawCameraMoveOrBuilder {
    // Use ActionRawCameraMove.newBuilder() to construct.
    private ActionRawCameraMove(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ActionRawCameraMove() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ActionRawCameraMove(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              SC2APIProtocol.Common.Point.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = centerWorldSpace_.toBuilder();
              }
              centerWorldSpace_ = input.readMessage(SC2APIProtocol.Common.Point.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(centerWorldSpace_);
                centerWorldSpace_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawCameraMove_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawCameraMove_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.ActionRawCameraMove.class, SC2APIProtocol.Raw.ActionRawCameraMove.Builder.class);
    }

    private int bitField0_;
    public static final int CENTER_WORLD_SPACE_FIELD_NUMBER = 1;
    private SC2APIProtocol.Common.Point centerWorldSpace_;
    /**
     * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
     */
    public boolean hasCenterWorldSpace() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
     */
    public SC2APIProtocol.Common.Point getCenterWorldSpace() {
      return centerWorldSpace_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : centerWorldSpace_;
    }
    /**
     * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
     */
    public SC2APIProtocol.Common.PointOrBuilder getCenterWorldSpaceOrBuilder() {
      return centerWorldSpace_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : centerWorldSpace_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getCenterWorldSpace());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCenterWorldSpace());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.ActionRawCameraMove)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.ActionRawCameraMove other = (SC2APIProtocol.Raw.ActionRawCameraMove) obj;

      boolean result = true;
      result = result && (hasCenterWorldSpace() == other.hasCenterWorldSpace());
      if (hasCenterWorldSpace()) {
        result = result && getCenterWorldSpace()
            .equals(other.getCenterWorldSpace());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasCenterWorldSpace()) {
        hash = (37 * hash) + CENTER_WORLD_SPACE_FIELD_NUMBER;
        hash = (53 * hash) + getCenterWorldSpace().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.ActionRawCameraMove parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.ActionRawCameraMove parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawCameraMove parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.ActionRawCameraMove parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawCameraMove parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRawCameraMove parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawCameraMove parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRawCameraMove parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawCameraMove parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRawCameraMove parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.ActionRawCameraMove prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ActionRawCameraMove}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ActionRawCameraMove)
        SC2APIProtocol.Raw.ActionRawCameraMoveOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawCameraMove_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawCameraMove_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.ActionRawCameraMove.class, SC2APIProtocol.Raw.ActionRawCameraMove.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.ActionRawCameraMove.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCenterWorldSpaceFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (centerWorldSpaceBuilder_ == null) {
          centerWorldSpace_ = null;
        } else {
          centerWorldSpaceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawCameraMove_descriptor;
      }

      public SC2APIProtocol.Raw.ActionRawCameraMove getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.ActionRawCameraMove.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.ActionRawCameraMove build() {
        SC2APIProtocol.Raw.ActionRawCameraMove result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.ActionRawCameraMove buildPartial() {
        SC2APIProtocol.Raw.ActionRawCameraMove result = new SC2APIProtocol.Raw.ActionRawCameraMove(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (centerWorldSpaceBuilder_ == null) {
          result.centerWorldSpace_ = centerWorldSpace_;
        } else {
          result.centerWorldSpace_ = centerWorldSpaceBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.ActionRawCameraMove) {
          return mergeFrom((SC2APIProtocol.Raw.ActionRawCameraMove)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.ActionRawCameraMove other) {
        if (other == SC2APIProtocol.Raw.ActionRawCameraMove.getDefaultInstance()) return this;
        if (other.hasCenterWorldSpace()) {
          mergeCenterWorldSpace(other.getCenterWorldSpace());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.ActionRawCameraMove parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.ActionRawCameraMove) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SC2APIProtocol.Common.Point centerWorldSpace_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder> centerWorldSpaceBuilder_;
      /**
       * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
       */
      public boolean hasCenterWorldSpace() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
       */
      public SC2APIProtocol.Common.Point getCenterWorldSpace() {
        if (centerWorldSpaceBuilder_ == null) {
          return centerWorldSpace_ == null ? SC2APIProtocol.Common.Point.getDefaultInstance() : centerWorldSpace_;
        } else {
          return centerWorldSpaceBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
       */
      public Builder setCenterWorldSpace(SC2APIProtocol.Common.Point value) {
        if (centerWorldSpaceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          centerWorldSpace_ = value;
          onChanged();
        } else {
          centerWorldSpaceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
       */
      public Builder setCenterWorldSpace(
          SC2APIProtocol.Common.Point.Builder builderForValue) {
        if (centerWorldSpaceBuilder_ == null) {
          centerWorldSpace_ = builderForValue.build();
          onChanged();
        } else {
          centerWorldSpaceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
       */
      public Builder mergeCenterWorldSpace(SC2APIProtocol.Common.Point value) {
        if (centerWorldSpaceBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              centerWorldSpace_ != null &&
              centerWorldSpace_ != SC2APIProtocol.Common.Point.getDefaultInstance()) {
            centerWorldSpace_ =
              SC2APIProtocol.Common.Point.newBuilder(centerWorldSpace_).mergeFrom(value).buildPartial();
          } else {
            centerWorldSpace_ = value;
          }
          onChanged();
        } else {
          centerWorldSpaceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
       */
      public Builder clearCenterWorldSpace() {
        if (centerWorldSpaceBuilder_ == null) {
          centerWorldSpace_ = null;
          onChanged();
        } else {
          centerWorldSpaceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
       */
      public SC2APIProtocol.Common.Point.Builder getCenterWorldSpaceBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCenterWorldSpaceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
       */
      public SC2APIProtocol.Common.PointOrBuilder getCenterWorldSpaceOrBuilder() {
        if (centerWorldSpaceBuilder_ != null) {
          return centerWorldSpaceBuilder_.getMessageOrBuilder();
        } else {
          return centerWorldSpace_ == null ?
              SC2APIProtocol.Common.Point.getDefaultInstance() : centerWorldSpace_;
        }
      }
      /**
       * <code>optional .SC2APIProtocol.Point center_world_space = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder> 
          getCenterWorldSpaceFieldBuilder() {
        if (centerWorldSpaceBuilder_ == null) {
          centerWorldSpaceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SC2APIProtocol.Common.Point, SC2APIProtocol.Common.Point.Builder, SC2APIProtocol.Common.PointOrBuilder>(
                  getCenterWorldSpace(),
                  getParentForChildren(),
                  isClean());
          centerWorldSpace_ = null;
        }
        return centerWorldSpaceBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ActionRawCameraMove)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionRawCameraMove)
    private static final SC2APIProtocol.Raw.ActionRawCameraMove DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.ActionRawCameraMove();
    }

    public static SC2APIProtocol.Raw.ActionRawCameraMove getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ActionRawCameraMove>
        PARSER = new com.google.protobuf.AbstractParser<ActionRawCameraMove>() {
      public ActionRawCameraMove parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ActionRawCameraMove(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ActionRawCameraMove> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ActionRawCameraMove> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.ActionRawCameraMove getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActionRawToggleAutocastOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.ActionRawToggleAutocast)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    boolean hasAbilityId();
    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    int getAbilityId();

    /**
     * <code>repeated uint64 unit_tags = 2;</code>
     */
    java.util.List<java.lang.Long> getUnitTagsList();
    /**
     * <code>repeated uint64 unit_tags = 2;</code>
     */
    int getUnitTagsCount();
    /**
     * <code>repeated uint64 unit_tags = 2;</code>
     */
    long getUnitTags(int index);
  }
  /**
   * Protobuf type {@code SC2APIProtocol.ActionRawToggleAutocast}
   */
  public  static final class ActionRawToggleAutocast extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.ActionRawToggleAutocast)
      ActionRawToggleAutocastOrBuilder {
    // Use ActionRawToggleAutocast.newBuilder() to construct.
    private ActionRawToggleAutocast(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ActionRawToggleAutocast() {
      abilityId_ = 0;
      unitTags_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ActionRawToggleAutocast(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              abilityId_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                unitTags_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              unitTags_.add(input.readUInt64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                unitTags_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                unitTags_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          unitTags_ = java.util.Collections.unmodifiableList(unitTags_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawToggleAutocast_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawToggleAutocast_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.ActionRawToggleAutocast.class, SC2APIProtocol.Raw.ActionRawToggleAutocast.Builder.class);
    }

    private int bitField0_;
    public static final int ABILITY_ID_FIELD_NUMBER = 1;
    private int abilityId_;
    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    public boolean hasAbilityId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 ability_id = 1;</code>
     */
    public int getAbilityId() {
      return abilityId_;
    }

    public static final int UNIT_TAGS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Long> unitTags_;
    /**
     * <code>repeated uint64 unit_tags = 2;</code>
     */
    public java.util.List<java.lang.Long>
        getUnitTagsList() {
      return unitTags_;
    }
    /**
     * <code>repeated uint64 unit_tags = 2;</code>
     */
    public int getUnitTagsCount() {
      return unitTags_.size();
    }
    /**
     * <code>repeated uint64 unit_tags = 2;</code>
     */
    public long getUnitTags(int index) {
      return unitTags_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, abilityId_);
      }
      for (int i = 0; i < unitTags_.size(); i++) {
        output.writeUInt64(2, unitTags_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, abilityId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < unitTags_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(unitTags_.get(i));
        }
        size += dataSize;
        size += 1 * getUnitTagsList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.ActionRawToggleAutocast)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.ActionRawToggleAutocast other = (SC2APIProtocol.Raw.ActionRawToggleAutocast) obj;

      boolean result = true;
      result = result && (hasAbilityId() == other.hasAbilityId());
      if (hasAbilityId()) {
        result = result && (getAbilityId()
            == other.getAbilityId());
      }
      result = result && getUnitTagsList()
          .equals(other.getUnitTagsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasAbilityId()) {
        hash = (37 * hash) + ABILITY_ID_FIELD_NUMBER;
        hash = (53 * hash) + getAbilityId();
      }
      if (getUnitTagsCount() > 0) {
        hash = (37 * hash) + UNIT_TAGS_FIELD_NUMBER;
        hash = (53 * hash) + getUnitTagsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.ActionRawToggleAutocast parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.ActionRawToggleAutocast parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawToggleAutocast parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.ActionRawToggleAutocast parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawToggleAutocast parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRawToggleAutocast parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawToggleAutocast parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRawToggleAutocast parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.ActionRawToggleAutocast parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.ActionRawToggleAutocast parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.ActionRawToggleAutocast prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.ActionRawToggleAutocast}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.ActionRawToggleAutocast)
        SC2APIProtocol.Raw.ActionRawToggleAutocastOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawToggleAutocast_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawToggleAutocast_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.ActionRawToggleAutocast.class, SC2APIProtocol.Raw.ActionRawToggleAutocast.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.ActionRawToggleAutocast.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        abilityId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        unitTags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_ActionRawToggleAutocast_descriptor;
      }

      public SC2APIProtocol.Raw.ActionRawToggleAutocast getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.ActionRawToggleAutocast.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.ActionRawToggleAutocast build() {
        SC2APIProtocol.Raw.ActionRawToggleAutocast result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.ActionRawToggleAutocast buildPartial() {
        SC2APIProtocol.Raw.ActionRawToggleAutocast result = new SC2APIProtocol.Raw.ActionRawToggleAutocast(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.abilityId_ = abilityId_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          unitTags_ = java.util.Collections.unmodifiableList(unitTags_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.unitTags_ = unitTags_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.ActionRawToggleAutocast) {
          return mergeFrom((SC2APIProtocol.Raw.ActionRawToggleAutocast)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.ActionRawToggleAutocast other) {
        if (other == SC2APIProtocol.Raw.ActionRawToggleAutocast.getDefaultInstance()) return this;
        if (other.hasAbilityId()) {
          setAbilityId(other.getAbilityId());
        }
        if (!other.unitTags_.isEmpty()) {
          if (unitTags_.isEmpty()) {
            unitTags_ = other.unitTags_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureUnitTagsIsMutable();
            unitTags_.addAll(other.unitTags_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.ActionRawToggleAutocast parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.ActionRawToggleAutocast) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int abilityId_ ;
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public boolean hasAbilityId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public int getAbilityId() {
        return abilityId_;
      }
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public Builder setAbilityId(int value) {
        bitField0_ |= 0x00000001;
        abilityId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ability_id = 1;</code>
       */
      public Builder clearAbilityId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        abilityId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> unitTags_ = java.util.Collections.emptyList();
      private void ensureUnitTagsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          unitTags_ = new java.util.ArrayList<java.lang.Long>(unitTags_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint64 unit_tags = 2;</code>
       */
      public java.util.List<java.lang.Long>
          getUnitTagsList() {
        return java.util.Collections.unmodifiableList(unitTags_);
      }
      /**
       * <code>repeated uint64 unit_tags = 2;</code>
       */
      public int getUnitTagsCount() {
        return unitTags_.size();
      }
      /**
       * <code>repeated uint64 unit_tags = 2;</code>
       */
      public long getUnitTags(int index) {
        return unitTags_.get(index);
      }
      /**
       * <code>repeated uint64 unit_tags = 2;</code>
       */
      public Builder setUnitTags(
          int index, long value) {
        ensureUnitTagsIsMutable();
        unitTags_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 unit_tags = 2;</code>
       */
      public Builder addUnitTags(long value) {
        ensureUnitTagsIsMutable();
        unitTags_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 unit_tags = 2;</code>
       */
      public Builder addAllUnitTags(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureUnitTagsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, unitTags_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 unit_tags = 2;</code>
       */
      public Builder clearUnitTags() {
        unitTags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.ActionRawToggleAutocast)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionRawToggleAutocast)
    private static final SC2APIProtocol.Raw.ActionRawToggleAutocast DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.ActionRawToggleAutocast();
    }

    public static SC2APIProtocol.Raw.ActionRawToggleAutocast getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ActionRawToggleAutocast>
        PARSER = new com.google.protobuf.AbstractParser<ActionRawToggleAutocast>() {
      public ActionRawToggleAutocast parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ActionRawToggleAutocast(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ActionRawToggleAutocast> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ActionRawToggleAutocast> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.ActionRawToggleAutocast getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SC2APIProtocol.Event)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated uint64 dead_units = 1;</code>
     */
    java.util.List<java.lang.Long> getDeadUnitsList();
    /**
     * <code>repeated uint64 dead_units = 1;</code>
     */
    int getDeadUnitsCount();
    /**
     * <code>repeated uint64 dead_units = 1;</code>
     */
    long getDeadUnits(int index);
  }
  /**
   * Protobuf type {@code SC2APIProtocol.Event}
   */
  public  static final class Event extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SC2APIProtocol.Event)
      EventOrBuilder {
    // Use Event.newBuilder() to construct.
    private Event(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Event() {
      deadUnits_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Event(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                deadUnits_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              deadUnits_.add(input.readUInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                deadUnits_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                deadUnits_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          deadUnits_ = java.util.Collections.unmodifiableList(deadUnits_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_Event_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_Event_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SC2APIProtocol.Raw.Event.class, SC2APIProtocol.Raw.Event.Builder.class);
    }

    public static final int DEAD_UNITS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> deadUnits_;
    /**
     * <code>repeated uint64 dead_units = 1;</code>
     */
    public java.util.List<java.lang.Long>
        getDeadUnitsList() {
      return deadUnits_;
    }
    /**
     * <code>repeated uint64 dead_units = 1;</code>
     */
    public int getDeadUnitsCount() {
      return deadUnits_.size();
    }
    /**
     * <code>repeated uint64 dead_units = 1;</code>
     */
    public long getDeadUnits(int index) {
      return deadUnits_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < deadUnits_.size(); i++) {
        output.writeUInt64(1, deadUnits_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < deadUnits_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(deadUnits_.get(i));
        }
        size += dataSize;
        size += 1 * getDeadUnitsList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SC2APIProtocol.Raw.Event)) {
        return super.equals(obj);
      }
      SC2APIProtocol.Raw.Event other = (SC2APIProtocol.Raw.Event) obj;

      boolean result = true;
      result = result && getDeadUnitsList()
          .equals(other.getDeadUnitsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getDeadUnitsCount() > 0) {
        hash = (37 * hash) + DEAD_UNITS_FIELD_NUMBER;
        hash = (53 * hash) + getDeadUnitsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SC2APIProtocol.Raw.Event parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.Event parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.Event parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SC2APIProtocol.Raw.Event parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.Event parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.Event parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.Event parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.Event parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SC2APIProtocol.Raw.Event parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SC2APIProtocol.Raw.Event parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SC2APIProtocol.Raw.Event prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SC2APIProtocol.Event}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SC2APIProtocol.Event)
        SC2APIProtocol.Raw.EventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_Event_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_Event_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SC2APIProtocol.Raw.Event.class, SC2APIProtocol.Raw.Event.Builder.class);
      }

      // Construct using SC2APIProtocol.Raw.Event.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        deadUnits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SC2APIProtocol.Raw.internal_static_SC2APIProtocol_Event_descriptor;
      }

      public SC2APIProtocol.Raw.Event getDefaultInstanceForType() {
        return SC2APIProtocol.Raw.Event.getDefaultInstance();
      }

      public SC2APIProtocol.Raw.Event build() {
        SC2APIProtocol.Raw.Event result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SC2APIProtocol.Raw.Event buildPartial() {
        SC2APIProtocol.Raw.Event result = new SC2APIProtocol.Raw.Event(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          deadUnits_ = java.util.Collections.unmodifiableList(deadUnits_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.deadUnits_ = deadUnits_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SC2APIProtocol.Raw.Event) {
          return mergeFrom((SC2APIProtocol.Raw.Event)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SC2APIProtocol.Raw.Event other) {
        if (other == SC2APIProtocol.Raw.Event.getDefaultInstance()) return this;
        if (!other.deadUnits_.isEmpty()) {
          if (deadUnits_.isEmpty()) {
            deadUnits_ = other.deadUnits_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDeadUnitsIsMutable();
            deadUnits_.addAll(other.deadUnits_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SC2APIProtocol.Raw.Event parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SC2APIProtocol.Raw.Event) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Long> deadUnits_ = java.util.Collections.emptyList();
      private void ensureDeadUnitsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          deadUnits_ = new java.util.ArrayList<java.lang.Long>(deadUnits_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated uint64 dead_units = 1;</code>
       */
      public java.util.List<java.lang.Long>
          getDeadUnitsList() {
        return java.util.Collections.unmodifiableList(deadUnits_);
      }
      /**
       * <code>repeated uint64 dead_units = 1;</code>
       */
      public int getDeadUnitsCount() {
        return deadUnits_.size();
      }
      /**
       * <code>repeated uint64 dead_units = 1;</code>
       */
      public long getDeadUnits(int index) {
        return deadUnits_.get(index);
      }
      /**
       * <code>repeated uint64 dead_units = 1;</code>
       */
      public Builder setDeadUnits(
          int index, long value) {
        ensureDeadUnitsIsMutable();
        deadUnits_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 dead_units = 1;</code>
       */
      public Builder addDeadUnits(long value) {
        ensureDeadUnitsIsMutable();
        deadUnits_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 dead_units = 1;</code>
       */
      public Builder addAllDeadUnits(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDeadUnitsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, deadUnits_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 dead_units = 1;</code>
       */
      public Builder clearDeadUnits() {
        deadUnits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SC2APIProtocol.Event)
    }

    // @@protoc_insertion_point(class_scope:SC2APIProtocol.Event)
    private static final SC2APIProtocol.Raw.Event DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SC2APIProtocol.Raw.Event();
    }

    public static SC2APIProtocol.Raw.Event getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Event>
        PARSER = new com.google.protobuf.AbstractParser<Event>() {
      public Event parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Event(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Event> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Event> getParserForType() {
      return PARSER;
    }

    public SC2APIProtocol.Raw.Event getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_StartRaw_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_StartRaw_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ObservationRaw_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ObservationRaw_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_PowerSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_PowerSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_PlayerRaw_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_PlayerRaw_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_UnitOrder_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_UnitOrder_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_PassengerUnit_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_PassengerUnit_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_Unit_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_Unit_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_MapState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_MapState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ActionRaw_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ActionRaw_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ActionRawUnitCommand_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ActionRawUnitCommand_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ActionRawCameraMove_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ActionRawCameraMove_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_ActionRawToggleAutocast_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_ActionRawToggleAutocast_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SC2APIProtocol_Event_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SC2APIProtocol_Event_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\traw.proto\022\016SC2APIProtocol\032\014common.prot" +
      "o\"\261\002\n\010StartRaw\022)\n\010map_size\030\001 \001(\0132\027.SC2AP" +
      "IProtocol.Size2DI\022/\n\014pathing_grid\030\002 \001(\0132" +
      "\031.SC2APIProtocol.ImageData\0221\n\016terrain_he" +
      "ight\030\003 \001(\0132\031.SC2APIProtocol.ImageData\0221\n" +
      "\016placement_grid\030\004 \001(\0132\031.SC2APIProtocol.I" +
      "mageData\0221\n\rplayable_area\030\005 \001(\0132\032.SC2API" +
      "Protocol.RectangleI\0220\n\017start_locations\030\006" +
      " \003(\0132\027.SC2APIProtocol.Point2D\"\263\001\n\016Observ" +
      "ationRaw\022)\n\006player\030\001 \001(\0132\031.SC2APIProtoco",
      "l.PlayerRaw\022#\n\005units\030\002 \003(\0132\024.SC2APIProto" +
      "col.Unit\022+\n\tmap_state\030\003 \001(\0132\030.SC2APIProt" +
      "ocol.MapState\022$\n\005event\030\004 \001(\0132\025.SC2APIPro" +
      "tocol.Event\"N\n\013PowerSource\022\"\n\003pos\030\001 \001(\0132" +
      "\025.SC2APIProtocol.Point\022\016\n\006radius\030\002 \001(\002\022\013" +
      "\n\003tag\030\003 \001(\004\"{\n\tPlayerRaw\0222\n\rpower_source" +
      "s\030\001 \003(\0132\033.SC2APIProtocol.PowerSource\022%\n\006" +
      "camera\030\002 \001(\0132\025.SC2APIProtocol.Point\022\023\n\013u" +
      "pgrade_ids\030\003 \003(\r\"\217\001\n\tUnitOrder\022\022\n\nabilit" +
      "y_id\030\001 \001(\r\0227\n\026target_world_space_pos\030\002 \001",
      "(\0132\025.SC2APIProtocol.PointH\000\022\031\n\017target_un" +
      "it_tag\030\003 \001(\004H\000\022\020\n\010progress\030\004 \001(\002B\010\n\006targ" +
      "et\"s\n\rPassengerUnit\022\013\n\003tag\030\001 \001(\004\022\016\n\006heal" +
      "th\030\002 \001(\002\022\022\n\nhealth_max\030\003 \001(\002\022\016\n\006shield\030\004" +
      " \001(\002\022\016\n\006energy\030\005 \001(\002\022\021\n\tunit_type\030\006 \001(\r\"" +
      "\306\006\n\004Unit\0221\n\014display_type\030\001 \001(\0162\033.SC2APIP" +
      "rotocol.DisplayType\022*\n\010alliance\030\002 \001(\0162\030." +
      "SC2APIProtocol.Alliance\022\013\n\003tag\030\003 \001(\004\022\021\n\t" +
      "unit_type\030\004 \001(\r\022\r\n\005owner\030\005 \001(\005\022\"\n\003pos\030\006 " +
      "\001(\0132\025.SC2APIProtocol.Point\022\016\n\006facing\030\007 \001",
      "(\002\022\016\n\006radius\030\010 \001(\002\022\026\n\016build_progress\030\t \001" +
      "(\002\022)\n\005cloak\030\n \001(\0162\032.SC2APIProtocol.Cloak" +
      "State\022\024\n\014detect_range\030\037 \001(\002\022\023\n\013radar_ran" +
      "ge\030  \001(\002\022\023\n\013is_selected\030\013 \001(\010\022\024\n\014is_on_s" +
      "creen\030\014 \001(\010\022\017\n\007is_blip\030\r \001(\010\022\016\n\006health\030\016" +
      " \001(\002\022\022\n\nhealth_max\030\017 \001(\002\022\016\n\006shield\030\020 \001(\002" +
      "\022\016\n\006energy\030\021 \001(\002\022\030\n\020mineral_contents\030\022 \001" +
      "(\005\022\030\n\020vespene_contents\030\023 \001(\005\022\021\n\tis_flyin" +
      "g\030\024 \001(\010\022\023\n\013is_burrowed\030\025 \001(\010\022)\n\006orders\030\026" +
      " \003(\0132\031.SC2APIProtocol.UnitOrder\022\022\n\nadd_o",
      "n_tag\030\027 \001(\004\0221\n\npassengers\030\030 \003(\0132\035.SC2API" +
      "Protocol.PassengerUnit\022\031\n\021cargo_space_ta" +
      "ken\030\031 \001(\005\022\027\n\017cargo_space_max\030\032 \001(\005\022\020\n\010bu" +
      "ff_ids\030\033 \003(\r\022\033\n\023assigned_harvesters\030\034 \001(" +
      "\005\022\030\n\020ideal_harvesters\030\035 \001(\005\022\027\n\017weapon_co" +
      "oldown\030\036 \001(\002\022\032\n\022engaged_target_tag\030\" \001(\004" +
      "\"c\n\010MapState\022-\n\nvisibility\030\001 \001(\0132\031.SC2AP" +
      "IProtocol.ImageData\022(\n\005creep\030\002 \001(\0132\031.SC2" +
      "APIProtocol.ImageData\"\323\001\n\tActionRaw\022<\n\014u" +
      "nit_command\030\001 \001(\0132$.SC2APIProtocol.Actio",
      "nRawUnitCommandH\000\022:\n\013camera_move\030\002 \001(\0132#" +
      ".SC2APIProtocol.ActionRawCameraMoveH\000\022B\n" +
      "\017toggle_autocast\030\003 \001(\0132\'.SC2APIProtocol." +
      "ActionRawToggleAutocastH\000B\010\n\006action\"\264\001\n\024" +
      "ActionRawUnitCommand\022\022\n\nability_id\030\001 \001(\005" +
      "\0229\n\026target_world_space_pos\030\002 \001(\0132\027.SC2AP" +
      "IProtocol.Point2DH\000\022\031\n\017target_unit_tag\030\003" +
      " \001(\004H\000\022\021\n\tunit_tags\030\004 \003(\004\022\025\n\rqueue_comma" +
      "nd\030\005 \001(\010B\010\n\006target\"H\n\023ActionRawCameraMov" +
      "e\0221\n\022center_world_space\030\001 \001(\0132\025.SC2APIPr",
      "otocol.Point\"@\n\027ActionRawToggleAutocast\022" +
      "\022\n\nability_id\030\001 \001(\005\022\021\n\tunit_tags\030\002 \003(\004\"\033" +
      "\n\005Event\022\022\n\ndead_units\030\001 \003(\004*4\n\013DisplayTy" +
      "pe\022\013\n\007Visible\020\001\022\014\n\010Snapshot\020\002\022\n\n\006Hidden\020" +
      "\003*6\n\010Alliance\022\010\n\004Self\020\001\022\010\n\004Ally\020\002\022\013\n\007Neu" +
      "tral\020\003\022\t\n\005Enemy\020\004*>\n\nCloakState\022\013\n\007Cloak" +
      "ed\020\001\022\023\n\017CloakedDetected\020\002\022\016\n\nNotCloaked\020" +
      "\003"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          SC2APIProtocol.Common.getDescriptor(),
        }, assigner);
    internal_static_SC2APIProtocol_StartRaw_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_SC2APIProtocol_StartRaw_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_StartRaw_descriptor,
        new java.lang.String[] { "MapSize", "PathingGrid", "TerrainHeight", "PlacementGrid", "PlayableArea", "StartLocations", });
    internal_static_SC2APIProtocol_ObservationRaw_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_SC2APIProtocol_ObservationRaw_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ObservationRaw_descriptor,
        new java.lang.String[] { "Player", "Units", "MapState", "Event", });
    internal_static_SC2APIProtocol_PowerSource_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_SC2APIProtocol_PowerSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_PowerSource_descriptor,
        new java.lang.String[] { "Pos", "Radius", "Tag", });
    internal_static_SC2APIProtocol_PlayerRaw_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_SC2APIProtocol_PlayerRaw_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_PlayerRaw_descriptor,
        new java.lang.String[] { "PowerSources", "Camera", "UpgradeIds", });
    internal_static_SC2APIProtocol_UnitOrder_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_SC2APIProtocol_UnitOrder_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_UnitOrder_descriptor,
        new java.lang.String[] { "AbilityId", "TargetWorldSpacePos", "TargetUnitTag", "Progress", "Target", });
    internal_static_SC2APIProtocol_PassengerUnit_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_SC2APIProtocol_PassengerUnit_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_PassengerUnit_descriptor,
        new java.lang.String[] { "Tag", "Health", "HealthMax", "Shield", "Energy", "UnitType", });
    internal_static_SC2APIProtocol_Unit_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_SC2APIProtocol_Unit_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_Unit_descriptor,
        new java.lang.String[] { "DisplayType", "Alliance", "Tag", "UnitType", "Owner", "Pos", "Facing", "Radius", "BuildProgress", "Cloak", "DetectRange", "RadarRange", "IsSelected", "IsOnScreen", "IsBlip", "Health", "HealthMax", "Shield", "Energy", "MineralContents", "VespeneContents", "IsFlying", "IsBurrowed", "Orders", "AddOnTag", "Passengers", "CargoSpaceTaken", "CargoSpaceMax", "BuffIds", "AssignedHarvesters", "IdealHarvesters", "WeaponCooldown", "EngagedTargetTag", });
    internal_static_SC2APIProtocol_MapState_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_SC2APIProtocol_MapState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_MapState_descriptor,
        new java.lang.String[] { "Visibility", "Creep", });
    internal_static_SC2APIProtocol_ActionRaw_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_SC2APIProtocol_ActionRaw_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ActionRaw_descriptor,
        new java.lang.String[] { "UnitCommand", "CameraMove", "ToggleAutocast", "Action", });
    internal_static_SC2APIProtocol_ActionRawUnitCommand_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_SC2APIProtocol_ActionRawUnitCommand_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ActionRawUnitCommand_descriptor,
        new java.lang.String[] { "AbilityId", "TargetWorldSpacePos", "TargetUnitTag", "UnitTags", "QueueCommand", "Target", });
    internal_static_SC2APIProtocol_ActionRawCameraMove_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_SC2APIProtocol_ActionRawCameraMove_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ActionRawCameraMove_descriptor,
        new java.lang.String[] { "CenterWorldSpace", });
    internal_static_SC2APIProtocol_ActionRawToggleAutocast_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_SC2APIProtocol_ActionRawToggleAutocast_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_ActionRawToggleAutocast_descriptor,
        new java.lang.String[] { "AbilityId", "UnitTags", });
    internal_static_SC2APIProtocol_Event_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_SC2APIProtocol_Event_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SC2APIProtocol_Event_descriptor,
        new java.lang.String[] { "DeadUnits", });
    SC2APIProtocol.Common.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
